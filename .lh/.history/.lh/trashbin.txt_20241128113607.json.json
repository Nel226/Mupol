{
    "sourceFile": ".history/.lh/trashbin.txt_20241128113607.json",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1732793924992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1732793924992,
            "name": "Commit-0",
            "content": "{\n    \"sourceFile\": \"trashbin.txt\",\n    \"activeCommit\": 0,\n    \"commits\": [\n        {\n            \"activePatchIndex\": 0,\n            \"patches\": [\n                {\n                    \"date\": 1732793741089,\n                    \"content\": \"Index: \\n===================================================================\\n--- \\n+++ \\n\"\n                }\n            ],\n            \"date\": 1732793741089,\n            \"name\": \"Commit-0\",\n            \"content\": \"// Vue de l'email\\n \\nnamespace App\\\\Mail;\\n\\nuse Illuminate\\\\Bus\\\\Queueable;\\nuse Illuminate\\\\Mail\\\\Mailable;\\nuse Illuminate\\\\Queue\\\\SerializesModels;\\n\\nclass PartenaireAdhesion extends Mailable\\n{\\n    use Queueable, SerializesModels;\\n\\n    public $email;\\n    public $password;\\n    public $nom;\\n\\n    /**\\n     * Create a new message instance.\\n     */\\n    public function __construct($data)\\n    {\\n        $this->email = $data['email'];\\n        $this->password = $data['password'];\\n        $this->nom = $data['nom'];\\n    }\\n\\n    /**\\n     * Build the message.\\n     */\\n    public function build()\\n    {\\n        return $this->view('emails.partenaire-adhesion')\\n                    ->subject('Bienvenue à la MU-POL!')\\n                    ->with([\\n                        'email' => $this->email,\\n                        'password' => $this->password,\\n                        'nom' => $this->nom,\\n                    ]);\\n    }\\n}\\n\\n \\n<?php\\n\\nnamespace App\\\\Mail;\\n\\nuse Illuminate\\\\Bus\\\\Queueable;\\nuse Illuminate\\\\Mail\\\\Mailable;\\nuse Illuminate\\\\Queue\\\\SerializesModels;\\n\\nclass PartenaireAdhesion extends Mailable\\n{\\n    use Queueable, SerializesModels;\\n\\n    public $email;\\n    public $password;\\n    public $nom;\\n\\n    /**\\n     * Create a new message instance.\\n     */\\n    public function __construct($data)\\n    {\\n        $this->email = $data['email'];\\n        $this->password = $data['password'];\\n        $this->nom = $data['nom'];\\n    }\\n\\n    /**\\n     * Build the message.\\n     */\\n    public function build()\\n    {\\n        return $this->view('emails.partenaire-adhesion')\\n                    ->subject('Bienvenue à la MU-POL!')\\n                    ->with([\\n                        'email' => $this->email,\\n                        'password' => $this->password,\\n                        'nom' => $this->nom,\\n                    ]);\\n    }\\n}\\n\\n \\n            dd($mailData);\\n\\n \\n<p>Voici vos informations d'identification :</p>\\n    <ul>\\n        <li><strong>Email :</strong> {{ $email }}</li>\\n        <li><strong>Mot de passe temporaire :</strong> {{ $password }}</li>\\n    </ul>\\n\\n \\n$validatedData['nom'] ?? \\n \\n            dd($mailData);\\n\\n \\nvalidatedData['email']\\n \\ngeneratedPassword\\n \\n                 \\n \\nContent\\n \\npublic function content()\\n    {\\n        return $this->view('emails.partenaire-adhesion')\\n                    ->with([\\n                        'email' => $this->email,\\n                        'password' => $this->password,\\n                        'nom' => $this->nom,\\n                    ])\\n                    ->subject('Bienvenue à la MU-POL!');\\n    }\\n \\n<!DOCTYPE html>\\n<html lang=\\\"fr\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <title>Bienvenue à la MU-POL!</title>\\n</head>\\n<body>\\n    <h1>Bienvenue à la MU-POL!</h1>\\n    <p>Votre compte a été créé avec succès en tant que partenaire de santé.</p>\\n\\n    <p>Nous sommes ravis de vous compter parmi nos partenaires.</p>\\n\\n    <p>Voici vos informations de connexion :</p>\\n    <ul>\\n        <li><strong>Email :</strong> {{ $email }}</li>\\n        <li><strong>Mot de passe temporaire :</strong> {{ $password }}</li>\\n    </ul>\\n\\n    <p>Vous pouvez maintenant vous connecter à votre compte.</p>\\n\\n    <p>Si vous avez des questions, n'hésitez pas à nous contacter.</p>\\n\\n    <p>Merci,</p>\\n    <p>L'équipe de la Mutelle de la Police Nationale</p>\\n</body>\\n</html>\\n\\n \\nnamespace App\\\\Mail;\\n\\nuse Illuminate\\\\Bus\\\\Queueable;\\nuse Illuminate\\\\Contracts\\\\Queue\\\\ShouldQueue;\\nuse Illuminate\\\\Mail\\\\Mailable;\\nuse Illuminate\\\\Mail\\\\Mailables\\\\Content;\\nuse Illuminate\\\\Mail\\\\Mailables\\\\Envelope;\\nuse Illuminate\\\\Queue\\\\SerializesModels;\\n\\nclass PartenaireAdhesion extends Mailable\\n{\\n    use Queueable, SerializesModels;\\n    public $email;\\n    public $password;\\n\\n    public function __construct($email, $password)\\n    {\\n        $this->email = $email;\\n        $this->password = $password;\\n    }\\n\\n    public function build()\\n    {\\n        return $this->view('emails.partenaire-adhesion')\\n                    ->with([\\n                        'email' => $this->email,\\n                        'password' => $this->password,\\n                    ])\\n                    ->subject('Bienvenue à la MU-POL');\\n    }\\n\\n    /**\\n     * Get the message envelope.\\n     */\\n    public function envelope(): Envelope\\n    {\\n        return new Envelope(\\n            subject: 'Partenaire Adhesion MU-POL',\\n        );\\n    }\\n\\n    /**\\n     * Get the message content definition.\\n     */\\n    \\n    \\n   \\n    /**\\n     * Get the attachments for the message.\\n     *\\n     * @return array<int, \\\\Illuminate\\\\Mail\\\\Mailables\\\\Attachment>\\n     */\\n    public function attachments(): array\\n    {\\n        return [];\\n    }\\n}\\n\\n \\npartenaire->\\n \\n public function build()\\n    {\\n        return $this->view('emails.partenaire-adhesion')\\n                    ->with([\\n                        'partenaire' => $this->partenaire,\\n                        'generatedPassword' => $this->generatedPassword,\\n                    ])\\n                    ->subject('Bienvenue à la MU-POL');\\n    }\\n    \\n \\n            dd($partenaire, $generatedPassword);\\n\\n \\npartenaire\\n \\npublic function content(): Content\\n    {\\n        return new Content(\\n            view: 'emails.partenaire-adhesion', \\n            with: [\\n                'partenaire' => $this->partenaire,\\n                'logoUrl' => asset('images/logo.png'), \\n                'generatedPassword' => $this->generatedPassword, \\n\\n            ],\\n           \\n        );\\n    }\\n \\n <p>Voici vos informations d'identification :</p>\\n    <ul>\\n        <li><strong>Email :</strong> {{ $email }}</li>\\n        <li><strong>Mot de passe temporaire :</strong> {{ $password }}</li>\\n    </ul>\\n\\n \\n->with([\\n                        'name' => $this->partenaire->name,\\n                        'email' => $this->partenaire->email, \\n                        'password' => $this->password,\\n                    ])\\n \\n->with([\\n                        'name' => $this->partenaire->name,\\n                        'email' => $this->partenaire->email, \\n                        'password' => $this->password,\\n                    ]);\\n \\n with([\\n                'generatedPassword' => $this->generatedPassword,\\n                'logoUrl' => asset('images/logo.png'), \\n            ],\\n            with: [\\n                'email' => $this->partenaire->email,\\n                'password' => $this->password,\\n\\n            ],\\n \\n                'demandeAdhesion' => $this->demandeAdhesion,\\n\\n \\n with: [\\n                'email' => $this->partenaire->email,\\n                'password' => $this->password,\\n\\n            ],\\n \\n with: [\\n                'email' => $this->partenaire->email,\\n                'password' => $this->password,\\n\\n            ],\\n \\n @if ($adherent->nombreAyantsDroits > 0)\\n                                <table class=\\\"w-full border-collapse bg-white shadow-md rounded-lg overflow-hidden mt-6\\\">\\n                                    <thead>\\n                                        <tr class=\\\"bg-gray-100 text-gray-600 uppercase text-sm leading-normal\\\">\\n                                            <th class=\\\"py-3 px-4 text-center\\\">Photo</th>\\n                                            <th class=\\\"py-3 px-4\\\">Nom</th>\\n                                            <th class=\\\"py-3 px-4\\\">Prénom(s)</th>\\n                                            <th class=\\\"py-3 px-4\\\">Sexe</th>\\n                                            <th class=\\\"py-3 px-4\\\">Lien de parenté</th>\\n                                            <th class=\\\"py-3 px-4 text-center\\\">CNIB</th>\\n                                            <th class=\\\"py-3 px-4 text-center\\\">Extrait</th>\\n                                        </tr>\\n                                    </thead>\\n                                    <tbody>\\n                                        @foreach ($adherent->ayantsDroits as $index => $ayantDroit)\\n                                            <tr class=\\\"border-b border-gray-200 hover:bg-gray-100\\\">\\n                                                <!-- Photo -->\\n                                                <td class=\\\"py-3 px-4 text-center\\\">\\n                                                    {{-- <img \\n                                                    src=\\\"{{ asset(Storage::url('photos/ayants-droit/' . $ayantDroit->photo ?? 'default.jpg')) }}\\\" \\n                                                    alt=\\\"Photo de {{ $ayantDroit->nom }}\\\" \\n                                                        class=\\\"w-10 h-10 rounded-full object-cover mx-auto\\\"\\n                                                    /> --}}\\n                                                </td>\\n                                                \\n                                                <!-- Nom -->\\n                                                <td class=\\\"py-3 px-4\\\">{{ $ayantDroit->nom }}</td>\\n                                                \\n                                                <!-- Prénom(s) -->\\n                                                <td class=\\\"py-3 px-4\\\">{{ $ayantDroit->prenoms }}</td>\\n                                                \\n                                                <!-- Sexe -->\\n                                                <td class=\\\"py-3 px-4\\\">{{ ucfirst($ayantDroit->sexe) }}</td>\\n                                                \\n                                                <!-- Lien de parenté -->\\n                                                <td class=\\\"py-3 px-4\\\">{{ $ayantDroit->lienParente }}</td>\\n                                                \\n                                                <!-- CNIB -->\\n                                                <td class=\\\"py-3 px-4 text-center\\\">\\n                                                    @if($ayantDroit->cnib)\\n                                                        {{ $ayantDroit->cnib }}\\n                                                    @else\\n                                                        <span class=\\\"text-gray-500\\\">Non disponible</span>\\n                                                    @endif\\n                                                </td>\\n                                                \\n                                                <!-- Extrait -->\\n                                                <td class=\\\"py-3 px-4 text-center\\\">\\n                                                    @if($ayantDroit->extrait)\\n                                                        <a \\n                                                            href=\\\"{{ asset($ayantDroit->extrait) }}\\\" \\n                                                            target=\\\"_blank\\\" \\n                                                            class=\\\"text-blue-600 hover:underline\\\"\\n                                                        >\\n                                                            Voir\\n                                                        </a>\\n                                                    @else\\n                                                        <span class=\\\"text-gray-500\\\">Non disponible</span>\\n                                                    @endif\\n                                                </td>\\n                                            </tr>\\n                                        @endforeach\\n                                    </tbody>\\n                                </table>\\n                                @else\\n                                <p class=\\\"text-gray-600\\\">Aucun ayant droit enregistré pour cette demande.</p>\\n                                @endif\\n \\n                    dd($ayantDroitData['cnib_path']);\\n\\n \\n                    dd($ayantDroitData);\\n\\n \\n?? null\\n \\n                    dd($ayantDroitData);\\n\\n \\n                    dd($ayantDroitData);\\n\\n \\n ?? null\\n \\n ?? null\\n \\n?? null\\n \\n            $table->bigIncrements('id'); // role id\\n\\n \\nprotected static function boot()\\n    {\\n        parent::boot();\\n\\n        static::creating(function ($model) {\\n            if (empty($model->id)) {\\n                $model->id = (string) Str::uuid(); /\\n            }\\n        });\\n    }\\n  \\n \\n/ Utilisez Str::orderedUuid() si nécessaire\\n \\n        // Générer automatiquement un UUID pour chaque nouvel enregistrement\\n\\n \\n// Désactiver l'incrémentation automatique\\n \\n/ Le type de la clé primair\\n \\n/ UUID pour la clé étrangère vers roles\\n \\n// UUID pour la clé étrangère vers users\\n \\n// Utilisation d'UUID\\n \\n                                            \\n\\n \\n<li><strong>Adresse :</strong> {{ $adherent->adresse }}</li>\\n                                        <li><strong>Téléphone :</strong> {{ $adherent->telephone }}</li>\\n                                        <li><strong>Email :</strong> {{ $adherent->email }}</li>\\n \\nieu_residence \\n \\n{{ $adherent->nip }}\\n \\nclass=\\\"main-container\\\"\\n \\n  <style>\\n        .main-container {\\n            display: flex;\\n            flex-direction: row;\\n            min-height: 100vh; /* Assurez-vous que la page prend toute la hauteur */\\n        }\\n    </style>\\n \\n                 <li><strong>Statut :</strong> Personnel en activité</li>\\n                                        <li><strong>Grade :</strong> {{ $adherent->grade }}</li>\\n \\n                                        <li><strong>Genre :</strong> {{ $adherent->genre }}</li>\\n\\n \\n    @endif\\n\\n \\n<div class=\\\"border p-2 rounded-lg mb-2 leading-none\\\">\\n                                <div class=\\\"text-center\\\">\\n                                    <p><strong>{{ $demande->statut == 'personnel_active' ? 'Personnel en activité' : 'Personnel retraité' }}</strong></p>\\n                                </div>\\n                                <div>\\n                                    <div>\\n                                        <p><strong>Grade :</strong> {{ $demande->grade }}</p>\\n                                    </div>\\n                \\n                                </div>\\n                                <div class=\\\"flex space-x-4\\\">\\n                                    <div class=\\\"flex-1 w-1/2 leading-none\\\">\\n                                        <div class=\\\"flex leading-none\\\">\\n                                            <div class=\\\"flex-shrink-0 leading-none\\\">\\n                                                <p class=\\\"mr-1 leading-none\\\"><strong>Date depart à la retraite :</strong></p>\\n                                                <p class=\\\"text-xs leading-none\\\"><small>(JJ/MM/AAAA)</small></p>\\n                                            </div>\\n                                            <div class=\\\"flex-1\\\">\\n                                                <p>{{ $demande->departARetraite }}</p>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                \\n                                    <div class=\\\"flex  w-1/2 leading-none\\\">\\n                                        <p><strong>N° CARFO :</strong> {{ $demande->numeroCARFO }}</p>\\n                                    </div>\\n                \\n                                </div>\\n                            </div>\\n \\n<li><strong>Nom et prénom (s) du père :</strong> {{ $adherent->nom_pere }}</li>\\n                                        <li><strong>Nom et prénom (s) de la mère :</strong> {{ $adherent->nom_mere }}</li>\\n \\n                                </tbody>\\n\\n \\n                                </tbody>\\n\\n \\n                                    @endforeach\\n\\n \\n                            <!-- Personnes à prévenir en cas de besoin -->\\n\\n \\nh-screen\\n \\n <!-- Deux colonnes côte à côte -->\\n                <div class=\\\"row mt-4\\\">\\n                    <!-- Première colonne -->\\n                    <div class=\\\"col-lg-6 col-12\\\">\\n                        <div class=\\\"main-sidebar\\\">\\n                            <!-- Widget Catégories -->\\n                            <div class=\\\"single-widget category\\\">\\n                                <h3 class=\\\"title\\\">Références</h3>\\n                                <ul class=\\\"categor-list\\\">\\n                              \\n                                    <li><strong>Matricule :</strong> {{ $adherent->matricule }}</li>\\n                                    <li><strong>NIP :</strong> {{ $adherent->nip }}</li>\\n                                    <li><strong>CNIB :</strong> {{ $adherent->cnib }}</li>\\n                                    <li><strong>Adresse :</strong> {{ $adherent->adresse }}</li>\\n                                    <li><strong>Téléphone :</strong> {{ $adherent->telephone }}</li>\\n                                    <li><strong>Email :</strong> {{ $adherent->email }}</li>\\n\\n                                </ul>\\n                            </div>\\n                            <!-- Widget Tags -->\\n                            <div class=\\\"single-widget category\\\">\\n                                <h3 class=\\\"title\\\">Informations personnelles</h3>\\n                                <ul class=\\\"categor-list\\\">\\n                                    <li><a href=\\\"#\\\">Men's Apparel</a></li>\\n                                    <li><a href=\\\"#\\\">Women's Apparel</a></li>\\n                                    <li><a href=\\\"#\\\">Bags Collection</a></li>\\n                                    <li><a href=\\\"#\\\">Accessories</a></li>\\n                                    <li><a href=\\\"#\\\">Sun Glasses</a></li>\\n                                </ul>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    \\n                    <!-- Deuxième colonne -->\\n                    <div class=\\\"col-lg-6 col-12\\\">\\n                        <div class=\\\"main-sidebar\\\">\\n                            <!-- Widget Catégories -->\\n                            <div class=\\\"single-widget side-tags\\\">\\n                                <h3 class=\\\"title\\\">Etat civil</h3>\\n                                <ul class=\\\"categor-list\\\">\\n                                    <li><strong>Nom :</strong> {{ $adherent->nom }}</li>\\n                                    <li><strong>Prénom (s) :</strong> {{ $adherent->prenom }}</li>\\n                                    <li><strong>Genre :</strong> {{ $adherent->genre == 'masculin' ? 'Masculin' : 'Féminin'  }}</li>\\n                                    <li><strong>Lieu de maissance :</strong> {{ $adherent->lieu_naissance  }}</li>\\n                                    <li><strong>Nom et prénom (s) du père :</strong> {{ $adherent->nom_pere }}</li>\\n                                    <li><strong>Nom et prénom (s) de la mère :</strong> {{ $adherent->nom_mere }}</li>\\n                                </ul>\\n                            </div>\\n                           \\n                            <!-- Widget Tags -->\\n                            <div class=\\\"single-widget side-tags\\\">\\n                                <h3 class=\\\"title\\\">Informations profesionnelles</h3>\\n                                <ul class=\\\"tag\\\">\\n                                    <li><a href=\\\"#\\\">business</a></li>\\n                                    <li><a href=\\\"#\\\">wordpress</a></li>\\n                                    <li><a href=\\\"#\\\">html</a></li>\\n                                    <li><a href=\\\"#\\\">multipurpose</a></li>\\n                                    <li><a href=\\\"#\\\">education</a></li>\\n                                    <li><a href=\\\"#\\\">template</a></li>\\n                                    <li><a href=\\\"#\\\">Ecommerce</a></li>\\n                                </ul>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n \\n_permanente\\n \\n{{ $demande->genre == 'masculin' ? 'Masculin' : 'Féminin' }}\\n \\n      <p><strong>Matricule :</strong> {{ $demande->matricule }}</p>\\n                                <p><strong>NIP :</strong> {{ $demande->nip }}</p>\\n                                <p><strong>CNIB :</strong> {{ $demande->cnib }}</p>\\n                                <p><strong>Adresse :</strong> {{ $demande->adresse_permanente }}</p>\\n                                <p><strong>Téléphone :</strong> {{ $demande->telephone }}</p>\\n                                <p><strong>Email :</strong> {{ $demande->email }}</p>\\n \\n        </div>\\n\\n \\n <div class=\\\" content\\\">\\n            <style>\\n                .content {\\n                    padding: 1rem;\\n                }\\n            </style>\\n \\ndiv><\\n \\n                        </div>\\n\\n \\nRôle ou Description\\n \\n<div class=\\\"single-widget recent-post\\\">\\n                                                <h3 class=\\\"title\\\">Recent post</h3>\\n                                                <!-- Single Post -->\\n                                                <div class=\\\"single-post\\\">\\n                                                    <div class=\\\"image\\\">\\n                                                        <img src=\\\"img/blog-sidebar1.jpg\\\" alt=\\\"#\\\">\\n                                                    </div>\\n                                                    <div class=\\\"content\\\">\\n                                                        <h5><a href=\\\"#\\\">We have annnocuced our new product.</a></h5>\\n                                                        <ul class=\\\"comment\\\">\\n                                                            <li><i class=\\\"fa fa-calendar\\\" aria-hidden=\\\"true\\\"></i>Jan 11, 2020</li>\\n                                                            <li><i class=\\\"fa fa-commenting-o\\\" aria-hidden=\\\"true\\\"></i>35</li>\\n                                                        </ul>\\n                                                    </div>\\n                                                </div>\\n                                                <!-- End Single Post -->\\n                                                <!-- Single Post -->\\n                                                <div class=\\\"single-post\\\">\\n                                                    <div class=\\\"image\\\">\\n                                                        <img src=\\\"img/blog-sidebar2.jpg\\\" alt=\\\"#\\\">\\n                                                    </div>\\n                                                    <div class=\\\"content\\\">\\n                                                        <h5><a href=\\\"#\\\">Top five way for solving teeth problems.</a></h5>\\n                                                        <ul class=\\\"comment\\\">\\n                                                            <li><i class=\\\"fa fa-calendar\\\" aria-hidden=\\\"true\\\"></i>Mar 05, 2019</li>\\n                                                            <li><i class=\\\"fa fa-commenting-o\\\" aria-hidden=\\\"true\\\"></i>59</li>\\n                                                        </ul>\\n                                                    </div>\\n                                                </div>\\n                                                <!-- End Single Post -->\\n                                                <!-- Single Post -->\\n                                                <div class=\\\"single-post\\\">\\n                                                    <div class=\\\"image\\\">\\n                                                        <img src=\\\"img/blog-sidebar3.jpg\\\" alt=\\\"#\\\">\\n                                                    </div>\\n                                                    <div class=\\\"content\\\">\\n                                                        <h5><a href=\\\"#\\\">We provide highly business soliutions.</a></h5>\\n                                                        <ul class=\\\"comment\\\">\\n                                                            <li><i class=\\\"fa fa-calendar\\\" aria-hidden=\\\"true\\\"></i>June 09, 2019</li>\\n                                                            <li><i class=\\\"fa fa-commenting-o\\\" aria-hidden=\\\"true\\\"></i>44</li>\\n                                                        </ul>\\n                                                    </div>\\n                                                </div>\\n                                                <!-- End Single Post -->\\n                                            </div>\\n                                            <!--/ End Single Widget -->\\n \\n<div class=\\\"col-lg-8 col-12\\\">\\n                                        <div class=\\\"row\\\">\\n                                            <div class=\\\"col-12\\\">\\n                                                <div class=\\\"single-main\\\">\\n                                                    <!-- News Head -->\\n                                                    <div class=\\\"news-head\\\">\\n                                                        <img src=\\\"img/blog1.jpg\\\" alt=\\\"#\\\">\\n                                                    </div>\\n                                                    <!-- News Title -->\\n                                                    <h1 class=\\\"news-title\\\"><a href=\\\"news-single.html\\\">More than 80 clinical trials launch to test of the coronavirus .</a></h1>\\n                                                    <!-- Meta -->\\n                                                    <div class=\\\"meta\\\">\\n                                                        <div class=\\\"meta-left\\\">\\n                                                            <span class=\\\"author\\\"><a href=\\\"#\\\"><img src=\\\"img/author1.jpg\\\" alt=\\\"#\\\">Naimur Rahman</a></span>\\n                                                            <span class=\\\"date\\\"><i class=\\\"fa fa-clock-o\\\"></i>03 Feb 2019</span>\\n                                                        </div>\\n                                                        <div class=\\\"meta-right\\\">\\n                                                            <span class=\\\"comments\\\"><a href=\\\"#\\\"><i class=\\\"fa fa-comments\\\"></i>05 Comments</a></span>\\n                                                            <span class=\\\"views\\\"><i class=\\\"fa fa-eye\\\"></i>33K Views</span>\\n                                                        </div>\\n                                                    </div>\\n                                                    <!-- News Text -->\\n                                                    <div class=\\\"news-text\\\">\\n                                                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse facilisis ultricies tortor, nec sollicitudin lorem sagittis vitae. Curabitur rhoncus commodo rutrum. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam nec lacus pulvinar, laoreet dolor quis, pellentesque ante. Cras nulla orci, pharetra at dictum consequat, pretium pretium nulla. Suspendisse porttitor nunc a sodales tempor. Mauris sed felis maximus, interdum metus vel, tincidunt diam.</p>\\n                                                        <p>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam nec lacus pulvinar, laoreet dolor quis, pellentesque ante. Cras nulla orci, pharetra at dictum consequat, pretium pretium nulla. Suspendisse porttitor nunc a sodales tempor. Mauris sed felis maximus, interdum metus vel, tincidunt diam. Nam ac risus vitae sem vehicula egestas. Sed velit nulla, viverra non commod</p>\\n                                                        <div class=\\\"image-gallery\\\">\\n                                                            <div class=\\\"row\\\">\\n                                                                <div class=\\\"col-lg-6 col-md-6 col-12\\\">\\n                                                                    <div class=\\\"single-image\\\">\\n                                                                        <img src=\\\"img/blog2.jpg\\\" alt=\\\"#\\\">\\n                                                                    </div>\\n                                                                </div>\\n                                                                <div class=\\\"col-lg-6 col-md-6 col-12\\\">\\n                                                                    <div class=\\\"single-image\\\">\\n                                                                        <img src=\\\"img/blog3.jpg\\\" alt=\\\"#\\\">\\n                                                                    </div>\\n                                                                </div>\\n                                                            </div>\\n                                                        </div>\\n                                                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse facilisis ultricies tortor, nec sollicitudin lorem sagittis vitae. Curabitur rhoncus commodo rutrum. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam nec lacus pulvinar, laoreet dolor quis, pellentesque ante. Cras nulla orci, pharetra at dictum consequat, pretium pretium nulla. Suspendisse porttitor nunc a sodales tempor. Mauris sed felis maximus, interdum metus vel, tincidunt diam.</p>\\n                                                        <blockquote class=\\\"overlay\\\">\\n                                                            <p>Aliquam nec lacus pulvinar, laoreet dolor quis, pellentesque ante. Cras nulla orci, pharetra at dictum consequat, pretium pretium nulla. Suspendisse porttitor nunc a sodales tempor. Mauris sed felis maximus, interdum metus vel, tincidunt diam. Nam ac risus vitae sem vehicula egestas. Sed velit nulla, viverra non commodo et, sodales</p>\\t\\t\\t\\t\\t\\n                                                        </blockquote>\\n                                                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse facilisis ultricies tortor, nec sollicitudin lorem sagittis vitae. Curabitur rhoncus commodo rutrum. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam nec lacus pulvinar, laoreet dolor quis, pellentesque ante. Cras nulla orci, pharetra at dictum consequat, pretium pretium nulla. Suspendisse porttitor nunc a sodales tempor. Mauris sed felis maximus, interdum metus vel, tincidunt diam. Nam ac risus vitae sem vehicula egestas. Sed velit nulla, viverra non commodo et, sodales id dui.</p>\\n                                                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse facilisis ultricies tortor, nec sollicitudin lorem sagittis vitae. Curabitur rhoncus commodo rutrum. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam nec lacus pulvinar, laoreet dolor quis, pellentesque ante. Cras nulla orci, pharetra at dictum consequat, pretium pretium nulla. Suspendisse</p>\\n                                                    </div>\\n                                                    <div class=\\\"blog-bottom\\\">\\n                                                        <!-- Social Share -->\\n                                                        <ul class=\\\"social-share\\\">\\n                                                            <li class=\\\"facebook\\\"><a href=\\\"#\\\"><i class=\\\"fa fa-facebook\\\"></i><span>Facebook</span></a></li>\\n                                                            <li class=\\\"twitter\\\"><a href=\\\"#\\\"><i class=\\\"fa fa-twitter\\\"></i><span>Twitter</span></a></li>\\n                                                            <li class=\\\"google-plus\\\"><a href=\\\"#\\\"><i class=\\\"fa fa-google-plus\\\"></i></a></li>\\n                                                            <li class=\\\"linkedin\\\"><a href=\\\"#\\\"><i class=\\\"fa fa-linkedin\\\"></i></a></li>\\n                                                            <li class=\\\"pinterest\\\"><a href=\\\"#\\\"><i class=\\\"fa fa-pinterest\\\"></i></a></li>\\n                                                        </ul>\\n                                                        <!-- Next Prev -->\\n                                                        <ul class=\\\"prev-next\\\">\\n                                                            <li class=\\\"prev\\\"><a href=\\\"#\\\"><i class=\\\"fa fa-angle-double-left\\\"></i></a></li>\\n                                                            <li class=\\\"next\\\"><a href=\\\"#\\\"><i class=\\\"fa fa-angle-double-right\\\"></i></a></li>\\n                                                        </ul>\\n                                                        <!--/ End Next Prev -->\\n                                                    </div>\\n                                                </div>\\n                                            </div>\\n                                            <div class=\\\"col-12\\\">\\n                                                <div class=\\\"blog-comments\\\">\\n                                                    <h2>All Comments</h2>\\n                                                    <div class=\\\"comments-body\\\">\\n                                                        <!-- Single Comments -->\\n                                                        <div class=\\\"single-comments\\\">\\n                                                            <div class=\\\"main\\\">\\n                                                                <div class=\\\"head\\\">\\n                                                                    <img src=\\\"img/author1.jpg\\\" alt=\\\"#\\\"/>\\n                                                                </div>\\n                                                                <div class=\\\"body\\\">\\n                                                                    <h4>Afsana Mimi</h4>\\n                                                                    <div class=\\\"comment-meta\\\"><span class=\\\"meta\\\"><i class=\\\"fa fa-calendar\\\"></i>March 05, 2019</span><span class=\\\"meta\\\"><i class=\\\"fa fa-clock-o\\\"></i>03:38 AM</span></div>\\n                                                                    <p>Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas</p>\\n                                                                    <a href=\\\"#\\\"><i class=\\\"fa fa-reply\\\"></i>replay</a>\\n                                                                </div>\\n                                                            </div>\\n                                                        </div>\\t\\t\\n                                                        <!--/ End Single Comments -->\\n                                                        <!-- Single Comments -->\\n                                                        <div class=\\\"single-comments left\\\">\\n                                                            <div class=\\\"main\\\">\\n                                                                <div class=\\\"head\\\">\\n                                                                    <img src=\\\"img/author2.jpg\\\" alt=\\\"#\\\"/>\\n                                                                </div>\\n                                                                <div class=\\\"body\\\">\\n                                                                    <h4>Naimur Rahman</h4>\\n                                                                    <div class=\\\"comment-meta\\\"><span class=\\\"meta\\\"><i class=\\\"fa fa-calendar\\\"></i>March 05, 2019</span><span class=\\\"meta\\\"><i class=\\\"fa fa-clock-o\\\"></i>03:38 AM</span></div>\\n                                                                    <p>Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas</p>\\n                                                                    <a href=\\\"#\\\"><i class=\\\"fa fa-reply\\\"></i>replay</a>\\n                                                                </div>\\n                                                            </div>\\n                                                        </div>\\t\\t\\n                                                        <!--/ End Single Comments -->\\n                                                        <!-- Single Comments -->\\n                                                        <div class=\\\"single-comments\\\">\\n                                                            <div class=\\\"main\\\">\\n                                                                <div class=\\\"head\\\">\\n                                                                    <img src=\\\"img/author3.jpg\\\" alt=\\\"#\\\"/>\\n                                                                </div>\\n                                                                <div class=\\\"body\\\">\\n                                                                    <h4>Suriya Molharta</h4>\\n                                                                    <div class=\\\"comment-meta\\\"><span class=\\\"meta\\\"><i class=\\\"fa fa-calendar\\\"></i>March 05, 2019</span><span class=\\\"meta\\\"><i class=\\\"fa fa-clock-o\\\"></i>03:38 AM</span></div>\\n                                                                    <p>Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas</p>\\n                                                                    <a href=\\\"#\\\"><i class=\\\"fa fa-reply\\\"></i>replay</a>\\n                                                                </div>\\n                                                            </div>\\n                                                        </div>\\t\\t\\n                                                        <!--/ End Single Comments -->\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n                                                    </div>\\n                                                </div>\\n                                            </div>\\n                                            \\n                                        </div>\\n                                    </div>\\n \\n<!-- Single Widget -->\\n                                            <div class=\\\"single-widget search\\\">\\n                                                <div class=\\\"form\\\">\\n                                                    <input type=\\\"email\\\" placeholder=\\\"Search Here...\\\">\\n                                                    <a class=\\\"button\\\" href=\\\"#\\\"><i class=\\\"fa fa-search\\\"></i></a>\\n                                                </div>\\n                                            </div>\\n                                            <!--/ End Single Widget -->\\n \\n<div class=\\\"col-12\\\">\\n                                                <div class=\\\"comments-form\\\">\\n                                                    <h2>Leave Comments</h2>\\n                                                    <!-- Contact Form -->\\n                                                    <form class=\\\"form\\\" method=\\\"post\\\" action=\\\"mail/mail.php\\\">\\n                                                        <div class=\\\"row\\\">\\n                                                            <div class=\\\"col-lg-4 col-md-4 col-12\\\">\\n                                                                <div class=\\\"form-group\\\">\\n                                                                    <i class=\\\"fa fa-user\\\"></i>\\n                                                                    <input type=\\\"text\\\" name=\\\"first-name\\\" placeholder=\\\"First name\\\" required=\\\"required\\\">\\n                                                                </div>\\n                                                            </div>\\n                                                            <div class=\\\"col-lg-4 col-md-4 col-12\\\">\\n                                                                <div class=\\\"form-group\\\">\\n                                                                    <i class=\\\"fa fa-envelope\\\"></i>\\n                                                                    <input type=\\\"text\\\" name=\\\"last-name\\\" placeholder=\\\"Last name\\\" required=\\\"required\\\">\\n                                                                </div>\\n                                                            </div>\\n                                                            <div class=\\\"col-lg-4 col-md-4 col-12\\\">\\n                                                                <div class=\\\"form-group\\\">\\n                                                                    <i class=\\\"fa fa-envelope\\\"></i>\\n                                                                    <input type=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"Your Email\\\" required=\\\"required\\\">\\n                                                                </div>\\n                                                            </div>\\n                                                            <div class=\\\"col-12\\\">\\n                                                                <div class=\\\"form-group message\\\">\\n                                                                    <i class=\\\"fa fa-pencil\\\"></i>\\n                                                                    <textarea name=\\\"message\\\" rows=\\\"7\\\" placeholder=\\\"Type Your Message Here\\\" ></textarea>\\n                                                                </div>\\n                                                            </div>\\n                                                            <div class=\\\"col-12\\\">\\n                                                                <div class=\\\"form-group button\\\">\\t\\n                                                                    <button type=\\\"submit\\\" class=\\\"btn primary\\\"><i class=\\\"fa fa-send\\\"></i>Submit Comment</button>\\n                                                                </div>\\n                                                            </div>\\n                                                        </div>\\n                                                    </form>\\n                                                    <!--/ End Contact Form -->\\n                                                </div>\\n                                            </div>\\n \\n<div class=\\\"absolute bottom-2 right-2 z-10 sm:bottom-4 sm:right-4\\\">\\n                                        <label \\n                                            for=\\\"cover\\\" \\n                                            class=\\\"flex cursor-pointer items-center justify-center gap-2 rounded bg-primary py-1 px-2 text-sm font-medium text-white hover:bg-opacity-90 sm:px-4\\\"\\n                                        >\\n                                            <input type=\\\"file\\\" name=\\\"cover\\\" id=\\\"cover\\\" class=\\\"sr-only\\\" />\\n                                            <span>Modifier</span>\\n                                        </label>\\n                                    </div>\\n \\nuser-90\\n \\n    <div class=\\\"overflow-hidden rounded-sm border border-stroke bg-white shadow-default dark:border-strokedark dark:bg-boxdark\\\">\\n                                    <!-- Couverture -->\\n                                    <div class=\\\"relative z-20 h-35 md:h-65\\\">\\n                                      <img\\n                                        src=\\\"/images/background1.jpg\\\"\\n                                        alt=\\\"profile cover\\\"\\n                                        class=\\\"h-full w-full rounded-tl-sm rounded-tr-sm object-cover object-center\\\"\\n                                      />\\n                                      <div class=\\\"absolute bottom-1 right-1 z-10 xsm:bottom-4 xsm:right-4\\\">\\n                                        <label\\n                                          for=\\\"cover\\\"\\n                                          class=\\\"flex cursor-pointer items-center justify-center gap-2 rounded bg-primary py-1 px-2 text-sm font-medium text-white hover:bg-opacity-90 xsm:px-4\\\"\\n                                        >\\n                                          <input type=\\\"file\\\" name=\\\"cover\\\" id=\\\"cover\\\" class=\\\"sr-only\\\" />\\n                                          <span>Modifier</span>\\n                                        </label>\\n                                      </div>\\n                                    </div>\\n                                  \\n                                    <!-- Profil -->\\n                                    <div class=\\\"px-4 pb-6 text-center lg:pb-8 xl:pb-11.5\\\">\\n                                      <div class=\\\"relative z-30 mx-auto -mt-22 h-30 w-full max-w-30 rounded-full bg-white/20 p-1 backdrop-blur sm:h-44 sm:max-w-44 sm:p-3\\\">\\n                                        <img src=\\\"/images/user-90.png\\\" alt=\\\"profile\\\" />\\n                                        <label\\n                                          for=\\\"profile\\\"\\n                                          class=\\\"absolute bottom-0 right-0 flex h-8.5 w-8.5 cursor-pointer items-center justify-center rounded-full bg-primary text-white hover:bg-opacity-90 sm:bottom-2 sm:right-2\\\"\\n                                        >\\n                                          <input type=\\\"file\\\" name=\\\"profile\\\" id=\\\"profile\\\" class=\\\"sr-only\\\" />\\n                                          <span>Modifier</span>\\n                                        </label>\\n                                      </div>\\n                                      <div class=\\\"mt-4\\\">\\n                                        <h3 class=\\\"mb-1.5 text-2xl font-semibold text-black dark:text-white\\\">Nom de l'utilisateur</h3>\\n                                        <p class=\\\"font-medium text-sm\\\">Rôle ou Description</p>\\n                                      </div>\\n                                    </div>\\n                                  </div>\\n \\n    <x-sidebar-guest/>\\n\\n \\n    <x-sidebar-guest />\\n\\n \\n    <x-sidebar-guest />\\n\\n \\n    <x-sidebar-guest/>\\n\\n \\n        <x-sidebar-guest/>\\n\\n \\n px-4\\n \\npx-4\\n \\n     <li>\\n                                                <a href=\\\"{{  route('adherents.ayantsdroits') }}\\\" class=\\\"@if(Request::is('adherents/ayantsdroits') || Request::is('adherents/ayantsdroits/*')) active @endif flex items-center p-2 text-gray-800 hover:bg-gray-700 hover:text-white rounded-md\\\">\\n                                                    <i class=\\\"fa fa-users mr-3\\\"></i>\\n                                                    <span>Mes ayants droits</span>\\n                                                </a>\\n                                            </li>\\n                                            <li>\\n\\n \\n<li>\\n                                                <a href=\\\"/\\\" class=\\\"flex items-center p-2 text-gray-800 hover:bg-gray-700 hover:text-white rounded-md\\\">\\n                                                    <i class=\\\"fa fa-user mr-3\\\"></i>\\n                                                    <span>Mon Profil</span>\\n                                                </a>\\n                                            </li>\\n                                    \\n                                            \\n                                            <li>\\n                                                <a href=\\\"{{ route('adherents.prestations') }}\\\" \\n                                                    class=\\\"@if(Request::is('adherents/prestations*')) active @endif flex items-center p-2 text-gray-800 hover:bg-gray-700 hover:text-white rounded-md transition-all duration-300\\\">\\n                                                    <i class=\\\"fa fa-file mr-3\\\"></i>\\n                                                    <span>Demande de remboursement</span>\\n                                                </a>\\n                                            </li>\\n \\ncontacts'\\n \\nous contacter\\n \\n                                        <ul class=\\\"space-y-2\\\">\\n                                            \\n                                            \\n                                            \\n                                            \\n                                        </ul>\\n \\n<!-- Header Area -->\\n    <header class=\\\"header header-sous\\\" >\\n        <style>\\n            .header-sous {\\n                z-index: 50;\\n                position: relative;\\n                top: 0px;\\n            }\\n        </style>\\n        <!-- Topbar -->\\n        <div class=\\\"topbar bg-white py-2 shadow-md\\\">\\n            <div class=\\\"container mx-auto flex flex-wrap items-center justify-between\\\">\\n                \\n                <!-- Logo -->\\n                <div class=\\\"flex items-center flex-shrink-0\\\">\\n                    <a href=\\\"/\\\">\\n                        <img src=\\\"{{ asset('images/logofinal.png') }}\\\" alt=\\\"Logo de la Mutuelle\\\" class=\\\"h-12 w-auto\\\">\\n                    </a>\\n                </div>\\n                \\n                <!-- Title and Slogan -->\\n                <div class=\\\"flex-grow text-center\\\">\\n                    <h1 class=\\\"text-lg lg:text-xl font-bold text-primary1 uppercase tracking-tight\\\">\\n                        Mutuelle de la Police\\n                    </h1>\\n                    <p class=\\\"text-xs lg:text-sm text-primary1\\\">\\n                        Tous solidaires pour notre bien-être !\\n                    </p>\\n                </div>\\n                \\n                <!-- Secondary Logo or CTA -->\\n                <div class=\\\"flex items-center justify-end flex-shrink-0\\\">\\n                    <a href=\\\"/\\\">\\n                        <img src=\\\"{{ asset('images/police_logo.jpg') }}\\\" alt=\\\"Logo de la Police\\\" class=\\\"h-12 w-auto\\\">\\n                    </a>\\n                </div>\\n                \\n            </div>\\n           \\n        </div>\\n        <!-- End Topbar -->\\n        \\n        <!-- Header Inner -->\\n        \\n        <div class=\\\" w-full bg-primary1\\\">\\n            <div class=\\\"container\\\">\\n                <div class=\\\"inner\\\">\\n                    <div class=\\\"row\\\">\\n                        \\n                        <div class=\\\"col-lg-7 col-md-9 col-12\\\">\\n                            \\n                            <!-- Main Menu -->\\n                            <div class=\\\"main-menu\\\">\\n                                <nav class=\\\"navigation\\\">\\n                                    <ul class=\\\"nav menu !text-white \\\">\\n                                        <li class=\\\"{{ request()->routeIs('accueil') ? 'active' : '' }}\\\">\\n                                            <a href=\\\"{{ route('accueil') }}\\\" >Accueil </a>\\n                                        </li>\\n                                        <li class=\\\"{{ request()->routeIs('en-construction') ? 'active' : '' }}\\\">\\n                                            <a href=\\\"{{ route('en-construction') }}\\\">À Propos</a>\\n                                        </li>\\n                                        <li class=\\\"{{ request()->routeIs('services') ? 'active' : '' }}\\\">\\n                                            <a href=\\\"{{ route('services') }}\\\">Nos Services</a>\\n                                        </li>\\n                                        <li class=\\\"{{ request()->routeIs('formulaire-adhesion') ? 'active' : '' }}\\\">\\n                                            <a href=\\\"{{ route('formulaire-adhesion') }}\\\">Adhérer maintenant</a>\\n                                        </li>\\n                                        <li class=\\\"{{ request()->routeIs('contacts') ? 'active' : '' }}\\\">\\n                                            <a href=\\\"{{ route('contacts') }}\\\">Nous contacter</a>\\n                                        </li>\\n                                    </ul>\\n                                </nav>\\n                            </div>\\n                            <!--/ End Main Menu -->\\n                        </div>\\n                        \\n                        <div class=\\\"col-lg-5 flex items-center justify-end my-1 col-12\\\">\\n                           \\n                            <div class=\\\"get-quote\\\">\\n\\n                                @if (!Auth::guard('adherent')->check() && !Auth::guard('partenaire')->check())\\n\\n                                    <a href=\\\"{{ route('adherent.login') }}\\\">\\n                                        <x-primary-button class=\\\" !bg-white !text-primary1 \\\" >\\n                                            <i class=\\\" fa fa-unlock-alt \\\"></i>\\n                                            Connexion\\n                                        </x-primary-button>    \\n                                    </a>\\n                                    {{-- <div class=\\\"relative inline-block text-left\\\">\\n                                        <x-primary-button class=\\\" inline-flex items-center !text-gray-700 bg-white hover:bg-gray-50 \\\" id=\\\"languageMenuButton\\\" aria-expanded=\\\"true\\\" aria-haspopup=\\\"true\\\">\\n                                            <span class=\\\"mr-2\\\">Langue</span>\\n                                            <svg class=\\\"-mr-1 ml-2 h-2 w-2\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\" aria-hidden=\\\"true\\\">\\n                                                <path fill-rule=\\\"evenodd\\\" d=\\\"M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.24a.75.75 0 01-1.06 0L5.23 8.27a.75.75 0 01.02-1.06z\\\" clip-rule=\\\"evenodd\\\" />\\n                                            </svg>\\n                                        </x-primary-button>\\n                                    \\n                                        <!-- Dropdown Menu -->\\n                                        <div class=\\\"origin-top-right absolute right-0 mt-2 w-40 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none hidden\\\" role=\\\"menu\\\" aria-orientation=\\\"vertical\\\" aria-labelledby=\\\"languageMenuButton\\\" id=\\\"dropdownMenu\\\">\\n                                            <div class=\\\"py-1\\\" role=\\\"none\\\">\\n                                                <!-- French Option -->\\n                                                <a href=\\\"?lang=fr\\\" class=\\\"flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900\\\" role=\\\"menuitem\\\">\\n                                                    <img src=\\\"{{ asset('images/flags/france.png') }}\\\" alt=\\\"Français\\\" class=\\\"w-5 h-5 mr-2\\\">\\n                                                    Français\\n                                                </a>\\n                                                <!-- English Option -->\\n                                                <a href=\\\"?lang=en\\\" class=\\\"flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900\\\" role=\\\"menuitem\\\">\\n                                                    <img src=\\\"{{ asset('images/flags/united-states.png') }}\\\" alt=\\\"English\\\" class=\\\"w-5 h-5 mr-2\\\">\\n                                                    English\\n                                                </a>\\n                                            </div>\\n                                        </div>\\n                                    </div>                             --}}\\n                                    @else\\n                                        @if (Auth::guard('adherent')->check())\\n                                            <!-- Formulaire de déconnexion pour adherent -->\\n                                            <form class=\\\"flex\\\" action=\\\"{{ route('adherent.logout') }}\\\" method=\\\"post\\\">\\n                                                @csrf\\n                                                <x-primary-button class=\\\"!bg-white !text-primary1\\\">\\n                                                    <i class=\\\"fa fa-unlock-alt\\\"></i>\\n                                                    Déconnexion\\n                                                </x-primary-button>\\n                                            </form>\\n                                        @elseif (Auth::guard('partenaire')->check())\\n                                            <!-- Formulaire de déconnexion pour partenaire -->\\n                                            <form class=\\\"flex\\\" action=\\\"{{ route('partenaire.logout') }}\\\" method=\\\"post\\\">\\n                                                @csrf\\n                                                <x-primary-button class=\\\"!bg-white !text-primary1\\\">\\n                                                    <i class=\\\"fa fa-unlock-alt\\\"></i>\\n                                                    Déconnexion\\n                                                </x-primary-button>\\n                                            </form>\\n                                        @endif\\n                                    @endif\\n                              \\n                                \\n                                {{-- <script>\\n                                    // Toggle dropdown visibility\\n                                    document.getElementById('languageMenuButton').addEventListener('click', function() {\\n                                        const dropdownMenu = document.getElementById('dropdownMenu');\\n                                        dropdownMenu.classList.toggle('hidden');\\n                                    });\\n                                </script> --}}\\n                                \\n                            </div>\\n                            <div class=\\\"\\\">\\n                                <!-- Mobile Nav -->\\n                                <div class=\\\"mobile-nav\\\"></div>\\n                                <!-- End Mobile Nav -->\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <!--/ End Header Inner -->\\n    </header>\\n<!-- End Header Area -->\\n \\n<!-- Header Area -->\\n    <header class=\\\"header header-sous\\\" >\\n        <style>\\n            .header-sous {\\n                z-index: 50;\\n                position: relative;\\n                top: 0px;\\n            }\\n        </style>\\n        <!-- Topbar -->\\n        <div class=\\\"topbar bg-white py-2 shadow-md\\\">\\n            <div class=\\\"container mx-auto flex flex-wrap items-center justify-between\\\">\\n                \\n                <!-- Logo -->\\n                <div class=\\\"flex items-center flex-shrink-0\\\">\\n                    <a href=\\\"/\\\">\\n                        <img src=\\\"{{ asset('images/logofinal.png') }}\\\" alt=\\\"Logo de la Mutuelle\\\" class=\\\"h-12 w-auto\\\">\\n                    </a>\\n                </div>\\n                \\n                <!-- Title and Slogan -->\\n                <div class=\\\"flex-grow text-center\\\">\\n                    <h1 class=\\\"text-lg lg:text-xl font-bold text-primary1 uppercase tracking-tight\\\">\\n                        Mutuelle de la Police\\n                    </h1>\\n                    <p class=\\\"text-xs lg:text-sm text-primary1\\\">\\n                        Tous solidaires pour notre bien-être !\\n                    </p>\\n                </div>\\n                \\n                <!-- Secondary Logo or CTA -->\\n                <div class=\\\"flex items-center justify-end flex-shrink-0\\\">\\n                    <a href=\\\"/\\\">\\n                        <img src=\\\"{{ asset('images/police_logo.jpg') }}\\\" alt=\\\"Logo de la Police\\\" class=\\\"h-12 w-auto\\\">\\n                    </a>\\n                </div>\\n                \\n            </div>\\n           \\n        </div>\\n        <!-- End Topbar -->\\n        \\n        <!-- Header Inner -->\\n        \\n        <div class=\\\" w-full bg-primary1\\\">\\n            <div class=\\\"container\\\">\\n                <div class=\\\"inner\\\">\\n                    <div class=\\\"row\\\">\\n                        \\n                        <div class=\\\"col-lg-7 col-md-9 col-12\\\">\\n                            \\n                            <!-- Main Menu -->\\n                            <div class=\\\"main-menu\\\">\\n                                <nav class=\\\"navigation\\\">\\n                                    <ul class=\\\"nav menu !text-white \\\">\\n                                        <li class=\\\"{{ request()->routeIs('accueil') ? 'active' : '' }}\\\">\\n                                            <a href=\\\"{{ route('accueil') }}\\\" >Accueil </a>\\n                                        </li>\\n                                        <li class=\\\"{{ request()->routeIs('en-construction') ? 'active' : '' }}\\\">\\n                                            <a href=\\\"{{ route('en-construction') }}\\\">À Propos</a>\\n                                        </li>\\n                                        <li class=\\\"{{ request()->routeIs('services') ? 'active' : '' }}\\\">\\n                                            <a href=\\\"{{ route('services') }}\\\">Nos Services</a>\\n                                        </li>\\n                                        <li class=\\\"{{ request()->routeIs('formulaire-adhesion') ? 'active' : '' }}\\\">\\n                                            <a href=\\\"{{ route('formulaire-adhesion') }}\\\">Adhérer maintenant</a>\\n                                        </li>\\n                                        <li class=\\\"{{ request()->routeIs('contacts') ? 'active' : '' }}\\\">\\n                                            <a href=\\\"{{ route('contacts') }}\\\">Nous contacter</a>\\n                                        </li>\\n                                    </ul>\\n                                </nav>\\n                            </div>\\n                            <!--/ End Main Menu -->\\n                        </div>\\n                        \\n                        <div class=\\\"col-lg-5 flex items-center justify-end my-1 col-12\\\">\\n                           \\n                            <div class=\\\"get-quote\\\">\\n\\n                                @if (!Auth::guard('adherent')->check() && !Auth::guard('partenaire')->check())\\n\\n                                    <a href=\\\"{{ route('adherent.login') }}\\\">\\n                                        <x-primary-button class=\\\" !bg-white !text-primary1 \\\" >\\n                                            <i class=\\\" fa fa-unlock-alt \\\"></i>\\n                                            Connexion\\n                                        </x-primary-button>    \\n                                    </a>\\n                                    {{-- <div class=\\\"relative inline-block text-left\\\">\\n                                        <x-primary-button class=\\\" inline-flex items-center !text-gray-700 bg-white hover:bg-gray-50 \\\" id=\\\"languageMenuButton\\\" aria-expanded=\\\"true\\\" aria-haspopup=\\\"true\\\">\\n                                            <span class=\\\"mr-2\\\">Langue</span>\\n                                            <svg class=\\\"-mr-1 ml-2 h-2 w-2\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\" aria-hidden=\\\"true\\\">\\n                                                <path fill-rule=\\\"evenodd\\\" d=\\\"M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.24a.75.75 0 01-1.06 0L5.23 8.27a.75.75 0 01.02-1.06z\\\" clip-rule=\\\"evenodd\\\" />\\n                                            </svg>\\n                                        </x-primary-button>\\n                                    \\n                                        <!-- Dropdown Menu -->\\n                                        <div class=\\\"origin-top-right absolute right-0 mt-2 w-40 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none hidden\\\" role=\\\"menu\\\" aria-orientation=\\\"vertical\\\" aria-labelledby=\\\"languageMenuButton\\\" id=\\\"dropdownMenu\\\">\\n                                            <div class=\\\"py-1\\\" role=\\\"none\\\">\\n                                                <!-- French Option -->\\n                                                <a href=\\\"?lang=fr\\\" class=\\\"flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900\\\" role=\\\"menuitem\\\">\\n                                                    <img src=\\\"{{ asset('images/flags/france.png') }}\\\" alt=\\\"Français\\\" class=\\\"w-5 h-5 mr-2\\\">\\n                                                    Français\\n                                                </a>\\n                                                <!-- English Option -->\\n                                                <a href=\\\"?lang=en\\\" class=\\\"flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900\\\" role=\\\"menuitem\\\">\\n                                                    <img src=\\\"{{ asset('images/flags/united-states.png') }}\\\" alt=\\\"English\\\" class=\\\"w-5 h-5 mr-2\\\">\\n                                                    English\\n                                                </a>\\n                                            </div>\\n                                        </div>\\n                                    </div>                             --}}\\n                                    @else\\n                                        @if (Auth::guard('adherent')->check())\\n                                            <!-- Formulaire de déconnexion pour adherent -->\\n                                            <form class=\\\"flex\\\" action=\\\"{{ route('adherent.logout') }}\\\" method=\\\"post\\\">\\n                                                @csrf\\n                                                <x-primary-button class=\\\"!bg-white !text-primary1\\\">\\n                                                    <i class=\\\"fa fa-unlock-alt\\\"></i>\\n                                                    Déconnexion\\n                                                </x-primary-button>\\n                                            </form>\\n                                        @elseif (Auth::guard('partenaire')->check())\\n                                            <!-- Formulaire de déconnexion pour partenaire -->\\n                                            <form class=\\\"flex\\\" action=\\\"{{ route('partenaire.logout') }}\\\" method=\\\"post\\\">\\n                                                @csrf\\n                                                <x-primary-button class=\\\"!bg-white !text-primary1\\\">\\n                                                    <i class=\\\"fa fa-unlock-alt\\\"></i>\\n                                                    Déconnexion\\n                                                </x-primary-button>\\n                                            </form>\\n                                        @endif\\n                                    @endif\\n                              \\n                                \\n                                {{-- <script>\\n                                    // Toggle dropdown visibility\\n                                    document.getElementById('languageMenuButton').addEventListener('click', function() {\\n                                        const dropdownMenu = document.getElementById('dropdownMenu');\\n                                        dropdownMenu.classList.toggle('hidden');\\n                                    });\\n                                </script> --}}\\n                                \\n                            </div>\\n                            <div class=\\\"\\\">\\n                                <!-- Mobile Nav -->\\n                                <div class=\\\"mobile-nav\\\"></div>\\n                                <!-- End Mobile Nav -->\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <!--/ End Header Inner -->\\n    </header>\\n<!-- End Header Area -->\\n \\n <li>\\n                    <form method=\\\"POST\\\" action=\\\"{{ route('adherent.logout') }}\\\" class=\\\"flex items-center p-2 text-red-500 hover:bg-red-700 hover:text-white rounded-md\\\">\\n                        @csrf\\n                        <button type=\\\"submit\\\" class=\\\"w-full text-left\\\">\\n                            <i class=\\\"fa  fa-sign-out mr-3\\\"></i>\\n\\n                            Déconnexion\\n                        </button>\\n                    </form>\\n                   \\n                </li>\\n \\n{{-- <li>\\n                    <a href=\\\"\\\" class=\\\"flex items-center p-2 text-gray-800 hover:bg-gray-700 hover:text-white rounded-md\\\">\\n                        <i class=\\\"fa fa-file-text mr-3\\\"></i>\\n                        <span>Ma Demande d'Adhésion</span>\\n                    </a>\\n                </li> --}}\\n \\n<li>\\n                    <a href=\\\"#\\\" \\n                        class=\\\"@if(Request::is('adhesion*')) active @endif flex items-center p-2 text-gray-800 hover:bg-gray-700 hover:text-white rounded-md transition-all duration-300\\\">\\n                        <i class=\\\"fa fa-file-text mr-3\\\"></i>\\n                        <span>Ma Demande d&apos;Adhésion</span>\\n                    </a>\\n                </li>\\n \\n<li>\\n                    <a href=\\\"\\\" class=\\\"flex items-center p-2 text-gray-800 hover:bg-gray-700 hover:text-white rounded-md\\\">\\n                        <i class=\\\"fa fa-cogs mr-3\\\"></i>\\n                        <span>Nos Services</span>\\n                    </a>\\n                </li>\\n \\n    public const HOME = '/dashboard';\\n\\n \\n    // Ajoutez d'autres routes pour l'administration ici\\n\\n \\n Route::middleware(['auth', 'verified'])->group(function () {\\n        Route::get('/admin/dashboard', [DashboardController::class, 'index'])->name('admin.dashboard');\\n    });\\n \\n    Route::get('/dashboard', [DashboardController::class, 'index'])->middleware(['auth', 'verified'])->name('dashboard');\\n\\n \\n         // Grouper les partenaires par type\\n\\n \\n        dd($demandeAdhesion);\\n\\n \\nstatus\\n \\n        $status = session('status');\\n\\n \\n// Utilisation de position avec padding\\n \\n_permanente\\n \\n        dd($demandeAdhesion);\\n\\n \\nemandeAdhesion->nombreAyantsDroits\\n \\n        // Vous pouvez aussi passer des données ou une vue spécifique\\n\\n \\n        return view('pages.frontend.adherents.final-demande-adhesion', compact( 'cotisations', 'demandeAdhesion'));\\n\\n \\n        'ordre',\\n\\n \\n, 255\\n \\n        dd($demandeAdhesion);\\n\\n \\n>matricule\\n \\n->nullable()\\n \\n if (!$adherent) {\\n \\n        $adherent = Adherent::where('matricule', $demandeAdhesion->matricule)->first();\\n\\n \\n            dd($adherent);\\n\\n \\n[\\n                \\n            ]\\n \\n            dd($demandeAdhesion->matricule);\\n\\n \\n                'matricule' => $demandeAdhesion->matricule, \\n\\n \\n                dd($demandeAdhesion->matricule);\\n\\n \\n->nullable\\n \\n->nullable()\\n \\n->nullable()\\n \\n            $table->string('ordre')->nullable();\\n\\n \\n  public function partenaires()\\n    {\\n        $partenaires = Partenaire::all();\\n        \\n        return view('pages.frontend.partenaires.liste-partenaires');\\n    }\\n \\n'demandeAdhesion' => $this->demandeAdhesion,\\n                'logoUrl' => asset('images/logo.png'), \\n                'generatedPassword' => $this->generatedPassword, \\n \\n with: [\\n              \\n\\n            ],\\n \\n  'demandeAdhesion' => $this->demandeAdhesion,\\n                'generatedPassword' => $this->generatedPassword, \\n \\n  with: [\\n              \\n\\n            ],\\n \\n  'demandeAdhesion' => $this->demandeAdhesion,\\n                'generatedPassword' => $this->generatedPassword, \\n \\n                'name' => $this->partenaire->nom,\\n\\n \\n // Ajout explicite de l'email\\n \\n// Ajout explicite de l'email\\n \\n        <p>Nous vous  pourez changer votre mot de passe dès votre première connexion.</p>\\n\\n \\nrecommandons\\n \\n        <p>Bonjour/ Bonsoir,</p>\\n\\n \\n        <h1>Bienvenue, {{ $name }}!</h1>\\n\\n \\n            // Gestion de l'upload de fichier\\n\\n \\n            // Validation des données\\n\\n \\n            // Génération et hashage du mot de passe\\n\\n \\n            // Création du partenaire\\n\\n \\n            // Envoi de l'email\\n\\n \\n            // Redirection avec message de succès\\n\\n \\n            // Redirection avec message d'erreur\\n\\n \\n            // Gestion des erreurs : suppression de la photo si nécessaire\\n\\n \\n$pdf,\\n \\nAdhesion\\n \\n            \\n\\n\\n \\n        <p>Nous vous informerons dès que votre demande sera traitée.</p>\\n\\n \\n        <p>Télécharger votre fiche de cession volontaire de salaire en pièce jointe en dessous..</p>\\n\\n \\nConfirmation de votre demande d&apos;adhésion\\n \\n    protected $pdf;\\n\\n \\n             ->attachData($this->pdf->output(), 'Fiche-cession-volontaire-de-salaire.pdf', [\\n                        'mime' => 'application/pdf',\\n        ])\\n \\n        ->attachData($this->pdf->output(), 'Fiche-cession-volontaire-de-salaire.pdf', [\\n                        'mime' => 'application/pdf',\\n        ]);\\n \\n->attachData($this->pdf->output(), 'Fiche-cession-volontaire-de-salaire.pdf', [\\n                        'mime' => 'application/pdf',\\n        ]);\\n    }\\n \\n ->attachData($this->pdf->output(), 'Fiche-cession-volontaire-de-salaire.pdf', [\\n                        'mime' => 'application/pdf',\\n \\n  return new Content(\\n            view: 'view.name',\\n        );\\n \\n            \\n \\n        $this->pdf = $pdf;\\n\\n \\n   public function __construct()\\n    {\\n        //\\n    }\\n\\n \\n$pdf, \\n \\n/ Ajoutez ce champ\\n \\n<<<<<<< Updated upstream\\n\\n \\n=======\\n>>>>>>> Stashed changes\\n \\n\\n        \\n\\n        return back()->withErrors([\\n            'email' => 'Les informations d\\\\'identification sont incorrectes.',\\n            'password' => 'Les informations d\\\\'identification sont incorrectes.',\\n        ]);\\n \\nif (Auth::guard('adherent')->attempt($request->only('email', 'password'))) {\\n            $request->session()->regenerate();\\n            $adherent = Auth::guard('adherent')->user();\\n            if ($adherent->must_change_password) {\\n                return redirect()->route('adherents.change-password');\\n            }\\n            $this->sendOtp($adherent);\\n            return redirect()->route('adherents.verify-otp');\\n        }\\n \\n        'must_change_password' => true,\\n\\n \\n123456789'\\n \\n\\n\\n \\nmust_change_password\\n \\nuse App\\\\Http\\\\Controllers\\\\Frontend\\\\RestrictionController;\\n\\n \\nuse App\\\\Http\\\\Controllers\\\\Frontend\\\\DemandeController;\\n\\n \\nuse App\\\\Http\\\\Controllers\\\\Frontend\\\\EstimationController;\\n\\n \\nuse App\\\\Http\\\\Controllers\\\\Frontend\\\\CategorieController;\\nuse App\\\\Http\\\\Controllers\\\\Frontend\\\\CotisationController;\\n \\nuse App\\\\Http\\\\Controllers\\\\Backend\\\\AccueilController;\\n\\n \\nuse App\\\\Http\\\\Controllers\\\\Backend\\\\ActeMedicalController;\\n\\n \\nuse App\\\\Http\\\\Controllers\\\\Auth\\\\AdherentAuthenticatedSessionController;\\nuse App\\\\Http\\\\Controllers\\\\Auth\\\\PartenaireAuthenticatedSessionController;\\n \\nuse App\\\\Livewire\\\\Counter;\\nuse App\\\\Models\\\\AyantDroit;\\n \\nuse App\\\\Models\\\\Partenaire;\\n\\n \\n\\n\\n    Route::get('/test-ayantsdroits/{id}/edit', function ($id) {\\n        $ayantDroit =  AyantDroit::find(3);\\n        return view('pages.ayantsdroits.edit', compact('ayantDroit'));\\n    });\\n    \\n    \\n\\n \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n \\nRoute::post('/logout/adherent', [AdherentAuthenticatedSessionController::class, 'destroy'])\\n    ->name('adherent.logout')\\n    ->middleware('auth:adherent');\\n \\nRoute::middleware('auth:adherent')->group(function () {\\n    Route::get('/adherents/change-password', [AdherentAuthenticatedSessionController::class, 'showChangePasswordForm'])->name('adherents.change-password');\\n    Route::post('/adherents/change-password', [AdherentAuthenticatedSessionController::class, 'updatePassword'])->name('adherents.update-password');\\n\\n    Route::get('/adherents/verify-otp', [AdherentAuthenticatedSessionController::class, 'showVerifyOtpForm'])->name('adherents.verify-otp');\\n    Route::post('/adherents/verify-otp', [AdherentAuthenticatedSessionController::class, 'verifyOtp']);\\n\\n\\n    Route::get('/adherents/dashboard', [AdherentAuthenticatedSessionController::class, 'dashboard'])\\n        ->name('adherents.dashboard');\\n\\n\\n    Route::get('/adherents/prestations', [PrestationController::class, 'prestations'])\\n        ->name('adherents.prestations');\\n\\n    Route::get('/adherents/ayantsdroits', [AyantDroitController::class, 'ayantsDroits'])\\n        ->name('adherents.ayantsdroits');\\n    \\n    Route::get('/adherents/ayantsdroits/nouveau', [AyantDroitController::class, 'newAyantDroitAdherent'])\\n        ->name('adherents.nouveau-ayantdroit');\\n    \\n    Route::post('/adherents/ayantsdroits/store', [AyantDroitController::class, 'storeAyantDroitAdherent'])\\n        ->name('adherents.nouveau-ayantdroit.store');\\n    Route::delete('/adherents/ayantsdroits/delete/{id}', [AyantDroitController::class, 'deleteAyantDroitAdherent'])\\n        ->name('adherents.delete-ayantdroit');\\n    \\n\\n    Route::get('/adherents/prestations/nouvelle', [PrestationController::class, 'newPrestationAdherent'])\\n        ->name('adherents.nouvelle-prestation');\\n\\n    Route::post('/adherents/prestations/store', [PrestationController::class, 'storePrestationAdherent'])\\n        ->name('adherents.nouvelle-prestation.store');\\n    \\n});\\n \\nRoute::get('/partenaires/dashboard', [PartenaireAuthenticatedSessionController::class, 'dashboard'])\\n    ->name('partenaires.dashboard');\\nRoute::get('/partenaires/prestations', [PrestationController::class, 'prestationsPartenaire'])\\n        ->name('partenaires.prestations');\\n\\nRoute::match(['get', 'post'], '/partenaires/prestations/nouvelle', [PrestationController::class, 'newPrestationPartenaire'])\\n        ->name('partenaires.nouvelle-prestation');\\n    \\n    \\nRoute::post('/partenaire/rechercher-adherent', [PartenaireController::class, 'searchAdherent'])->name('partenaire.searchAdherent');\\n\\nRoute::post('/partenaires/prestations/store', [PrestationController::class, 'storePrestationPartenaire'])\\n    ->name('partenaires.nouvelle-prestation.store');\\n \\nRoute::get('/login/adherent', [AdherentAuthenticatedSessionController::class, 'create'])->name('adherent.login');\\nRoute::post('/login/adherent', [AdherentAuthenticatedSessionController::class, 'store']);\\n\\n// Affichage du formulaire de connexion pour les partenaires\\n\\nRoute::get('/login/partenaire', [PartenaireAuthenticatedSessionController::class, 'create'])->name('partenaire.login');\\n\\nRoute::post('/login/partenaire', [PartenaireAuthenticatedSessionController::class, 'store']);\\nRoute::post('/logout/partenaire', [PartenaireAuthenticatedSessionController::class, 'destroy'])\\n    ->name('partenaire.logout')\\n    ->middleware('auth:partenaire');\\n \\n// Affichage du formulaire de connexion pour les partenaires\\n\\n \\n->middleware('auth:partenaire');\\n \\nRoute::get('/dashboard', [DashboardController::class, 'index'])->middleware(['auth', 'verified'])->name('dashboard');\\n\\n \\nRoute::middleware('auth')->group(function () {\\n    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');\\n    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');\\n    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');\\n    Route::post('/import-csv', [CsvImportController::class, 'import'])->name('import-csv');\\n    Route::post('/ayantdroits/import', [AyantDroitController::class, 'import'])->name('ayantdroits.import');\\n\\n    Route::get('/prestations/{id}/recu', action: [PrestationController::class, 'downloadReceipt'])->name('prestations.downloadReceipt');\\n    Route::get('/prestations/suivi', [PrestationController::class, 'suivi'])->name('suivi');\\n    Route::get('/consultation/suivi', [PrestationController::class, 'suiviConsultation'])->name('suivi-consultation');\\n    Route::get('/radio/suivi', [PrestationController::class, 'suiviRadio'])->name('suivi-radio');\\n    Route::get('/maternite/suivi', [PrestationController::class, 'suiviMaternite'])->name('suivi-maternite');\\n    Route::get('/allocation/suivi', [PrestationController::class, 'suiviAllocation'])->name('suivi-allocation');\\n    Route::get('/analyse-biomedicale/suivi', [PrestationController::class, 'suiviAnalyseBiomedicale'])->name('suivi-analyse-biomedicale');\\n    Route::get('/pharmacie/suivi', [PrestationController::class, 'suiviPharmacie'])->name('suivi-pharmacie');\\n    Route::get('/optique/suivi', [PrestationController::class, 'suiviOptique'])->name('suivi-optique');\\n    Route::get('/dentaire-auditif/suivi', [PrestationController::class, 'suiviDentaireAuditif'])->name('suivi-dentaire-auditif');\\n    Route::get('/autre/suivi', [PrestationController::class, 'suiviAutre'])->name('suivi-autre');\\n\\n    Route::get('/edit-demande-adhesion/{id}', App\\\\Livewire\\\\EditMembership::class)->name('edit-demande-adhesion');\\n\\n});\\n \\n\\n\\n\\n \\nRoute::post('/prestations/{id}/valider', [PrestationController::class, 'valider'])->name('prestations.valider');\\n    Route::post('/prestations/{id}/rejeter', [PrestationController::class, 'rejeter'])->name('prestations.rejeter');\\n    Route::post('/prestations/{id}/validerpaiement', [PrestationController::class, 'validerPaiement'])->name('prestations.validerpaiement');\\n \\nRoute::get('/counter', Counter::class);\\n\\n \\n    Route::get('/get-data', [CotisationController::class, 'getData']);\\n\\n \\n\\n    \\n\\n \\n\\n\\n    Route::get('/test-ayantsdroits/{id}/edit', function ($id) {\\n        $ayantDroit =  AyantDroit::find(3);\\n        return view('pages.ayantsdroits.edit', compact('ayantDroit'));\\n    });\\n \\n\\n    Route::get('recettes-categories', [RecetteController ::class, 'categories'])->name('recettes.categories');\\n\\n    Route::resource('depenses', DepenseController ::class);\\n    Route::get('depenses-categories', [DepenseController ::class, 'categories'])->name('depenses.categories');\\n    Route::resource('categories', CategorieController ::class);\\n\\n    Route::resource('caisse', CaisseController ::class);\\n\\n    Route::resource('budget-suivi', BudgetController ::class);\\n    Route::resource('estimations', EstimationeController ::class);\\n\\n\\n    //FIN COMPTABILITE\\n\\n \\n    Route::post('/adherents/{id}/accept', [DemandeController::class, 'accept'])->name('adherents.accept');\\n\\n \\n    Route::resource('recettes', RecetteController ::class);\\n\\n \\nRoute::resource('adherants', AdherantController::class);\\n    Route::resource('ayantsdroits', AyantDroitController::class);\\n    Route::resource('prestations', PrestationController::class);\\n    Route::resource('cotisations', CotisationController::class);\\n    Route::resource('parametres', ParametreController::class);\\n    Route::resource('roles', RoleController::class);\\n    Route::resource('users', UserController::class);\\n    Route::resource('partenaires', PartenaireController::class);\\n\\n    //DEBUT COMPTABILITE\\n    Route::resource('demandes', DemandeController ::class);\\n \\nRoute::resource('prestations', PrestationController::class);\\n\\n \\nRoute::resource('restrictions', RestrictionController::class);\\n\\n \\n\\n// Route::get('/', function () {\\n//     return redirect('/login');\\n// });\\n \\nRoute::get('/login/partenaire', [PartenaireAuthenticatedSessionController::class, 'create'])->name('partenaire.login');\\n\\nRoute::post('/login/partenaire', [PartenaireAuthenticatedSessionController::class, 'store']);\\nRoute::post('/logout/partenaire', [PartenaireAuthenticatedSessionController::class, 'destroy'])\\n    ->name('partenaire.logout')\\n    ->middleware('auth:partenaire');\\n \\n// Affichage du formulaire de connexion pour les partenaires\\n\\n \\nRoute::get('/login/adherent', [AdherantAuthenticatedSessionController::class, 'create'])->name('adherent.login');\\nRoute::post('/login/adherent', [AdherantAuthenticatedSessionController::class, 'store']);\\n \\n\\n// Route::get('/', function () {\\n//     return redirect('/login');\\n// });\\n \\nuse App\\\\Livewire\\\\Counter;\\n\\n \\nuse App\\\\Models\\\\AyantDroit;\\n\\n \\nuse App\\\\Http\\\\Controllers\\\\Frontend\\\\RoleController;\\nuse App\\\\Http\\\\Controllers\\\\Frontend\\\\UserController;\\n \\nuse App\\\\Http\\\\Controllers\\\\Frontend\\\\ProfileController;\\n \\nuse App\\\\Http\\\\Controllers\\\\Frontend\\\\CsvImportController;\\nuse App\\\\Http\\\\Controllers\\\\Frontend\\\\DashboardController;\\nuse App\\\\Http\\\\Controllers\\\\Frontend\\\\ParametreController;\\n \\nuse App\\\\Http\\\\Controllers\\\\Frontend\\\\BudgetController;\\n\\nuse App\\\\Http\\\\Controllers\\\\Frontend\\\\CaisseController;\\n \\nuse App\\\\Http\\\\Controllers\\\\Frontend\\\\DepenseController;\\nuse App\\\\Http\\\\Controllers\\\\Frontend\\\\EstimationeController;\\n \\nuse App\\\\Http\\\\Controllers\\\\Frontend\\\\RecetteController;\\n\\n \\nuse App\\\\Models\\\\Partenaire;\\n\\n \\nFrontend\\\\\\n \\nFrontend\\\\\\n \\n<?php\\n\\nuse App\\\\Http\\\\Controllers\\\\EstimationController;\\nuse App\\\\Livewire\\\\Counter;\\nuse App\\\\Models\\\\AyantDroit;\\nuse Illuminate\\\\Support\\\\Facades\\\\Route;\\nuse App\\\\Http\\\\Controllers\\\\RoleController;\\nuse App\\\\Http\\\\Controllers\\\\UserController;\\nuse App\\\\Http\\\\Controllers\\\\AccueilController;\\nuse App\\\\Http\\\\Controllers\\\\ProfileController;\\nuse App\\\\Http\\\\Controllers\\\\AdherentController;\\nuse App\\\\Http\\\\Controllers\\\\Auth\\\\AdherentAuthenticatedSessionController;\\nuse App\\\\Http\\\\Controllers\\\\Auth\\\\PartenaireAuthenticatedSessionController;\\nuse App\\\\Http\\\\Controllers\\\\CsvImportController;\\nuse App\\\\Http\\\\Controllers\\\\DashboardController;\\nuse App\\\\Http\\\\Controllers\\\\ParametreController;\\nuse App\\\\Http\\\\Controllers\\\\AyantDroitController;\\nuse App\\\\Http\\\\Controllers\\\\ActeMedicalController;\\nuse App\\\\Http\\\\Controllers\\\\BudgetController;\\n\\nuse App\\\\Http\\\\Controllers\\\\CaisseController;\\nuse App\\\\Http\\\\Controllers\\\\CategorieController;\\nuse App\\\\Http\\\\Controllers\\\\CotisationController;\\nuse App\\\\Http\\\\Controllers\\\\PrestationController;\\nuse App\\\\Http\\\\Controllers\\\\DemandeController;\\nuse App\\\\Http\\\\Controllers\\\\DepenseController;\\nuse App\\\\Http\\\\Controllers\\\\EstimationeController;\\nuse App\\\\Http\\\\Controllers\\\\PartenaireController;\\nuse App\\\\Http\\\\Controllers\\\\RecetteController;\\nuse App\\\\Http\\\\Controllers\\\\RestrictionController;\\nuse App\\\\Models\\\\Partenaire;\\n\\n/*\\n|--------------------------------------------------------------------------\\n| Web Routes\\n|--------------------------------------------------------------------------\\n|\\n| Here is where you can register web routes for your application. These\\n| routes are loaded by the RouteServiceProvider and all of them will\\n| be assigned to the \\\"web\\\" middleware group. Make something great!\\n|\\n*/\\n\\n// Route::get('/', function () {\\n//     return redirect('/login');\\n// });\\nRoute::get('/', [AccueilController::class, 'accueil'])->name(name: 'accueil');\\nRoute::get('/contacts', [AccueilController::class, 'contacts'])->name(name: 'contacts');\\nRoute::get('/services', [AccueilController::class, 'services'])->name(name: 'services');\\nRoute::get('/en-construction', [AccueilController::class, 'enConstruction'])->name(name: 'en-construction');\\nRoute::get('/partenaires/liste', [AccueilController::class, 'partenaires'])->name('liste-partenaires');\\n\\nRoute::get('/formulaire-adhesion', [AccueilController::class, 'newAdhesion'])->name(name: 'formulaire-adhesion');\\nRoute::get('/resume-adhesion/{id}', [AccueilController::class, 'resumeAdhesion'])->name('resume-adhesion');\\nRoute::get('/demande-adhesion/{id}/fiche-cession-volontaire', [AccueilController::class, 'downloadCessionFiche'])\\n    ->name('download-fiche-cession-volontaire');\\nRoute::get('download-form-adhesion/{id}', [AccueilController::class, 'downloadFormAdhesion'])->name('download-form-adhesion');\\nRoute::post('/recapitulatif-form', [AccueilController::class, 'recapitulatifForm'])->name('recapitulatif-form');\\nRoute::get('/formulaire-adhesion-recapitulatif', function () {\\n    return view('components.formulaire-adhesion'); \\n})->name('formulaire.adhesion.recapitulatif');\\nRoute::post('/finalisation-adhesion', [AccueilController::class, 'finalAdhesion'])->name('finalisation-adhesion');\\nRoute::get('/cession-volontaire/{id}', [AccueilController::class, 'showCessionVolontaire'])->name('showCessionVolontaire');\\nRoute::get('/impression-fiche-cession/{id}', [AccueilController::class, 'imprimerFicheCession'])->name('imprimer-fiche-cession');\\n\\nRoute::get('/login/adherent', [AdherentAuthenticatedSessionController::class, 'create'])->name('adherent.login');\\nRoute::post('/login/adherent', [AdherentAuthenticatedSessionController::class, 'store']);\\n\\n// Affichage du formulaire de connexion pour les partenaires\\n\\nRoute::get('/login/partenaire', [PartenaireAuthenticatedSessionController::class, 'create'])->name('partenaire.login');\\n\\nRoute::post('/login/partenaire', [PartenaireAuthenticatedSessionController::class, 'store']);\\nRoute::post('/logout/partenaire', [PartenaireAuthenticatedSessionController::class, 'destroy'])\\n    ->name('partenaire.logout')\\n    ->middleware('auth:partenaire');\\n\\nRoute::get('/partenaires/dashboard', [PartenaireAuthenticatedSessionController::class, 'dashboard'])\\n    ->name('partenaires.dashboard');\\nRoute::get('/partenaires/prestations', [PrestationController::class, 'prestationsPartenaire'])\\n        ->name('partenaires.prestations');\\n\\nRoute::match(['get', 'post'], '/partenaires/prestations/nouvelle', [PrestationController::class, 'newPrestationPartenaire'])\\n        ->name('partenaires.nouvelle-prestation');\\n    \\n    \\nRoute::post('/partenaire/rechercher-adherent', [PartenaireController::class, 'searchAdherent'])->name('partenaire.searchAdherent');\\n\\nRoute::post('/partenaires/prestations/store', [PrestationController::class, 'storePrestationPartenaire'])\\n    ->name('partenaires.nouvelle-prestation.store');\\nRoute::resource('restrictions', RestrictionController::class);\\n\\nRoute::middleware('auth:adherent')->group(function () {\\n    Route::get('/adherents/change-password', [AdherentAuthenticatedSessionController::class, 'showChangePasswordForm'])->name('adherents.change-password');\\n    Route::post('/adherents/change-password', [AdherentAuthenticatedSessionController::class, 'updatePassword'])->name('adherents.update-password');\\n\\n    Route::get('/adherents/verify-otp', [AdherentAuthenticatedSessionController::class, 'showVerifyOtpForm'])->name('adherents.verify-otp');\\n    Route::post('/adherents/verify-otp', [AdherentAuthenticatedSessionController::class, 'verifyOtp']);\\n\\n\\n    Route::get('/adherents/dashboard', [AdherentAuthenticatedSessionController::class, 'dashboard'])\\n        ->name('adherents.dashboard');\\n\\n\\n    Route::get('/adherents/prestations', [PrestationController::class, 'prestations'])\\n        ->name('adherents.prestations');\\n\\n    Route::get('/adherents/ayantsdroits', [AyantDroitController::class, 'ayantsDroits'])\\n        ->name('adherents.ayantsdroits');\\n    \\n    Route::get('/adherents/ayantsdroits/nouveau', [AyantDroitController::class, 'newAyantDroitAdherent'])\\n        ->name('adherents.nouveau-ayantdroit');\\n    \\n    Route::post('/adherents/ayantsdroits/store', [AyantDroitController::class, 'storeAyantDroitAdherent'])\\n        ->name('adherents.nouveau-ayantdroit.store');\\n    Route::delete('/adherents/ayantsdroits/delete/{id}', [AyantDroitController::class, 'deleteAyantDroitAdherent'])\\n        ->name('adherents.delete-ayantdroit');\\n    \\n\\n    Route::get('/adherents/prestations/nouvelle', [PrestationController::class, 'newPrestationAdherent'])\\n        ->name('adherents.nouvelle-prestation');\\n\\n    Route::post('/adherents/prestations/store', [PrestationController::class, 'storePrestationAdherent'])\\n        ->name('adherents.nouvelle-prestation.store');\\n    \\n});\\nRoute::resource('prestations', PrestationController::class);\\n\\n\\nRoute::post('/logout/adherent', [AdherentAuthenticatedSessionController::class, 'destroy'])\\n    ->name('adherent.logout')\\n    ->middleware('auth:adherent');\\n\\nRoute::get('/dashboard', [DashboardController::class, 'index'])->middleware(['auth', 'verified'])->name('dashboard');\\n\\n\\nRoute::get('/counter', Counter::class);\\n\\n\\n\\n\\nRoute::middleware('auth')->group(function () {\\n    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');\\n    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');\\n    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');\\n    Route::post('/import-csv', [CsvImportController::class, 'import'])->name('import-csv');\\n    Route::post('/ayantdroits/import', [AyantDroitController::class, 'import'])->name('ayantdroits.import');\\n\\n    Route::get('/prestations/{id}/recu', action: [PrestationController::class, 'downloadReceipt'])->name('prestations.downloadReceipt');\\n    Route::get('/prestations/suivi', [PrestationController::class, 'suivi'])->name('suivi');\\n    Route::get('/consultation/suivi', [PrestationController::class, 'suiviConsultation'])->name('suivi-consultation');\\n    Route::get('/radio/suivi', [PrestationController::class, 'suiviRadio'])->name('suivi-radio');\\n    Route::get('/maternite/suivi', [PrestationController::class, 'suiviMaternite'])->name('suivi-maternite');\\n    Route::get('/allocation/suivi', [PrestationController::class, 'suiviAllocation'])->name('suivi-allocation');\\n    Route::get('/analyse-biomedicale/suivi', [PrestationController::class, 'suiviAnalyseBiomedicale'])->name('suivi-analyse-biomedicale');\\n    Route::get('/pharmacie/suivi', [PrestationController::class, 'suiviPharmacie'])->name('suivi-pharmacie');\\n    Route::get('/optique/suivi', [PrestationController::class, 'suiviOptique'])->name('suivi-optique');\\n    Route::get('/dentaire-auditif/suivi', [PrestationController::class, 'suiviDentaireAuditif'])->name('suivi-dentaire-auditif');\\n    Route::get('/autre/suivi', [PrestationController::class, 'suiviAutre'])->name('suivi-autre');\\n\\n\\n    Route::resource('adherents', AdherentController::class);\\n    Route::resource('ayantsdroits', AyantDroitController::class);\\n    Route::resource('prestations', PrestationController::class);\\n    Route::resource('cotisations', CotisationController::class);\\n    Route::resource('parametres', ParametreController::class);\\n    Route::resource('roles', RoleController::class);\\n    Route::resource('users', UserController::class);\\n    Route::resource('partenaires', PartenaireController::class);\\n\\n    //DEBUT COMPTABILITE\\n    Route::resource('demandes', DemandeController ::class);\\n    Route::post('/adherents/{id}/accept', [DemandeController::class, 'accept'])->name('adherents.accept');\\n\\n    Route::resource('recettes', RecetteController ::class);\\n    Route::get('recettes-categories', [RecetteController ::class, 'categories'])->name('recettes.categories');\\n\\n    Route::resource('depenses', DepenseController ::class);\\n    Route::get('depenses-categories', [DepenseController ::class, 'categories'])->name('depenses.categories');\\n    Route::resource('categories', CategorieController ::class);\\n\\n    Route::resource('caisse', CaisseController ::class);\\n\\n    Route::resource('budget-suivi', BudgetController ::class);\\n    Route::resource('estimations', EstimationeController ::class);\\n\\n\\n    //FIN COMPTABILITE\\n\\n\\n    Route::get('/edit-demande-adhesion/{id}', App\\\\Livewire\\\\EditMembership::class)->name('edit-demande-adhesion');\\n\\n\\n    Route::get('/test-ayantsdroits/{id}/edit', function ($id) {\\n        $ayantDroit =  AyantDroit::find(3);\\n        return view('pages.ayantsdroits.edit', compact('ayantDroit'));\\n    });\\n    \\n    \\n\\n    Route::get('/get-data', [CotisationController::class, 'getData']);\\n\\n    Route::post('/prestations/{id}/valider', [PrestationController::class, 'valider'])->name('prestations.valider');\\n    Route::post('/prestations/{id}/rejeter', [PrestationController::class, 'rejeter'])->name('prestations.rejeter');\\n    Route::post('/prestations/{id}/validerpaiement', [PrestationController::class, 'validerPaiement'])->name('prestations.validerpaiement');\\n});\\n\\nrequire __DIR__.'/auth.php';\\n\\n \\nRoute::get('/counter', Counter::class);\\n \\nRoute::post('/finalisation-adhesion', [AccueilController::class, 'finalAdhesion'])->name('finalisation-adhesion');\\nRoute::get('/cession-volontaire/{id}', [AccueilController::class, 'showCessionVolontaire'])->name('showCessionVolontaire');\\nRoute::get('/impression-fiche-cession/{id}', [AccueilController::class, 'imprimerFicheCession'])->name('imprimer-fiche-cession');\\n \\n// Route::get('/', function () {\\n//     return redirect('/login');\\n// });\\nRoute::get('/', [AccueilController::class, 'accueil'])->name(name: 'accueil');\\nRoute::get('/contacts', [AccueilController::class, 'contacts'])->name(name: 'contacts');\\nRoute::get('/services', [AccueilController::class, 'services'])->name(name: 'services');\\nRoute::get('/en-construction', [AccueilController::class, 'enConstruction'])->name(name: 'en-construction');\\nRoute::get('/partenaires/liste', [AccueilController::class, 'partenaires'])->name('liste-partenaires');\\n\\nRoute::get('/formulaire-adhesion', [AccueilController::class, 'newAdhesion'])->name(name: 'formulaire-adhesion');\\nRoute::get('/resume-adhesion/{id}', [AccueilController::class, 'resumeAdhesion'])->name('resume-adhesion');\\nRoute::get('/demande-adhesion/{id}/fiche-cession-volontaire', [AccueilController::class, 'downloadCessionFiche'])\\n    ->name('download-fiche-cession-volontaire');\\nRoute::get('download-form-adhesion/{id}', [AccueilController::class, 'downloadFormAdhesion'])->name('download-form-adhesion');\\nRoute::post('/recapitulatif-form', [AccueilController::class, 'recapitulatifForm'])->name('recapitulatif-form');\\nRoute::get('/formulaire-adhesion-recapitulatif', function () {\\n    return view('components.formulaire-adhesion'); \\n})->name('formulaire.adhesion.recapitulatif');\\n \\n/ Chemin du fichier de routes admin\\n \\n// Préfixe pour toutes les routes admin\\n \\n// Utilise les middlewares \\\"web\\\" pour les sessions, CSRF, etc.\\n \\nuse App\\\\Models\\\\Adherent;\\n \\nuse Illuminate\\\\Http\\\\Request;\\nuse Illuminate\\\\Support\\\\Facades\\\\DB;\\nuse Exception;\\nuse Illuminate\\\\Support\\\\Facades\\\\Log;\\n \\nuse App\\\\Models\\\\Categorie;\\nuse App\\\\Models\\\\Depense;\\nuse Illuminate\\\\Support\\\\Facades\\\\Auth;\\nuse Dompdf\\\\Dompdf;\\nuse Dompdf\\\\Options;\\nuse Carbon\\\\Carbon;\\n \\nuse App\\\\Helpers\\\\ImageHelper;\\nuse App\\\\Helpers\\\\PDFHelper;\\n \\nnamespace App\\\\Http\\\\Controllers;\\n\\n \\nnamespace App\\\\Http\\\\Controllers;\\n\\n \\n\\n\\n   \\n    \\n \\n    // Backend\\n\\n \\n // Frontend\\n\\n    public function ayantsDroits()\\n    {\\n        $adherent = auth()->guard('adherent')->user();\\n        $ayantsDroits = AyantDroit::where('adherent_id', $adherent->id)->get();\\n        return  view('pages.frontend.adherents.ayantsdroits.index',\\n                compact('adherent', 'ayantsDroits')\\n        );\\n\\n    }\\n    public function newAyantDroitAdherent()\\n    {\\n        $adherent = auth()->guard('adherent')->user();\\n        $adherent->ayantsDroits = json_decode($adherent->ayantsDroits, true); \\n\\n        $ayantsDroits = $adherent->ayantsDroits;\\n        return  view('pages.frontend.adherents.ayantsdroits.create',\\n                compact('adherent', 'ayantsDroits')\\n        );\\n\\n    }\\n    public function storeAyantDroitAdherent(StoreAyantDroitRequest $request)\\n    {\\n        $adherent = auth()->guard('adherent')->user();\\n        $nextPosition = AyantDroit::where('adherent_id', $adherent->id)->max('position') + 1;\\n        if ($nextPosition > 6) {\\n            return back()->withErrors(['message' => 'You cannot add more than 7 dependents.']);\\n        }\\n        $adherent->ayantsDroits = json_decode($adherent->ayantsDroits, true); \\n\\n        $ayantsDroits = $adherent->ayantsDroits;\\n\\n\\n        $ayantDroit = new AyantDroit();\\n        $ayantDroit->nom = $request->nom;\\n        $ayantDroit->prenom = $request->prenom;\\n        $ayantDroit->sexe = $request->sexe;\\n        $ayantDroit->date_naissance = $request->date_naissance;\\n        $ayantDroit->relation = $request->relation;\\n        $ayantDroit->code = $adherent->matricule . '/01';\\n        $ayantDroit->adherent_id = $adherent->id;\\n        $ayantDroit->position = $nextPosition;\\n\\n        $ayantDroit->save();\\n        return redirect()->route('adherents.ayantsdroits')->with('success', 'Ayant droit ajouté avec succès.');\\n        \\n\\n    }\\n    public function deleteAyantDroitAdherent($id)\\n    {\\n        \\n        $ayantDroit = AyantDroit::find($id);\\n\\n        if ($ayantDroit) {\\n            $ayantDroit->delete();\\n            return redirect()->back()->with('success', 'Ayant droit supprimé avec succès.');\\n        }\\n\\n        return redirect()->back()->with('error', 'Ayant droit non trouvé.');\\n    }\\n   \\n    \\n\\n    // Backend\\n \\n\\n\\n \\n   public function searchAdherent(Request $request)\\n    {\\n        $validated = $request->validate([\\n            'code_carte' => 'required|string',\\n        ]);\\n\\n        $adherent = Adherent::where('code_carte', $validated['code_carte'])->first();\\n        $adherent->ayantsDroits = json_decode($adherent->ayantsDroits, true); \\n\\n        if ($adherent) {\\n            return view('pages.frontend.partenaires.prestations.create', compact('adherent'));\\n        } else {\\n            $message = 'Aucun adhérent trouvé avec ce code carte.';\\n            return view('pages.frontend.partenaires.prestations.create', compact('message'));\\n        }\\n    }\\n \\n        \\n \\n \\n\\n       \\n \\nuse App\\\\Helpers\\\\ImageHelper;\\n\\n \\nuse Ramsey\\\\Uuid\\\\Uuid;\\n\\n \\nuse Illuminate\\\\Support\\\\Facades\\\\Log;\\n\\n \\nuse Illuminate\\\\Support\\\\Facades\\\\DB;\\n\\n \\nuse Dompdf\\\\Dompdf;\\nuse Dompdf\\\\Options;\\n \\n // Frontend\\n\\n    public function prestations()\\n    {\\n        $adherent = auth()->guard('adherent')->user();\\n        \\n        $prestations = $adherent->prestations;\\n        return  view('pages.frontend.adherents.prestations.index',\\n                compact('adherent', 'prestations')\\n        );\\n    }\\n\\n    public function prestationsPartenaire()\\n    {\\n        $partenaire = auth()->guard('partenaire')->user();\\n        $prestations = $partenaire->prestations;\\n        return  view('pages.frontend.partenaires.prestations.index',\\n                compact('partenaire', 'prestations')\\n        );\\n    }\\n   \\n    \\n\\n    public function newPrestationAdherent()\\n    {\\n        $adherent = auth()->guard('adherent')->user();\\n        $adherent->ayantsDroits = AyantDroit::where('adherent_id', $adherent->id)->get();\\n\\n    \\n        return view('pages.frontend.partenaires.prestations.create', compact('adherent'));\\n    }\\n    public function newPrestationPartenaire()\\n    {\\n        $partenaire = auth()->guard('partenaire')->user();\\n        \\n    \\n        return view('pages.frontend.partenaires.prestations.create', compact('partenaire'));\\n    }\\n    public function storePrestationAdherent(StorePrestationRequest $request)\\n    {\\n        $data = $request->all();\\n        $adherentCode = $request->adherentCode;\\n        $totalMontant = Prestation::where('adherentCode', $adherentCode)->sum('montant');\\n        $types = ['consultation', 'hospitalisation', 'radio', 'maternite', 'allocation', 'analyse_biomedicale', 'pharmacie', 'optique', 'dentaire_auditif', 'autre'];\\n        $prestationsToSave = [];\\n\\n        foreach ($types as $type) {\\n          \\n            for ($i = 0; $i <= 20; $i++) { \\n                $typeSuffix = $i > 0 ? \\\"-$i\\\" : ''; \\n                if (!empty($data[\\\"date_$type$typeSuffix\\\"]) && !empty($data[\\\"centre_$type$typeSuffix\\\"]) && !empty($data[\\\"montant_$type$typeSuffix\\\"])) {\\n\\n                    $prestationsToSave[] = [\\n                        'adherentCode' => $data['adherentCode'],\\n                        'adherentNom' => $data['adherentNom'],\\n                        'adherentPrenom' => $data['adherentPrenom'],\\n                        'adherentSexe' => $data['adherentSexe'],\\n                        'beneficiaire' => $data['beneficiaire'],\\n                        'idPrestation' => Uuid::uuid4()->toString(),\\n                        'contactPrestation' => $data['contactPrestation'],\\n                        'acte' => $data[\\\"acte$typeSuffix\\\"],\\n                        'date' => $data[\\\"date_$type$typeSuffix\\\"],\\n                        'centre' => $data[\\\"centre_$type$typeSuffix\\\"],\\n                        'montant' => $data[\\\"montant_$type$typeSuffix\\\"],\\n                        'type' => $data[\\\"type_$type$typeSuffix\\\"] ?? null,\\n                        'sous_type' => $data[\\\"sous_type_$type$typeSuffix\\\"] ?? null,\\n                        'validite' => 'en attente',\\n                        'etat_paiement' => false,\\n                    ];\\n                }\\n            }\\n        }\\n\\n        if (empty($prestationsToSave)) {\\n            return back()->withErrors(['message' => 'Veuillez remplir tous les champs obligatoires pour chaque prestation visible.']);\\n        }\\n        \\n\\n        foreach ($prestationsToSave as $prestationData) {\\n            $montant = $prestationData['montant'];\\n            if ($totalMontant + $montant > 1500000) {\\n                return back()->withErrors(['error' => 'Erreur : La somme totale des prestations de cet adhérent dépasse 1 500 000.']);\\n            }\\n\\n            $prestation = new Prestation($prestationData);\\n            \\n            // if ($request->hasFile('preuve')) {\\n            //     foreach ($request->file('preuve') as $file) {\\n            //         $path = $file->store('preuves', 'public'); \\n            //         $prestation->preuve = json_encode([$path]); \\n            //     }\\n            // }\\n            if ($request->hasFile('preuve')) {\\n                $files = [];\\n                foreach ($request->file('preuve') as $file) {\\n                    $path = $file->store('preuves', 'public');\\n                    $files[] = $path; \\n                }\\n                $prestation->preuve = json_encode($files); \\n            }\\n            \\n\\n            $prestation->save(); \\n        }\\n\\n        $adherent = auth()->guard('adherent')->user();\\n        \\n        $adherent->ayantsDroits = json_decode($adherent->ayantsDroits, true); \\n\\n    \\n        // Vérifiez ce que contient $ayantsDroits\\n        return redirect()->route('adherents.prestations')->with('success', 'Enregistrement réussi');\\n\\n    }\\n    \\n\\n    // Backend\\n \\nuse App\\\\Http\\\\Controllers\\\\PartenaireController;\\n\\n \\n        return view('pages.frontend.partenaires.restrictions.index');\\n\\n \\n        // Vérifiez ce que contient $ayantsDroits\\n\\n \\n\\n    public function suiviDentaireAuditif(Request $request)\\n    {\\n\\n        $currentYear = $request->input('year', Carbon::now()->year);\\n        $adherentCodes = Adherent::pluck('code_carte')->toArray();\\n        $prestationsAdherents = Prestation::join('adherents', 'prestations.adherentCode', '=', 'adherents.code_carte')\\n            ->whereYear('prestations.created_at', $currentYear)\\n            ->select('prestations.*', 'adherents.id as adherent_id')\\n            ->get();\\n\\n        $prestationsAyantsDroit = Prestation::join('ayant_droits', 'prestations.adherentCode', '=', 'ayant_droits.code')\\n            ->join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('prestations.created_at', $currentYear)\\n            ->select('prestations.*', 'adherents.id as adherent_id')\\n            ->distinct()\\n            ->get();\\n\\n        \\n\\n        $prestationsAll = $prestationsAdherents->merge($prestationsAyantsDroit);\\n\\n\\n        $prestationsGroupedByAdherent = $prestationsAll->groupBy('adherent_id');\\n\\n        $adherents = Adherent::whereYear('date_enregistrement', $currentYear)->get();\\n        $ayantsDroit = AyantDroit::join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('adherents.date_enregistrement', $currentYear)\\n            ->select('ayant_droits.*')\\n            ->get();\\n        $prestations = Prestation::whereYear('created_at', $currentYear)->get();\\n        $categories = [\\n            'Nombre de nouveaux bénéficiaires',\\n            'Nombre de bénéficiaires (A)',\\n            'Nombre moyen de bénéficiaire (A1)',\\n            'Nombre de dentaires et auditifs (B)',\\n            'Nombre de dentaires et auditifs Cumulée (B1)',\\n            'Taux d’utilisation mensuel % C (C)',\\n            'Taux d’utilisation cumulée %(D)',\\n            'Coût total des dentaires et auditifs (E)',\\n            'Coût Cumulé total des dentaires et auditifs (E1)',\\n            'Coût moyen mensuel d’une dentaire et auditif (F)',\\n            'Coût moyen cumulé d’une dentaire et auditif (G)'\\n        ];\\n\\n        $months = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];\\n\\n        $data = [];\\n        $dentairesAuditifsCumulative = 0;\\n        $coutCumulative = 0;\\n        $beneficiairesCumulative = 0;\\n        $totalCoutCumulative = 0;\\n\\n        foreach ($categories as $category) {\\n            foreach ($months as $month) {\\n                $data[$category][$month] = 0;\\n            }\\n            $data[$category]['Total'] = 0;\\n            $data[$category]['Moyenne'] = 0;\\n            $data[$category]['Référence'] = '';\\n        }\\n\\n        // Nombre de bénéficiaires (adhérents + ayants droit)\\n        foreach ($adherents as $adherent) {\\n            $date = Carbon::parse($adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        foreach ($ayantsDroit as $ayantDroit) {\\n            $date = Carbon::parse($ayantDroit->adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre de bénéficiaires (A) par mois\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        // Calcul du cumul des bénéficiaires pour chaque mois\\n        foreach ($months as $index => $month) {\\n            $beneficiairesCumulative += $data['Nombre de bénéficiaires (A)'][$month];\\n            $data['Nombre de bénéficiaires (A)'][$month] = $beneficiairesCumulative;\\n\\n            // Calculer A1 = A / nombre de mois déjà écoulés\\n            $data['Nombre moyen de bénéficiaire (A1)'][$month] = floor($beneficiairesCumulative / ($index + 1));\\n            $data['Nombre moyen de bénéficiaire (A1)']['Total'] = $data['Nombre moyen de bénéficiaire (A1)'][$month];\\n        }\\n\\n        // Calculer les statistiques à pfartir des prestations\\n        foreach ($prestations as $prestation) {\\n            $date = Carbon::parse($prestation->created_at);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre de dentaires et auditifs (B)\\n            if ($prestation->acte == 'dentaire_auditif') {\\n                $data['Nombre de dentaires et auditifs (B)'][$month]++;\\n                $data['Nombre de dentaires et auditifs (B)']['Total']++;\\n\\n                // Cumul des dentaires et auditifs (B1)\\n                $dentairesAuditifsCumulative++;\\n                $data['Nombre de dentaires et auditifs Cumulée (B1)'][$month] = $dentairesAuditifsCumulative;\\n                $data['Nombre de dentaires et auditifs Cumulée (B1)']['Total'] = $dentairesAuditifsCumulative;\\n\\n                // Coût total des dentaires et auditifs (E)\\n                if (!isset($data['Coût total des dentaires et auditifs (E)'][$month])) {\\n                    $data['Coût total des dentaires et auditifs (E)'][$month] = 0;\\n                }\\n                $data['Coût total des dentaires et auditifs (E)'][$month] += $prestation->montant;\\n                $data['Coût total des dentaires et auditifs (E)']['Total'] += $prestation->montant;\\n\\n                \\n            }\\n        }\\n\\n        // Calculer le cumul par mois pour B1\\n        foreach ($months as $index => $month) {\\n            if ($index > 0) {\\n                $data['Nombre de dentaires et auditifs Cumulée (B1)'][$month] = $data['Nombre de dentaires et auditifs Cumulée (B1)'][$months[$index - 1]] + $data['Nombre de dentaires et auditifs (B)'][$month];\\n            }\\n\\n            // Cumul du coût total des dentaires et auditifs (E1)\\n            if ($index > 0) {\\n                $data['Coût Cumulé total des dentaires et auditifs (E1)'][$month] = $data['Coût Cumulé total des dentaires et auditifs (E1)'][$months[$index - 1]] + $data['Coût total des dentaires et auditifs (E)'][$month];\\n            } else {\\n                $data['Coût Cumulé total des dentaires et auditifs (E1)'][$month] = $data['Coût total des dentaires et auditifs (E)'][$month];\\n            }\\n            $data['Coût Cumulé total des dentaires et auditifs (E1)']['Total'] = $data['Coût Cumulé total des dentaires et auditifs (E1)'][$month] ;        \\n            \\n            // Coût moyen cumulé d’une dentaire et auditif (G)\\n            if ($data['Nombre de dentaires et auditifs Cumulée (B1)'][$month] > 0) {\\n                $data['Coût moyen cumulé d’une dentaire et auditif (G)'][$month] = $data['Coût Cumulé total des dentaires et auditifs (E1)'][$month] / $data['Nombre de dentaires et auditifs Cumulée (B1)'][$month];\\n            }\\n        }\\n        if ($data['Nombre de dentaires et auditifs Cumulée (B1)']['Total'] > 0) {\\n            $data['Coût moyen cumulé d’une dentaire et auditif (G)']['Total'] = $data['Coût Cumulé total des dentaires et auditifs (E1)']['Total']  / $data['Nombre de dentaires et auditifs Cumulée (B1)']['Total'];\\n        } else {\\n            $data['Coût moyen cumulé d’une dentaire et auditif (G)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes et taux d'utilisation\\n        foreach ($months as $index => $month) {\\n            $previousMonths = $index + 1;\\n\\n            // Taux d’utilisation mensuel % (C)\\n            if ($data['Nombre de bénéficiaires (A)'][$month] > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)'][$month] = number_format(($data['Nombre de dentaires et auditifs (B)'][$month] / $data['Nombre de bénéficiaires (A)'][$month])*$previousMonths * 100, 2);\\n            }\\n            if ($beneficiairesCumulative > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = number_format(($dentairesAuditifsCumulative / $beneficiairesCumulative)*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = 0;\\n            }\\n            // Taux d’utilisation cumulée % (D)\\n            if ($data['Nombre moyen de bénéficiaire (A1)'][$month] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)'][$month] = number_format(($data['Nombre de dentaires et auditifs Cumulée (B1)'][$month] / $data['Nombre moyen de bénéficiaire (A1)'][$month])*$previousMonths * 100, 2);\\n            \\n            }\\n            if ($data['Nombre moyen de bénéficiaire (A1)']['Total'] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = number_format(($dentairesAuditifsCumulative / $data['Nombre moyen de bénéficiaire (A1)']['Total'])*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = 0;\\n            }\\n\\n            // Coût moyen mensuel d’une dentaire et auditif (F)\\n            if ($data['Nombre de dentaires et auditifs (B)'][$month] > 0) {\\n                $data['Coût moyen mensuel d’une dentaire et auditif (F)'][$month] = $data['Coût total des dentaires et auditifs (E)'][$month] / $data['Nombre de dentaires et auditifs (B)'][$month];\\n            }\\n\\n\\n            \\n        }\\n        if ($data['Nombre de dentaires et auditifs (B)']['Total'] > 0) {\\n            $data['Coût moyen mensuel d’une dentaire et auditif (F)']['Total'] = $data['Coût total des dentaires et auditifs (E)']['Total']  / $data['Nombre de dentaires et auditifs (B)']['Total'];\\n        } else {\\n            $data['Coût moyen mensuel d’une dentaire et auditif (F)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes totales pour chaque catégorie\\n        foreach ($categories as $category) {\\n            $data[$category]['Moyenne'] = number_format($data[$category]['Total'] / count($months), 2, ',', ' ');\\n        }\\n\\n        // Convertir les données pour Tabulator\\n        $tabulatorData = [];\\n        foreach ($categories as $category) {\\n            $row = ['Category' => $category];\\n            foreach ($months as $month) {\\n                $row[$month] = $data[$category][$month];\\n            }\\n            $row['Total'] = $data[$category]['Total'];\\n            $row['Moyenne'] = $data[$category]['Moyenne'];\\n            $row['Référence'] = $data[$category]['Référence'];\\n            $tabulatorData[] = $row;\\n        }\\n\\n        $viewData = [\\n            'tabulatorData' => $tabulatorData,\\n            'currentYear' => $currentYear,\\n        ];\\n\\n        return view('pages.backend.prestations.suivi-dentaire-auditif', compact('tabulatorData', 'prestationsGroupedByAdherent', 'currentYear', 'prestationsAll', 'months' , 'data'));\\n    }\\n\\n    public function suiviAutre(Request $request)\\n    {\\n\\n        $currentYear = $request->input('year', Carbon::now()->year);\\n        $adherentCodes = Adherent::pluck('code_carte')->toArray();\\n        $prestationsAdherents = Prestation::join('adherents', 'prestations.adherentCode', '=', 'adherents.code_carte')\\n            ->whereYear('prestations.created_at', $currentYear)\\n            ->select('prestations.*', 'adherents.id as adherent_id')\\n            ->get();\\n\\n        $prestationsAyantsDroit = Prestation::join('ayant_droits', 'prestations.adherentCode', '=', 'ayant_droits.code')\\n            ->join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('prestations.created_at', $currentYear)\\n            ->select('prestations.*', 'adherents.id as adherent_id')\\n            ->distinct()\\n            ->get();\\n\\n        \\n\\n        $prestationsAll = $prestationsAdherents->merge($prestationsAyantsDroit);\\n\\n\\n        $prestationsGroupedByAdherent = $prestationsAll->groupBy('adherent_id');\\n\\n        $adherents = Adherent::whereYear('date_enregistrement', $currentYear)->get();\\n        $ayantsDroit = AyantDroit::join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('adherents.date_enregistrement', $currentYear)\\n            ->select('ayant_droits.*')\\n            ->get();\\n        $prestations = Prestation::whereYear('created_at', $currentYear)->get();\\n        $categories = [\\n            'Nombre de nouveaux bénéficiaires',\\n            'Nombre de bénéficiaires (A)',\\n            'Nombre moyen de bénéficiaire (A1)',\\n            'Nombre autres (B)',\\n            'Nombre autres Cumulée (B1)',\\n            'Taux d’utilisation mensuel % C (C)',\\n            'Taux d’utilisation cumulée %(D)',\\n            'Coût total des autres (E)',\\n            'Coût Cumulé total des autres (E1)',\\n            'Coût moyen mensuel d’un autre (F)',\\n            'Coût moyen cumulé d’un autre (G)'\\n        ];\\n\\n        $months = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];\\n\\n        $data = [];\\n        $autresCumulative = 0;\\n        $coutCumulative = 0;\\n        $beneficiairesCumulative = 0;\\n        $totalCoutCumulative = 0;\\n\\n        foreach ($categories as $category) {\\n            foreach ($months as $month) {\\n                $data[$category][$month] = 0;\\n            }\\n            $data[$category]['Total'] = 0;\\n            $data[$category]['Moyenne'] = 0;\\n            $data[$category]['Référence'] = '';\\n        }\\n\\n        // Nombre de bénéficiaires (adhérents + ayants droit)\\n        foreach ($adherents as $adherent) {\\n            $date = Carbon::parse($adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        foreach ($ayantsDroit as $ayantDroit) {\\n            $date = Carbon::parse($ayantDroit->adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre de bénéficiaires (A) par mois\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        // Calcul du cumul des bénéficiaires pour chaque mois\\n        foreach ($months as $index => $month) {\\n            $beneficiairesCumulative += $data['Nombre de bénéficiaires (A)'][$month];\\n            $data['Nombre de bénéficiaires (A)'][$month] = $beneficiairesCumulative;\\n\\n            // Calculer A1 = A / nombre de mois déjà écoulés\\n            $data['Nombre moyen de bénéficiaire (A1)'][$month] = floor($beneficiairesCumulative / ($index + 1));\\n            $data['Nombre moyen de bénéficiaire (A1)']['Total'] = $data['Nombre moyen de bénéficiaire (A1)'][$month];\\n        }\\n\\n        // Calculer les statistiques à pfartir des prestations\\n        foreach ($prestations as $prestation) {\\n            $date = Carbon::parse($prestation->created_at);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre autres (B)\\n            if ($prestation->acte == 'autre') {\\n                $data['Nombre autres (B)'][$month]++;\\n                $data['Nombre autres (B)']['Total']++;\\n\\n                // Cumul des autre (B1)\\n                $autresCumulative++;\\n                $data['Nombre autres Cumulée (B1)'][$month] = $autresCumulative;\\n                $data['Nombre autres Cumulée (B1)']['Total'] = $autresCumulative;\\n\\n                // Coût total des autres (E)\\n                if (!isset($data['Coût total des autres (E)'][$month])) {\\n                    $data['Coût total des autres (E)'][$month] = 0;\\n                }\\n                $data['Coût total des autres (E)'][$month] += $prestation->montant;\\n                $data['Coût total des autres (E)']['Total'] += $prestation->montant;\\n\\n                \\n            }\\n        }\\n\\n        // Calculer le cumul par mois pour B1\\n        foreach ($months as $index => $month) {\\n            if ($index > 0) {\\n                $data['Nombre autres Cumulée (B1)'][$month] = $data['Nombre autres Cumulée (B1)'][$months[$index - 1]] + $data['Nombre autres (B)'][$month];\\n            }\\n\\n            // Cumul du coût total des autres (E1)\\n            if ($index > 0) {\\n                $data['Coût Cumulé total des autres (E1)'][$month] = $data['Coût Cumulé total des autres (E1)'][$months[$index - 1]] + $data['Coût total des autres (E)'][$month];\\n            } else {\\n                $data['Coût Cumulé total des autres (E1)'][$month] = $data['Coût total des autres (E)'][$month];\\n            }\\n            $data['Coût Cumulé total des autres (E1)']['Total'] = $data['Coût Cumulé total des autres (E1)'][$month] ;        \\n            \\n            // Coût moyen cumulé d’un autre (G)\\n            if ($data['Nombre autres Cumulée (B1)'][$month] > 0) {\\n                $data['Coût moyen cumulé d’un autre (G)'][$month] = $data['Coût Cumulé total des autres (E1)'][$month] / $data['Nombre autres Cumulée (B1)'][$month];\\n            }\\n        }\\n        if ($data['Nombre autres Cumulée (B1)']['Total'] > 0) {\\n            $data['Coût moyen cumulé d’un autre (G)']['Total'] = $data['Coût Cumulé total des autres (E1)']['Total']  / $data['Nombre autres Cumulée (B1)']['Total'];\\n        } else {\\n            $data['Coût moyen cumulé d’un autre (G)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes et taux d'utilisation\\n        foreach ($months as $index => $month) {\\n            $previousMonths = $index + 1;\\n\\n            // Taux d’utilisation mensuel % (C)\\n            if ($data['Nombre de bénéficiaires (A)'][$month] > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)'][$month] = number_format(($data['Nombre autres (B)'][$month] / $data['Nombre de bénéficiaires (A)'][$month])*$previousMonths * 100, 2);\\n            }\\n            if ($beneficiairesCumulative > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = number_format(($autresCumulative / $beneficiairesCumulative)*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = 0;\\n            }\\n            // Taux d’utilisation cumulée % (D)\\n            if ($data['Nombre moyen de bénéficiaire (A1)'][$month] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)'][$month] = number_format(($data['Nombre autres Cumulée (B1)'][$month] / $data['Nombre moyen de bénéficiaire (A1)'][$month])*$previousMonths * 100, 2);\\n            \\n            }\\n            if ($data['Nombre moyen de bénéficiaire (A1)']['Total'] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = number_format(($autresCumulative / $data['Nombre moyen de bénéficiaire (A1)']['Total'])*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = 0;\\n            }\\n\\n            // Coût moyen mensuel d’un autre (F)\\n            if ($data['Nombre autres (B)'][$month] > 0) {\\n                $data['Coût moyen mensuel d’un autre (F)'][$month] = $data['Coût total des autres (E)'][$month] / $data['Nombre autres (B)'][$month];\\n            }\\n\\n\\n            \\n        }\\n        if ($data['Nombre autres (B)']['Total'] > 0) {\\n            $data['Coût moyen mensuel d’un autre (F)']['Total'] = $data['Coût total des autres (E)']['Total']  / $data['Nombre autres (B)']['Total'];\\n        } else {\\n            $data['Coût moyen mensuel d’un autre (F)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes totales pour chaque catégorie\\n        foreach ($categories as $category) {\\n            $data[$category]['Moyenne'] = number_format($data[$category]['Total'] / count($months), 2, ',', ' ');\\n        }\\n\\n        // Convertir les données pour Tabulator\\n        $tabulatorData = [];\\n        foreach ($categories as $category) {\\n            $row = ['Category' => $category];\\n            foreach ($months as $month) {\\n                $row[$month] = $data[$category][$month];\\n            }\\n            $row['Total'] = $data[$category]['Total'];\\n            $row['Moyenne'] = $data[$category]['Moyenne'];\\n            $row['Référence'] = $data[$category]['Référence'];\\n            $tabulatorData[] = $row;\\n        }\\n\\n        $viewData = [\\n            'tabulatorData' => $tabulatorData,\\n            'currentYear' => $currentYear,\\n        ];\\n\\n        return view('pages.backend.prestations.suivi-autre', compact('tabulatorData', 'prestationsGroupedByAdherent', 'currentYear', 'prestationsAll', 'months' , 'data'));\\n    }\\n \\n\\n\\n\\n    public function suiviAnalyseBiomedicale(Request $request)\\n    {\\n\\n        $currentYear = $request->input('year', Carbon::now()->year);\\n        $adherentCodes = Adherent::pluck('code_carte')->toArray();\\n        $prestationsAdherents = Prestation::join('adherents', 'prestations.adherentCode', '=', 'adherents.code_carte')\\n            ->whereYear('prestations.created_at', $currentYear)\\n            ->select('prestations.*', 'adherents.id as adherent_id')\\n            ->get();\\n\\n        $prestationsAyantsDroit = Prestation::join('ayant_droits', 'prestations.adherentCode', '=', 'ayant_droits.code')\\n            ->join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('prestations.created_at', $currentYear)\\n            ->select('prestations.*', 'adherents.id as adherent_id')\\n            ->distinct()\\n            ->get();\\n\\n        \\n\\n        $prestationsAll = $prestationsAdherents->merge($prestationsAyantsDroit);\\n\\n\\n        $prestationsGroupedByAdherent = $prestationsAll->groupBy('adherent_id');\\n\\n        $adherents = Adherent::whereYear('date_enregistrement', $currentYear)->get();\\n        $ayantsDroit = AyantDroit::join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('adherents.date_enregistrement', $currentYear)\\n            ->select('ayant_droits.*')\\n            ->get();\\n        $prestations = Prestation::whereYear('created_at', $currentYear)->get();\\n        $categories = [\\n            'Nombre de nouveaux bénéficiaires',\\n            'Nombre de bénéficiaires (A)',\\n            'Nombre moyen de bénéficiaire (A1)',\\n            'Nombre d’analyses biomédicales (B)',\\n            'Nombre d’analyses biomédicales Cumulée (B1)',\\n            'Taux d’utilisation mensuel % C (C)',\\n            'Taux d’utilisation cumulée %(D)',\\n            'Coût total des analyses biomédicales (E)',\\n            'Coût Cumulé total des analyses biomédicales (E1)',\\n            'Coût moyen mensuel d’une analyse biomédicale (F)',\\n            'Coût moyen cumulé d’une analyse biomédicale (G)'\\n        ];\\n\\n        $months = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];\\n\\n        $data = [];\\n        $analysesBiomedicalesCumulative = 0;\\n        $coutCumulative = 0;\\n        $beneficiairesCumulative = 0;\\n        $totalCoutCumulative = 0;\\n\\n        foreach ($categories as $category) {\\n            foreach ($months as $month) {\\n                $data[$category][$month] = 0;\\n            }\\n            $data[$category]['Total'] = 0;\\n            $data[$category]['Moyenne'] = 0;\\n            $data[$category]['Référence'] = '';\\n        }\\n\\n        // Nombre de bénéficiaires (adhérents + ayants droit)\\n        foreach ($adherents as $adherent) {\\n            $date = Carbon::parse($adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        foreach ($ayantsDroit as $ayantDroit) {\\n            $date = Carbon::parse($ayantDroit->adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre de bénéficiaires (A) par mois\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        // Calcul du cumul des bénéficiaires pour chaque mois\\n        foreach ($months as $index => $month) {\\n            $beneficiairesCumulative += $data['Nombre de bénéficiaires (A)'][$month];\\n            $data['Nombre de bénéficiaires (A)'][$month] = $beneficiairesCumulative;\\n\\n            // Calculer A1 = A / nombre de mois déjà écoulés\\n            $data['Nombre moyen de bénéficiaire (A1)'][$month] = floor($beneficiairesCumulative / ($index + 1));\\n            $data['Nombre moyen de bénéficiaire (A1)']['Total'] = $data['Nombre moyen de bénéficiaire (A1)'][$month];\\n        }\\n\\n        // Calculer les statistiques à pfartir des prestations\\n        foreach ($prestations as $prestation) {\\n            $date = Carbon::parse($prestation->created_at);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre d'analyses biomédicales (B)\\n            if ($prestation->acte == 'analyse_biomedicale') {\\n                $data['Nombre d’analyses biomédicales (B)'][$month]++;\\n                $data['Nombre d’analyses biomédicales (B)']['Total']++;\\n\\n                // Cumul des analyses biomédicales (B1)\\n                $analysesBiomedicalesCumulative++;\\n                $data['Nombre d’analyses biomédicales Cumulée (B1)'][$month] = $analysesBiomedicalesCumulative;\\n                $data['Nombre d’analyses biomédicales Cumulée (B1)']['Total'] = $analysesBiomedicalesCumulative;\\n\\n                // Coût total des analyses biomédicales (E)\\n                if (!isset($data['Coût total des analyses biomédicales (E)'][$month])) {\\n                    $data['Coût total des analyses biomédicales (E)'][$month] = 0;\\n                }\\n                $data['Coût total des analyses biomédicales (E)'][$month] += $prestation->montant;\\n                $data['Coût total des analyses biomédicales (E)']['Total'] += $prestation->montant;\\n\\n                \\n            }\\n        }\\n\\n        // Calculer le cumul par mois pour B1\\n        foreach ($months as $index => $month) {\\n            if ($index > 0) {\\n                $data['Nombre d’analyses biomédicales Cumulée (B1)'][$month] = $data['Nombre d’analyses biomédicales Cumulée (B1)'][$months[$index - 1]] + $data['Nombre d’analyses biomédicales (B)'][$month];\\n            }\\n\\n            // Cumul du coût total des analyses biomédicales (E1)\\n            if ($index > 0) {\\n                $data['Coût Cumulé total des analyses biomédicales (E1)'][$month] = $data['Coût Cumulé total des analyses biomédicales (E1)'][$months[$index - 1]] + $data['Coût total des analyses biomédicales (E)'][$month];\\n            } else {\\n                $data['Coût Cumulé total des analyses biomédicales (E1)'][$month] = $data['Coût total des analyses biomédicales (E)'][$month];\\n            }\\n            $data['Coût Cumulé total des analyses biomédicales (E1)']['Total'] = $data['Coût Cumulé total des analyses biomédicales (E1)'][$month] ;        \\n            \\n            // Coût moyen cumulé d’une analyse biomédicale (G)\\n            if ($data['Nombre d’analyses biomédicales Cumulée (B1)'][$month] > 0) {\\n                $data['Coût moyen cumulé d’une analyse biomédicale (G)'][$month] = $data['Coût Cumulé total des analyses biomédicales (E1)'][$month] / $data['Nombre d’analyses biomédicales Cumulée (B1)'][$month];\\n            }\\n        }\\n        if ($data['Nombre d’analyses biomédicales Cumulée (B1)']['Total'] > 0) {\\n            $data['Coût moyen cumulé d’une analyse biomédicale (G)']['Total'] = $data['Coût Cumulé total des analyses biomédicales (E1)']['Total']  / $data['Nombre d’analyses biomédicales Cumulée (B1)']['Total'];\\n        } else {\\n            $data['Coût moyen cumulé d’une analyse biomédicale (G)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes et taux d'utilisation\\n        foreach ($months as $index => $month) {\\n            $previousMonths = $index + 1;\\n\\n            // Taux d’utilisation mensuel % (C)\\n            if ($data['Nombre de bénéficiaires (A)'][$month] > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)'][$month] = number_format(($data['Nombre d’analyses biomédicales (B)'][$month] / $data['Nombre de bénéficiaires (A)'][$month])*$previousMonths * 100, 2);\\n            }\\n            if ($beneficiairesCumulative > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = number_format(($analysesBiomedicalesCumulative / $beneficiairesCumulative)*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = 0;\\n            }\\n            // Taux d’utilisation cumulée % (D)\\n            if ($data['Nombre moyen de bénéficiaire (A1)'][$month] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)'][$month] = number_format(($data['Nombre d’analyses biomédicales Cumulée (B1)'][$month] / $data['Nombre moyen de bénéficiaire (A1)'][$month])*$previousMonths * 100, 2);\\n            \\n            }\\n            if ($data['Nombre moyen de bénéficiaire (A1)']['Total'] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = number_format(($analysesBiomedicalesCumulative / $data['Nombre moyen de bénéficiaire (A1)']['Total'])*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = 0;\\n            }\\n\\n            // Coût moyen mensuel d’une analyse biomédicale (F)\\n            if ($data['Nombre d’analyses biomédicales (B)'][$month] > 0) {\\n                $data['Coût moyen mensuel d’une analyse biomédicale (F)'][$month] = $data['Coût total des analyses biomédicales (E)'][$month] / $data['Nombre d’analyses biomédicales (B)'][$month];\\n            }\\n\\n\\n            \\n        }\\n        if ($data['Nombre d’analyses biomédicales (B)']['Total'] > 0) {\\n            $data['Coût moyen mensuel d’une analyse biomédicale (F)']['Total'] = $data['Coût total des analyses biomédicales (E)']['Total']  / $data['Nombre d’analyses biomédicales (B)']['Total'];\\n        } else {\\n            $data['Coût moyen mensuel d’une analyse biomédicale (F)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes totales pour chaque catégorie\\n        foreach ($categories as $category) {\\n            $data[$category]['Moyenne'] = number_format($data[$category]['Total'] / count($months), 2, ',', ' ');\\n        }\\n\\n        // Convertir les données pour Tabulator\\n        $tabulatorData = [];\\n        foreach ($categories as $category) {\\n            $row = ['Category' => $category];\\n            foreach ($months as $month) {\\n                $row[$month] = $data[$category][$month];\\n            }\\n            $row['Total'] = $data[$category]['Total'];\\n            $row['Moyenne'] = $data[$category]['Moyenne'];\\n            $row['Référence'] = $data[$category]['Référence'];\\n            $tabulatorData[] = $row;\\n        }\\n\\n        $viewData = [\\n            'tabulatorData' => $tabulatorData,\\n            'currentYear' => $currentYear,\\n        ];\\n\\n        return view('pages.backend.prestations.suivi-analyse-biomedicale', compact('tabulatorData', 'prestationsGroupedByAdherent', 'currentYear', 'prestationsAll', 'months' , 'data'));\\n    }\\n\\n    public function suiviPharmacie(Request $request)\\n    {\\n\\n        $currentYear = $request->input('year', Carbon::now()->year);\\n        $adherentCodes = Adherent::pluck('code_carte')->toArray();\\n        $prestationsAdherents = Prestation::join('adherents', 'prestations.adherentCode', '=', 'adherents.code_carte')\\n            ->whereYear('prestations.created_at', $currentYear)\\n            ->select('prestations.*', 'adherents.id as adherent_id')\\n            ->get();\\n\\n        $prestationsAyantsDroit = Prestation::join('ayant_droits', 'prestations.adherentCode', '=', 'ayant_droits.code')\\n            ->join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('prestations.created_at', $currentYear)\\n            ->select('prestations.*', 'adherents.id as adherent_id')\\n            ->distinct()\\n            ->get();\\n\\n        \\n\\n        $prestationsAll = $prestationsAdherents->merge($prestationsAyantsDroit);\\n\\n\\n        $prestationsGroupedByAdherent = $prestationsAll->groupBy('adherent_id');\\n\\n        $adherents = Adherent::whereYear('date_enregistrement', $currentYear)->get();\\n        $ayantsDroit = AyantDroit::join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('adherents.date_enregistrement', $currentYear)\\n            ->select('ayant_droits.*')\\n            ->get();\\n        $prestations = Prestation::whereYear('created_at', $currentYear)->get();\\n        $categories = [\\n            'Nombre de nouveaux bénéficiaires',\\n            'Nombre de bénéficiaires (A)',\\n            'Nombre moyen de bénéficiaire (A1)',\\n            'Nombre de pharmacies (B)',\\n            'Nombre de pharmacies Cumulée (B1)',\\n            'Taux d’utilisation mensuel % C (C)',\\n            'Taux d’utilisation cumulée %(D)',\\n            'Coût total des pharmacies (E)',\\n            'Coût Cumulé total des pharmacies (E1)',\\n            'Coût moyen mensuel d’une pharmacie (F)',\\n            'Coût moyen cumulé d’une pharmacie (G)'\\n        ];\\n\\n        $months = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];\\n\\n        $data = [];\\n        $pharmaciesCumulative = 0;\\n        $coutCumulative = 0;\\n        $beneficiairesCumulative = 0;\\n        $totalCoutCumulative = 0;\\n\\n        foreach ($categories as $category) {\\n            foreach ($months as $month) {\\n                $data[$category][$month] = 0;\\n            }\\n            $data[$category]['Total'] = 0;\\n            $data[$category]['Moyenne'] = 0;\\n            $data[$category]['Référence'] = '';\\n        }\\n\\n        // Nombre de bénéficiaires (adhérents + ayants droit)\\n        foreach ($adherents as $adherent) {\\n            $date = Carbon::parse($adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        foreach ($ayantsDroit as $ayantDroit) {\\n            $date = Carbon::parse($ayantDroit->adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre de bénéficiaires (A) par mois\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        // Calcul du cumul des bénéficiaires pour chaque mois\\n        foreach ($months as $index => $month) {\\n            $beneficiairesCumulative += $data['Nombre de bénéficiaires (A)'][$month];\\n            $data['Nombre de bénéficiaires (A)'][$month] = $beneficiairesCumulative;\\n\\n            // Calculer A1 = A / nombre de mois déjà écoulés\\n            $data['Nombre moyen de bénéficiaire (A1)'][$month] = floor($beneficiairesCumulative / ($index + 1));\\n            $data['Nombre moyen de bénéficiaire (A1)']['Total'] = $data['Nombre moyen de bénéficiaire (A1)'][$month];\\n        }\\n\\n        // Calculer les statistiques à pfartir des prestations\\n        foreach ($prestations as $prestation) {\\n            $date = Carbon::parse($prestation->created_at);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre de pharmacies (B)\\n            if ($prestation->acte == 'pharmacie') {\\n                $data['Nombre de pharmacies (B)'][$month]++;\\n                $data['Nombre de pharmacies (B)']['Total']++;\\n\\n                // Cumul des pharmacies (B1)\\n                $pharmaciesCumulative++;\\n                $data['Nombre de pharmacies Cumulée (B1)'][$month] = $pharmaciesCumulative;\\n                $data['Nombre de pharmacies Cumulée (B1)']['Total'] = $pharmaciesCumulative;\\n\\n                // Coût total des pharmacies (E)\\n                if (!isset($data['Coût total des pharmacies (E)'][$month])) {\\n                    $data['Coût total des pharmacies (E)'][$month] = 0;\\n                }\\n                $data['Coût total des pharmacies (E)'][$month] += $prestation->montant;\\n                $data['Coût total des pharmacies (E)']['Total'] += $prestation->montant;\\n\\n                \\n            }\\n        }\\n\\n        // Calculer le cumul par mois pour B1\\n        foreach ($months as $index => $month) {\\n            if ($index > 0) {\\n                $data['Nombre de pharmacies Cumulée (B1)'][$month] = $data['Nombre de pharmacies Cumulée (B1)'][$months[$index - 1]] + $data['Nombre de pharmacies (B)'][$month];\\n            }\\n\\n            // Cumul du coût total des pharmacies (E1)\\n            if ($index > 0) {\\n                $data['Coût Cumulé total des pharmacies (E1)'][$month] = $data['Coût Cumulé total des pharmacies (E1)'][$months[$index - 1]] + $data['Coût total des pharmacies (E)'][$month];\\n            } else {\\n                $data['Coût Cumulé total des pharmacies (E1)'][$month] = $data['Coût total des pharmacies (E)'][$month];\\n            }\\n            $data['Coût Cumulé total des pharmacies (E1)']['Total'] = $data['Coût Cumulé total des pharmacies (E1)'][$month] ;        \\n            \\n            // Coût moyen cumulé d’une pharmacie (G)\\n            if ($data['Nombre de pharmacies Cumulée (B1)'][$month] > 0) {\\n                $data['Coût moyen cumulé d’une pharmacie (G)'][$month] = $data['Coût Cumulé total des pharmacies (E1)'][$month] / $data['Nombre de pharmacies Cumulée (B1)'][$month];\\n            }\\n        }\\n        if ($data['Nombre de pharmacies Cumulée (B1)']['Total'] > 0) {\\n            $data['Coût moyen cumulé d’une pharmacie (G)']['Total'] = $data['Coût Cumulé total des pharmacies (E1)']['Total']  / $data['Nombre de pharmacies Cumulée (B1)']['Total'];\\n        } else {\\n            $data['Coût moyen cumulé d’une pharmacie (G)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes et taux d'utilisation\\n        foreach ($months as $index => $month) {\\n            $previousMonths = $index + 1;\\n\\n            // Taux d’utilisation mensuel % (C)\\n            if ($data['Nombre de bénéficiaires (A)'][$month] > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)'][$month] = number_format(($data['Nombre de pharmacies (B)'][$month] / $data['Nombre de bénéficiaires (A)'][$month])*$previousMonths * 100, 2);\\n            }\\n            if ($beneficiairesCumulative > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = number_format(($pharmaciesCumulative / $beneficiairesCumulative)*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = 0;\\n            }\\n            // Taux d’utilisation cumulée % (D)\\n            if ($data['Nombre moyen de bénéficiaire (A1)'][$month] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)'][$month] = number_format(($data['Nombre de pharmacies Cumulée (B1)'][$month] / $data['Nombre moyen de bénéficiaire (A1)'][$month])*$previousMonths * 100, 2);\\n            \\n            }\\n            if ($data['Nombre moyen de bénéficiaire (A1)']['Total'] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = number_format(($pharmaciesCumulative / $data['Nombre moyen de bénéficiaire (A1)']['Total'])*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = 0;\\n            }\\n\\n            // Coût moyen mensuel d’une pharmacie (F)\\n            if ($data['Nombre de pharmacies (B)'][$month] > 0) {\\n                $data['Coût moyen mensuel d’une pharmacie (F)'][$month] = $data['Coût total des pharmacies (E)'][$month] / $data['Nombre de pharmacies (B)'][$month];\\n            }\\n\\n\\n            \\n        }\\n        if ($data['Nombre de pharmacies (B)']['Total'] > 0) {\\n            $data['Coût moyen mensuel d’une pharmacie (F)']['Total'] = $data['Coût total des pharmacies (E)']['Total']  / $data['Nombre de pharmacies (B)']['Total'];\\n        } else {\\n            $data['Coût moyen mensuel d’une pharmacie (F)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes totales pour chaque catégorie\\n        foreach ($categories as $category) {\\n            $data[$category]['Moyenne'] = number_format($data[$category]['Total'] / count($months), 2, ',', ' ');\\n        }\\n\\n        // Convertir les données pour Tabulator\\n        $tabulatorData = [];\\n        foreach ($categories as $category) {\\n            $row = ['Category' => $category];\\n            foreach ($months as $month) {\\n                $row[$month] = $data[$category][$month];\\n            }\\n            $row['Total'] = $data[$category]['Total'];\\n            $row['Moyenne'] = $data[$category]['Moyenne'];\\n            $row['Référence'] = $data[$category]['Référence'];\\n            $tabulatorData[] = $row;\\n        }\\n\\n        $viewData = [\\n            'tabulatorData' => $tabulatorData,\\n            'currentYear' => $currentYear,\\n        ];\\n\\n        return view('pages.backend.prestations.suivi-pharmacie', compact('tabulatorData', 'prestationsGroupedByAdherent', 'currentYear', 'prestationsAll', 'months' , 'data'));\\n    }\\n\\n    public function suiviOptique(Request $request)\\n    {\\n\\n        $currentYear = $request->input('year', Carbon::now()->year);\\n        $adherentCodes = Adherent::pluck('code_carte')->toArray();\\n        $prestationsAdherents = Prestation::join('adherents', 'prestations.adherentCode', '=', 'adherents.code_carte')\\n            ->whereYear('prestations.created_at', $currentYear)\\n            ->select('prestations.*', 'adherents.id as adherent_id')\\n            ->get();\\n\\n        $prestationsAyantsDroit = Prestation::join('ayant_droits', 'prestations.adherentCode', '=', 'ayant_droits.code')\\n            ->join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('prestations.created_at', $currentYear)\\n            ->select('prestations.*', 'adherents.id as adherent_id')\\n            ->distinct()\\n            ->get();\\n\\n        \\n\\n        $prestationsAll = $prestationsAdherents->merge($prestationsAyantsDroit);\\n\\n\\n        $prestationsGroupedByAdherent = $prestationsAll->groupBy('adherent_id');\\n\\n        $adherents = Adherent::whereYear('date_enregistrement', $currentYear)->get();\\n        $ayantsDroit = AyantDroit::join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('adherents.date_enregistrement', $currentYear)\\n            ->select('ayant_droits.*')\\n            ->get();\\n        $prestations = Prestation::whereYear('created_at', $currentYear)->get();\\n        $categories = [\\n            'Nombre de nouveaux bénéficiaires',\\n            'Nombre de bénéficiaires (A)',\\n            'Nombre moyen de bénéficiaire (A1)',\\n            'Nombre d’optiques (B)',\\n            'Nombre d’optiques Cumulée (B1)',\\n            'Taux d’utilisation mensuel % C (C)',\\n            'Taux d’utilisation cumulée %(D)',\\n            'Coût total des optiques (E)',\\n            'Coût Cumulé total des optiques (E1)',\\n            'Coût moyen mensuel d’une optique (F)',\\n            'Coût moyen cumulé d’une optique (G)'\\n        ];\\n\\n        $months = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];\\n\\n        $data = [];\\n        $optiquesCumulative = 0;\\n        $coutCumulative = 0;\\n        $beneficiairesCumulative = 0;\\n        $totalCoutCumulative = 0;\\n\\n        foreach ($categories as $category) {\\n            foreach ($months as $month) {\\n                $data[$category][$month] = 0;\\n            }\\n            $data[$category]['Total'] = 0;\\n            $data[$category]['Moyenne'] = 0;\\n            $data[$category]['Référence'] = '';\\n        }\\n\\n        // Nombre de bénéficiaires (adhérents + ayants droit)\\n        foreach ($adherents as $adherent) {\\n            $date = Carbon::parse($adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        foreach ($ayantsDroit as $ayantDroit) {\\n            $date = Carbon::parse($ayantDroit->adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre de bénéficiaires (A) par mois\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        // Calcul du cumul des bénéficiaires pour chaque mois\\n        foreach ($months as $index => $month) {\\n            $beneficiairesCumulative += $data['Nombre de bénéficiaires (A)'][$month];\\n            $data['Nombre de bénéficiaires (A)'][$month] = $beneficiairesCumulative;\\n\\n            // Calculer A1 = A / nombre de mois déjà écoulés\\n            $data['Nombre moyen de bénéficiaire (A1)'][$month] = floor($beneficiairesCumulative / ($index + 1));\\n            $data['Nombre moyen de bénéficiaire (A1)']['Total'] = $data['Nombre moyen de bénéficiaire (A1)'][$month];\\n        }\\n\\n        // Calculer les statistiques à pfartir des prestations\\n        foreach ($prestations as $prestation) {\\n            $date = Carbon::parse($prestation->created_at);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre d’optiques (B)\\n            if ($prestation->acte == 'optique') {\\n                $data['Nombre d’optiques (B)'][$month]++;\\n                $data['Nombre d’optiques (B)']['Total']++;\\n\\n                // Cumul des optiques (B1)\\n                $optiquesCumulative++;\\n                $data['Nombre d’optiques Cumulée (B1)'][$month] = $optiquesCumulative;\\n                $data['Nombre d’optiques Cumulée (B1)']['Total'] = $optiquesCumulative;\\n\\n                // Coût total des optiques (E)\\n                if (!isset($data['Coût total des optiques (E)'][$month])) {\\n                    $data['Coût total des optiques (E)'][$month] = 0;\\n                }\\n                $data['Coût total des optiques (E)'][$month] += $prestation->montant;\\n                $data['Coût total des optiques (E)']['Total'] += $prestation->montant;\\n\\n                \\n            }\\n        }\\n\\n        // Calculer le cumul par mois pour B1\\n        foreach ($months as $index => $month) {\\n            if ($index > 0) {\\n                $data['Nombre d’optiques Cumulée (B1)'][$month] = $data['Nombre d’optiques Cumulée (B1)'][$months[$index - 1]] + $data['Nombre d’optiques (B)'][$month];\\n            }\\n\\n            // Cumul du coût total des optiques (E1)\\n            if ($index > 0) {\\n                $data['Coût Cumulé total des optiques (E1)'][$month] = $data['Coût Cumulé total des optiques (E1)'][$months[$index - 1]] + $data['Coût total des optiques (E)'][$month];\\n            } else {\\n                $data['Coût Cumulé total des optiques (E1)'][$month] = $data['Coût total des optiques (E)'][$month];\\n            }\\n            $data['Coût Cumulé total des optiques (E1)']['Total'] = $data['Coût Cumulé total des optiques (E1)'][$month] ;        \\n            \\n            // Coût moyen cumulé d’une optique (G)\\n            if ($data['Nombre d’optiques Cumulée (B1)'][$month] > 0) {\\n                $data['Coût moyen cumulé d’une optique (G)'][$month] = $data['Coût Cumulé total des optiques (E1)'][$month] / $data['Nombre d’optiques Cumulée (B1)'][$month];\\n            }\\n        }\\n        if ($data['Nombre d’optiques Cumulée (B1)']['Total'] > 0) {\\n            $data['Coût moyen cumulé d’une optique (G)']['Total'] = $data['Coût Cumulé total des optiques (E1)']['Total']  / $data['Nombre d’optiques Cumulée (B1)']['Total'];\\n        } else {\\n            $data['Coût moyen cumulé d’une optique (G)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes et taux d'utilisation\\n        foreach ($months as $index => $month) {\\n            $previousMonths = $index + 1;\\n\\n            // Taux d’utilisation mensuel % (C)\\n            if ($data['Nombre de bénéficiaires (A)'][$month] > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)'][$month] = number_format(($data['Nombre d’optiques (B)'][$month] / $data['Nombre de bénéficiaires (A)'][$month])*$previousMonths * 100, 2);\\n            }\\n            if ($beneficiairesCumulative > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = number_format(($optiquesCumulative / $beneficiairesCumulative)*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = 0;\\n            }\\n            // Taux d’utilisation cumulée % (D)\\n            if ($data['Nombre moyen de bénéficiaire (A1)'][$month] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)'][$month] = number_format(($data['Nombre d’optiques Cumulée (B1)'][$month] / $data['Nombre moyen de bénéficiaire (A1)'][$month])*$previousMonths * 100, 2);\\n            \\n            }\\n            if ($data['Nombre moyen de bénéficiaire (A1)']['Total'] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = number_format(($optiquesCumulative / $data['Nombre moyen de bénéficiaire (A1)']['Total'])*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = 0;\\n            }\\n\\n            // Coût moyen mensuel d’une optique (F)\\n            if ($data['Nombre d’optiques (B)'][$month] > 0) {\\n                $data['Coût moyen mensuel d’une optique (F)'][$month] = $data['Coût total des optiques (E)'][$month] / $data['Nombre d’optiques (B)'][$month];\\n            }\\n\\n\\n            \\n        }\\n        if ($data['Nombre d’optiques (B)']['Total'] > 0) {\\n            $data['Coût moyen mensuel d’une optique (F)']['Total'] = $data['Coût total des optiques (E)']['Total']  / $data['Nombre d’optiques (B)']['Total'];\\n        } else {\\n            $data['Coût moyen mensuel d’une optique (F)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes totales pour chaque catégorie\\n        foreach ($categories as $category) {\\n            $data[$category]['Moyenne'] = number_format($data[$category]['Total'] / count($months), 2, ',', ' ');\\n        }\\n\\n        // Convertir les données pour Tabulator\\n        $tabulatorData = [];\\n        foreach ($categories as $category) {\\n            $row = ['Category' => $category];\\n            foreach ($months as $month) {\\n                $row[$month] = $data[$category][$month];\\n            }\\n            $row['Total'] = $data[$category]['Total'];\\n            $row['Moyenne'] = $data[$category]['Moyenne'];\\n            $row['Référence'] = $data[$category]['Référence'];\\n            $tabulatorData[] = $row;\\n        }\\n\\n        $viewData = [\\n            'tabulatorData' => $tabulatorData,\\n            'currentYear' => $currentYear,\\n        ];\\n\\n        return view('pages.backend.prestations.suivi-optique', compact('tabulatorData', 'prestationsGroupedByAdherent', 'currentYear', 'prestationsAll', 'months' , 'data'));\\n    }\\n\\n \\n\\n\\n     \\n\\n    \\n   \\n    \\n    public function suiviMaternite(Request $request)\\n    {\\n\\n        $currentYear = $request->input('year', Carbon::now()->year);\\n        $adherentCodes = Adherent::pluck('code_carte')->toArray();\\n        $prestationsAdherents = Prestation::join('adherents', 'prestations.adherentCode', '=', 'adherents.code_carte')\\n            ->whereYear('prestations.created_at', $currentYear)\\n            ->select('prestations.*', 'adherents.id as adherent_id')\\n            ->get();\\n\\n        $prestationsAyantsDroit = Prestation::join('ayant_droits', 'prestations.adherentCode', '=', 'ayant_droits.code')\\n            ->join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('prestations.created_at', $currentYear)\\n            ->select('prestations.*', 'adherents.id as adherent_id')\\n            ->distinct()\\n            ->get();\\n\\n        \\n\\n        $prestationsAll = $prestationsAdherents->merge($prestationsAyantsDroit);\\n\\n\\n        $prestationsGroupedByAdherent = $prestationsAll->groupBy('adherent_id');\\n\\n        $adherents = Adherent::whereYear('date_enregistrement', $currentYear)->get();\\n        $ayantsDroit = AyantDroit::join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('adherents.date_enregistrement', $currentYear)\\n            ->select('ayant_droits.*')\\n            ->get();\\n        $prestations = Prestation::whereYear('created_at', $currentYear)->get();\\n        $categories = [\\n            'Nombre de nouveaux bénéficiaires',\\n            'Nombre de bénéficiaires (A)',\\n            'Nombre moyen de bénéficiaire (A1)',\\n            'Nombre de maternites (B)',\\n            'Nombre de maternites Cumulée (B1)',\\n            'Taux d’utilisation mensuel % C (C)',\\n            'Taux d’utilisation cumulée %(D)',\\n            'Coût total des maternites (E)',\\n            'Coût Cumulé total des maternites (E1)',\\n            'Coût moyen mensuel d’une maternite (F)',\\n            'Coût moyen cumulé d’une maternite (G)'\\n        ];\\n\\n        $months = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];\\n\\n        $data = [];\\n        $maternitesCumulative = 0;\\n        $coutCumulative = 0;\\n        $beneficiairesCumulative = 0;\\n        $totalCoutCumulative = 0;\\n\\n        foreach ($categories as $category) {\\n            foreach ($months as $month) {\\n                $data[$category][$month] = 0;\\n            }\\n            $data[$category]['Total'] = 0;\\n            $data[$category]['Moyenne'] = 0;\\n            $data[$category]['Référence'] = '';\\n        }\\n\\n        // Nombre de bénéficiaires (adhérents + ayants droit)\\n        foreach ($adherents as $adherent) {\\n            $date = Carbon::parse($adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        foreach ($ayantsDroit as $ayantDroit) {\\n            $date = Carbon::parse($ayantDroit->adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre de bénéficiaires (A) par mois\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        // Calcul du cumul des bénéficiaires pour chaque mois\\n        foreach ($months as $index => $month) {\\n            $beneficiairesCumulative += $data['Nombre de bénéficiaires (A)'][$month];\\n            $data['Nombre de bénéficiaires (A)'][$month] = $beneficiairesCumulative;\\n\\n            // Calculer A1 = A / nombre de mois déjà écoulés\\n            $data['Nombre moyen de bénéficiaire (A1)'][$month] = floor($beneficiairesCumulative / ($index + 1));\\n            $data['Nombre moyen de bénéficiaire (A1)']['Total'] = $data['Nombre moyen de bénéficiaire (A1)'][$month];\\n        }\\n\\n        // Calculer les statistiques à partir des prestations\\n        foreach ($prestations as $prestation) {\\n            $date = Carbon::parse($prestation->created_at);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre de maternites (B)\\n            if ($prestation->acte == 'maternite') {\\n                $data['Nombre de maternites (B)'][$month]++;\\n                $data['Nombre de maternites (B)']['Total']++;\\n\\n                // Cumul des maternites (B1)\\n                $maternitesCumulative++;\\n                $data['Nombre de maternites Cumulée (B1)'][$month] = $maternitesCumulative;\\n                $data['Nombre de maternites Cumulée (B1)']['Total'] = $maternitesCumulative;\\n\\n                // Coût total des maternites (E)\\n                if (!isset($data['Coût total des maternites (E)'][$month])) {\\n                    $data['Coût total des maternites (E)'][$month] = 0;\\n                }\\n                $data['Coût total des maternites (E)'][$month] += $prestation->montant;\\n                $data['Coût total des maternites (E)']['Total'] += $prestation->montant;\\n\\n                \\n            }\\n        }\\n\\n        // Calculer le cumul par mois pour B1\\n        foreach ($months as $index => $month) {\\n            if ($index > 0) {\\n                $data['Nombre de maternites Cumulée (B1)'][$month] = $data['Nombre de maternites Cumulée (B1)'][$months[$index - 1]] + $data['Nombre de maternites (B)'][$month];\\n            }\\n\\n            // Cumul du coût total des maternites (E1)\\n            if ($index > 0) {\\n                $data['Coût Cumulé total des maternites (E1)'][$month] = $data['Coût Cumulé total des maternites (E1)'][$months[$index - 1]] + $data['Coût total des maternites (E)'][$month];\\n            } else {\\n                $data['Coût Cumulé total des maternites (E1)'][$month] = $data['Coût total des maternites (E)'][$month];\\n            }\\n            $data['Coût Cumulé total des maternites (E1)']['Total'] = $data['Coût Cumulé total des maternites (E1)'][$month] ;        \\n            \\n            // Coût moyen cumulé d’une maternite (G)\\n            if ($data['Nombre de maternites Cumulée (B1)'][$month] > 0) {\\n                $data['Coût moyen cumulé d’une maternite (G)'][$month] = $data['Coût Cumulé total des maternites (E1)'][$month] / $data['Nombre de maternites Cumulée (B1)'][$month];\\n            }\\n        }\\n        if ($data['Nombre de maternites Cumulée (B1)']['Total'] > 0) {\\n            $data['Coût moyen cumulé d’une maternite (G)']['Total'] = $data['Coût Cumulé total des maternites (E1)']['Total']  / $data['Nombre de maternites Cumulée (B1)']['Total'];\\n        } else {\\n            $data['Coût moyen cumulé d’une maternite (G)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes et taux d'utilisation\\n        foreach ($months as $index => $month) {\\n            $previousMonths = $index + 1;\\n\\n            // Taux d’utilisation mensuel % (C)\\n            if ($data['Nombre de bénéficiaires (A)'][$month] > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)'][$month] = number_format(($data['Nombre de maternites (B)'][$month] / $data['Nombre de bénéficiaires (A)'][$month])*$previousMonths * 100, 2);\\n            }\\n            if ($beneficiairesCumulative > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = number_format(($maternitesCumulative / $beneficiairesCumulative)*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = 0;\\n            }\\n            // Taux d’utilisation cumulée % (D)\\n            if ($data['Nombre moyen de bénéficiaire (A1)'][$month] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)'][$month] = number_format(($data['Nombre de maternites Cumulée (B1)'][$month] / $data['Nombre moyen de bénéficiaire (A1)'][$month])*$previousMonths * 100, 2);\\n            \\n            }\\n            if ($data['Nombre moyen de bénéficiaire (A1)']['Total'] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = number_format(($maternitesCumulative / $data['Nombre moyen de bénéficiaire (A1)']['Total'])*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = 0;\\n            }\\n\\n            // Coût moyen mensuel d’une maternite (F)\\n            if ($data['Nombre de maternites (B)'][$month] > 0) {\\n                $data['Coût moyen mensuel d’une maternite (F)'][$month] = $data['Coût total des maternites (E)'][$month] / $data['Nombre de maternites (B)'][$month];\\n            }\\n\\n\\n            \\n        }\\n        if ($data['Nombre de maternites (B)']['Total'] > 0) {\\n            $data['Coût moyen mensuel d’une maternite (F)']['Total'] = $data['Coût total des maternites (E)']['Total']  / $data['Nombre de maternites (B)']['Total'];\\n        } else {\\n            $data['Coût moyen mensuel d’une maternite (F)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes totales pour chaque catégorie\\n        foreach ($categories as $category) {\\n            $data[$category]['Moyenne'] = number_format($data[$category]['Total'] / count($months), 2, ',', ' ');\\n        }\\n\\n        // Convertir les données pour Tabulator\\n        $tabulatorData = [];\\n        foreach ($categories as $category) {\\n            $row = ['Category' => $category];\\n            foreach ($months as $month) {\\n                $row[$month] = $data[$category][$month];\\n            }\\n            $row['Total'] = $data[$category]['Total'];\\n            $row['Moyenne'] = $data[$category]['Moyenne'];\\n            $row['Référence'] = $data[$category]['Référence'];\\n            $tabulatorData[] = $row;\\n        }\\n\\n        $viewData = [\\n            'tabulatorData' => $tabulatorData,\\n            'currentYear' => $currentYear,\\n        ];\\n\\n        return view('pages.backend.prestations.suivi-maternite', compact('tabulatorData', 'prestationsGroupedByAdherent', 'currentYear', 'prestationsAll', 'months' , 'data'));\\n    }\\n    \\n\\n    public function suiviAllocation(Request $request)\\n    {\\n\\n        $currentYear = $request->input('year', Carbon::now()->year);\\n        $adherentCodes = Adherent::pluck('code_carte')->toArray();\\n        $prestationsAdherents = Prestation::join('adherents', 'prestations.adherentCode', '=', 'adherents.code_carte')\\n            ->whereYear('prestations.created_at', $currentYear)\\n            ->select('prestations.*', 'adherents.id as adherent_id')\\n            ->get();\\n\\n        $prestationsAyantsDroit = Prestation::join('ayant_droits', 'prestations.adherentCode', '=', 'ayant_droits.code')\\n            ->join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('prestations.created_at', $currentYear)\\n            ->select('prestations.*', 'adherents.id as adherent_id')\\n            ->distinct()\\n            ->get();\\n\\n        \\n\\n        $prestationsAll = $prestationsAdherents->merge($prestationsAyantsDroit);\\n\\n\\n        $prestationsGroupedByAdherent = $prestationsAll->groupBy('adherent_id');\\n\\n        $adherents = Adherent::whereYear('date_enregistrement', $currentYear)->get();\\n        $ayantsDroit = AyantDroit::join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('adherents.date_enregistrement', $currentYear)\\n            ->select('ayant_droits.*')\\n            ->get();\\n        $prestations = Prestation::whereYear('created_at', $currentYear)->get();\\n        $categories = [\\n            'Nombre de nouveaux bénéficiaires',\\n            'Nombre de bénéficiaires (A)',\\n            'Nombre moyen de bénéficiaire (A1)',\\n            'Nombre d’allocations (B)',\\n            'Nombre d’allocations Cumulée (B1)',\\n            'Taux d’utilisation mensuel % C (C)',\\n            'Taux d’utilisation cumulée %(D)',\\n            'Coût total des allocations (E)',\\n            'Coût Cumulé total des allocations (E1)',\\n            'Coût moyen mensuel d’une allocation (F)',\\n            'Coût moyen cumulé d’une allocation (G)'\\n        ];\\n\\n        $months = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];\\n\\n        $data = [];\\n        $allocationsCumulative = 0;\\n        $coutCumulative = 0;\\n        $beneficiairesCumulative = 0;\\n        $totalCoutCumulative = 0;\\n\\n        foreach ($categories as $category) {\\n            foreach ($months as $month) {\\n                $data[$category][$month] = 0;\\n            }\\n            $data[$category]['Total'] = 0;\\n            $data[$category]['Moyenne'] = 0;\\n            $data[$category]['Référence'] = '';\\n        }\\n\\n        // Nombre de bénéficiaires (adhérents + ayants droit)\\n        foreach ($adherents as $adherent) {\\n            $date = Carbon::parse($adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        foreach ($ayantsDroit as $ayantDroit) {\\n            $date = Carbon::parse($ayantDroit->adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre de bénéficiaires (A) par mois\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        // Calcul du cumul des bénéficiaires pour chaque mois\\n        foreach ($months as $index => $month) {\\n            $beneficiairesCumulative += $data['Nombre de bénéficiaires (A)'][$month];\\n            $data['Nombre de bénéficiaires (A)'][$month] = $beneficiairesCumulative;\\n\\n            // Calculer A1 = A / nombre de mois déjà écoulés\\n            $data['Nombre moyen de bénéficiaire (A1)'][$month] = floor($beneficiairesCumulative / ($index + 1));\\n            $data['Nombre moyen de bénéficiaire (A1)']['Total'] = $data['Nombre moyen de bénéficiaire (A1)'][$month];\\n        }\\n\\n        // Calculer les statistiques à partir des prestations\\n        foreach ($prestations as $prestation) {\\n            $date = Carbon::parse($prestation->created_at);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre allocations (B)\\n            if ($prestation->acte == 'allocation') {\\n                $data['Nombre d’allocations (B)'][$month]++;\\n                $data['Nombre d’allocations (B)']['Total']++;\\n\\n                // Cumul des allocations (B1)\\n                $allocationsCumulative++;\\n                $data['Nombre d’allocations Cumulée (B1)'][$month] = $allocationsCumulative;\\n                $data['Nombre d’allocations Cumulée (B1)']['Total'] = $allocationsCumulative;\\n\\n                // Coût total des allocations (E)\\n                if (!isset($data['Coût total des allocations (E)'][$month])) {\\n                    $data['Coût total des allocations (E)'][$month] = 0;\\n                }\\n                $data['Coût total des allocations (E)'][$month] += $prestation->montant;\\n                $data['Coût total des allocations (E)']['Total'] += $prestation->montant;\\n\\n                \\n            }\\n        }\\n\\n        // Calculer le cumul par mois pour B1\\n        foreach ($months as $index => $month) {\\n            if ($index > 0) {\\n                $data['Nombre d’allocations Cumulée (B1)'][$month] = $data['Nombre d’allocations Cumulée (B1)'][$months[$index - 1]] + $data['Nombre d’allocations (B)'][$month];\\n            }\\n\\n            // Cumul du coût total des allocations (E1)\\n            if ($index > 0) {\\n                $data['Coût Cumulé total des allocations (E1)'][$month] = $data['Coût Cumulé total des allocations (E1)'][$months[$index - 1]] + $data['Coût total des allocations (E)'][$month];\\n            } else {\\n                $data['Coût Cumulé total des allocations (E1)'][$month] = $data['Coût total des allocations (E)'][$month];\\n            }\\n            $data['Coût Cumulé total des allocations (E1)']['Total'] = $data['Coût Cumulé total des allocations (E1)'][$month] ;        \\n            \\n            // Coût moyen cumulé d’une allocation (G)\\n            if ($data['Nombre d’allocations Cumulée (B1)'][$month] > 0) {\\n                $data['Coût moyen cumulé d’une allocation (G)'][$month] = $data['Coût Cumulé total des allocations (E1)'][$month] / $data['Nombre d’allocations Cumulée (B1)'][$month];\\n            }\\n        }\\n        if ($data['Nombre d’allocations Cumulée (B1)']['Total'] > 0) {\\n            $data['Coût moyen cumulé d’une allocation (G)']['Total'] = $data['Coût Cumulé total des allocations (E1)']['Total']  / $data['Nombre d’allocations Cumulée (B1)']['Total'];\\n        } else {\\n            $data['Coût moyen cumulé d’une allocation (G)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes et taux d'utilisation\\n        foreach ($months as $index => $month) {\\n            $previousMonths = $index + 1;\\n\\n            // Taux d’utilisation mensuel % (C)\\n            if ($data['Nombre de bénéficiaires (A)'][$month] > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)'][$month] = number_format(($data['Nombre d’allocations (B)'][$month] / $data['Nombre de bénéficiaires (A)'][$month])*$previousMonths * 100, 2);\\n            }\\n            if ($beneficiairesCumulative > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = number_format(($allocationsCumulative / $beneficiairesCumulative)*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = 0;\\n            }\\n            // Taux d’utilisation cumulée % (D)\\n            if ($data['Nombre moyen de bénéficiaire (A1)'][$month] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)'][$month] = number_format(($data['Nombre d’allocations Cumulée (B1)'][$month] / $data['Nombre moyen de bénéficiaire (A1)'][$month])*$previousMonths * 100, 2);\\n            \\n            }\\n            if ($data['Nombre moyen de bénéficiaire (A1)']['Total'] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = number_format(($allocationsCumulative / $data['Nombre moyen de bénéficiaire (A1)']['Total'])*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = 0;\\n            }\\n\\n            // Coût moyen mensuel d’une allocation (F)\\n            if ($data['Nombre d’allocations (B)'][$month] > 0) {\\n                $data['Coût moyen mensuel d’une allocation (F)'][$month] = $data['Coût total des allocations (E)'][$month] / $data['Nombre d’allocations (B)'][$month];\\n            }\\n\\n\\n            \\n        }\\n        if ($data['Nombre d’allocations (B)']['Total'] > 0) {\\n            $data['Coût moyen mensuel d’une allocation (F)']['Total'] = $data['Coût total des allocations (E)']['Total']  / $data['Nombre d’allocation (B)']['Total'];\\n        } else {\\n            $data['Coût moyen mensuel d’une allocation (F)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes totales pour chaque catégorie\\n        foreach ($categories as $category) {\\n            $data[$category]['Moyenne'] = number_format($data[$category]['Total'] / count($months), 2, ',', ' ');\\n        }\\n\\n        // Convertir les données pour Tabulator\\n        $tabulatorData = [];\\n        foreach ($categories as $category) {\\n            $row = ['Category' => $category];\\n            foreach ($months as $month) {\\n                $row[$month] = $data[$category][$month];\\n            }\\n            $row['Total'] = $data[$category]['Total'];\\n            $row['Moyenne'] = $data[$category]['Moyenne'];\\n            $row['Référence'] = $data[$category]['Référence'];\\n            $tabulatorData[] = $row;\\n        }\\n\\n        $viewData = [\\n            'tabulatorData' => $tabulatorData,\\n            'currentYear' => $currentYear,\\n        ];\\n\\n        return view('pages.backend.prestations.suivi-allocation', compact('tabulatorData', 'prestationsGroupedByAdherent', 'currentYear', 'prestationsAll', 'months' , 'data'));\\n    }\\n \\n public function ImageToDataUrl(String $filename): String \\n    {\\n        if (!file_exists($filename)) {\\n            throw new Exception('File not found.');\\n        }\\n\\n        $mime = mime_content_type($filename);\\n        if ($mime === false) {\\n            throw new Exception('Illegal MIME type.');\\n        }\\n\\n        $raw_data = file_get_contents($filename);\\n        if (empty($raw_data)) {\\n            throw new Exception('File not readable or empty.');\\n        }\\n\\n        return \\\"data:{$mime};base64,\\\" . base64_encode($raw_data);\\n    }\\n\\n    public function downloadReceipt($id)\\n    {\\n        $prestation = Prestation::findOrFail($id);\\n\\n        $data = [\\n            'prestation' => $prestation,\\n            'logoPath' => public_path('images/logofinal.png'),\\n        ];\\n        return PDFHelper::downloadPDF('pages.backend.prestations.prestation', $data, 'Recu_paiement_' . $prestation->id);\\n    }\\n    \\n    public function suivi(Request $request)\\n    {\\n\\n        $currentYear = $request->input('year', Carbon::now()->year);\\n        $adherentCodes = Adherent::pluck('code_carte')->toArray();\\n        $prestationsAdherents = Prestation::join('adherents', 'prestations.adherentCode', '=', 'adherents.code_carte')\\n            ->whereYear('prestations.created_at', $currentYear)\\n            ->select('prestations.*', 'adherents.id as adherent_id')\\n            ->get();\\n\\n        $prestationsAyantsDroit = Prestation::join('ayant_droits', 'prestations.adherentCode', '=', 'ayant_droits.code')\\n            ->join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('prestations.created_at', $currentYear)\\n            ->select('prestations.*', 'adherents.id as adherent_id')\\n            ->distinct()\\n            ->get();\\n\\n        \\n\\n        $prestationsAll = $prestationsAdherents->merge($prestationsAyantsDroit);\\n\\n\\n        $prestationsGroupedByAdherent = $prestationsAll->groupBy('adherent_id');\\n\\n        $adherents = Adherent::whereYear('date_enregistrement', $currentYear)->get();\\n        $ayantsDroit = AyantDroit::join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('adherents.date_enregistrement', $currentYear)\\n            ->select('ayant_droits.*')\\n            ->get();\\n        $prestations = Prestation::whereYear('created_at', $currentYear)->get();\\n        $categories = [\\n            'Nombre de nouveaux bénéficiaires',\\n            'Nombre de bénéficiaires (A)',\\n            'Nombre moyen de bénéficiaire (A1)',\\n            'Nombre d’hospitalisation (B)',\\n            'Nombre d’hospitalisation Cumulée (B1)',\\n            'Taux d’utilisation mensuel % C (C)',\\n            'Taux d’utilisation cumulée %(D)',\\n            'Coût total des hospitalisations (E)',\\n            'Coût Cumulé total des hospitalisations (E1)',\\n            'Coût moyen mensuel d’une hospitalisation (F)',\\n            'Coût moyen cumulé d’une hospitalisation (G)'\\n        ];\\n\\n        $months = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];\\n\\n        $data = [];\\n        $hospitalisationsCumulative = 0;\\n        $coutCumulative = 0;\\n        $beneficiairesCumulative = 0;\\n        $totalCoutCumulative = 0;\\n\\n        foreach ($categories as $category) {\\n            foreach ($months as $month) {\\n                $data[$category][$month] = 0;\\n            }\\n            $data[$category]['Total'] = 0;\\n            $data[$category]['Moyenne'] = 0;\\n            $data[$category]['Référence'] = '';\\n        }\\n\\n        // Nombre de bénéficiaires (adhérents + ayants droit)\\n        foreach ($adherents as $adherent) {\\n            $date = Carbon::parse($adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        foreach ($ayantsDroit as $ayantDroit) {\\n            $date = Carbon::parse($ayantDroit->adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre de bénéficiaires (A) par mois\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        // Calcul du cumul des bénéficiaires pour chaque mois\\n        foreach ($months as $index => $month) {\\n            $beneficiairesCumulative += $data['Nombre de bénéficiaires (A)'][$month];\\n            $data['Nombre de bénéficiaires (A)'][$month] = $beneficiairesCumulative;\\n\\n            // Calculer A1 = A / nombre de mois déjà écoulés\\n            $data['Nombre moyen de bénéficiaire (A1)'][$month] = floor($beneficiairesCumulative / ($index + 1));\\n            $data['Nombre moyen de bénéficiaire (A1)']['Total'] = $data['Nombre moyen de bénéficiaire (A1)'][$month];\\n        }\\n\\n        // Calculer les statistiques à pfartir des prestations\\n        foreach ($prestations as $prestation) {\\n            $date = Carbon::parse($prestation->created_at);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre d’hospitalisations (B)\\n            if ($prestation->acte == 'hospitalisation') {\\n                $data['Nombre d’hospitalisation (B)'][$month]++;\\n                $data['Nombre d’hospitalisation (B)']['Total']++;\\n\\n                // Cumul des hospitalisations (B1)\\n                $hospitalisationsCumulative++;\\n                $data['Nombre d’hospitalisation Cumulée (B1)'][$month] = $hospitalisationsCumulative;\\n                $data['Nombre d’hospitalisation Cumulée (B1)']['Total'] = $hospitalisationsCumulative;\\n\\n                // Coût total des hospitalisations (E)\\n                if (!isset($data['Coût total des hospitalisations (E)'][$month])) {\\n                    $data['Coût total des hospitalisations (E)'][$month] = 0;\\n                }\\n                $data['Coût total des hospitalisations (E)'][$month] += $prestation->montant;\\n                $data['Coût total des hospitalisations (E)']['Total'] += $prestation->montant;\\n\\n                \\n            }\\n        }\\n\\n        // Calculer le cumul par mois pour B1\\n        foreach ($months as $index => $month) {\\n            if ($index > 0) {\\n                $data['Nombre d’hospitalisation Cumulée (B1)'][$month] = $data['Nombre d’hospitalisation Cumulée (B1)'][$months[$index - 1]] + $data['Nombre d’hospitalisation (B)'][$month];\\n            }\\n\\n            // Cumul du coût total des hospitalisations (E1)\\n            if ($index > 0) {\\n                $data['Coût Cumulé total des hospitalisations (E1)'][$month] = $data['Coût Cumulé total des hospitalisations (E1)'][$months[$index - 1]] + $data['Coût total des hospitalisations (E)'][$month];\\n            } else {\\n                $data['Coût Cumulé total des hospitalisations (E1)'][$month] = $data['Coût total des hospitalisations (E)'][$month];\\n            }\\n            $data['Coût Cumulé total des hospitalisations (E1)']['Total'] = $data['Coût Cumulé total des hospitalisations (E1)'][$month] ;        \\n            \\n            // Coût moyen cumulé d’une hospitalisation (G)\\n            if ($data['Nombre d’hospitalisation Cumulée (B1)'][$month] > 0) {\\n                $data['Coût moyen cumulé d’une hospitalisation (G)'][$month] = $data['Coût Cumulé total des hospitalisations (E1)'][$month] / $data['Nombre d’hospitalisation Cumulée (B1)'][$month];\\n            }\\n        }\\n        if ($data['Nombre d’hospitalisation Cumulée (B1)']['Total'] > 0) {\\n            $data['Coût moyen cumulé d’une hospitalisation (G)']['Total'] = $data['Coût Cumulé total des hospitalisations (E1)']['Total']  / $data['Nombre d’hospitalisation Cumulée (B1)']['Total'];\\n        } else {\\n            $data['Coût moyen cumulé d’une hospitalisation (G)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes et taux d'utilisation\\n        foreach ($months as $index => $month) {\\n            $previousMonths = $index + 1;\\n\\n            // Taux d’utilisation mensuel % (C)\\n            if ($data['Nombre de bénéficiaires (A)'][$month] > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)'][$month] = number_format(($data['Nombre d’hospitalisation (B)'][$month] / $data['Nombre de bénéficiaires (A)'][$month])*$previousMonths * 100, 2);\\n            }\\n            if ($beneficiairesCumulative > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = number_format(($hospitalisationsCumulative / $beneficiairesCumulative)*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = 0;\\n            }\\n            // Taux d’utilisation cumulée % (D)\\n            if ($data['Nombre moyen de bénéficiaire (A1)'][$month] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)'][$month] = number_format(($data['Nombre d’hospitalisation Cumulée (B1)'][$month] / $data['Nombre moyen de bénéficiaire (A1)'][$month])*$previousMonths * 100, 2);\\n            \\n            }\\n            if ($data['Nombre moyen de bénéficiaire (A1)']['Total'] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = number_format(($hospitalisationsCumulative / $data['Nombre moyen de bénéficiaire (A1)']['Total'])*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = 0;\\n            }\\n\\n            // Coût moyen mensuel d’une hospitalisation (F)\\n            if ($data['Nombre d’hospitalisation (B)'][$month] > 0) {\\n                $data['Coût moyen mensuel d’une hospitalisation (F)'][$month] = $data['Coût total des hospitalisations (E)'][$month] / $data['Nombre d’hospitalisation (B)'][$month];\\n            }\\n\\n\\n            \\n        }\\n        if ($data['Nombre d’hospitalisation (B)']['Total'] > 0) {\\n            $data['Coût moyen mensuel d’une hospitalisation (F)']['Total'] = $data['Coût total des hospitalisations (E)']['Total']  / $data['Nombre d’hospitalisation (B)']['Total'];\\n        } else {\\n            $data['Coût moyen mensuel d’une hospitalisation (F)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes totales pour chaque catégorie\\n        foreach ($categories as $category) {\\n            $data[$category]['Moyenne'] = number_format($data[$category]['Total'] / count($months), 2, ',', ' ');\\n        }\\n\\n        // Convertir les données pour Tabulator\\n        $tabulatorData = [];\\n        foreach ($categories as $category) {\\n            $row = ['Category' => $category];\\n            foreach ($months as $month) {\\n                $row[$month] = $data[$category][$month];\\n            }\\n            $row['Total'] = $data[$category]['Total'];\\n            $row['Moyenne'] = $data[$category]['Moyenne'];\\n            $row['Référence'] = $data[$category]['Référence'];\\n            $tabulatorData[] = $row;\\n        }\\n\\n        $viewData = [\\n            'tabulatorData' => $tabulatorData,\\n            'currentYear' => $currentYear,\\n        ];\\n\\n        return view('pages.backend.prestations.suivi', compact('tabulatorData', 'prestationsGroupedByAdherent', 'currentYear', 'prestationsAll', 'months' , 'data'));\\n    }\\n\\n    public function suiviConsultation(Request $request)\\n    {\\n\\n        $currentYear = $request->input('year', Carbon::now()->year);\\n        $adherentCodes = Adherent::pluck('code_carte')->toArray();\\n\\n        $adherents = Adherent::whereYear('date_enregistrement', $currentYear)->get();\\n        $ayantsDroit = AyantDroit::join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('adherents.date_enregistrement', $currentYear)\\n            ->select('ayant_droits.*')\\n            ->get();\\n        $prestations = Prestation::whereYear('created_at', $currentYear)->get();\\n        $categories = [\\n            'Nombre de nouveaux bénéficiaires',\\n            'Nombre de bénéficiaires (A)',\\n            'Nombre moyen de bénéficiaire (A1)',\\n            'Nombre de consultation (B)',\\n            'Nombre de consultation Cumulée (B1)',\\n            'Taux d’utilisation mensuel % C (C)',\\n            'Taux d’utilisation cumulée %(D)',\\n            'Coût total des consultations (E)',\\n            'Coût Cumulé total des consultations (E1)',\\n            'Coût moyen mensuel d’une consultation (F)',\\n            'Coût moyen cumulé d’une consultation (G)'\\n        ];\\n\\n        $months = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];\\n\\n        $data = [];\\n        $consultationsCumulative = 0;\\n        $coutCumulative = 0;\\n        $beneficiairesCumulative = 0;\\n        $totalCoutCumulative = 0;\\n\\n        foreach ($categories as $category) {\\n            foreach ($months as $month) {\\n                $data[$category][$month] = 0;\\n            }\\n            $data[$category]['Total'] = 0;\\n            $data[$category]['Moyenne'] = 0;\\n            $data[$category]['Référence'] = '';\\n        }\\n\\n        // Nombre de bénéficiaires (adhérents + ayants droit)\\n        foreach ($adherents as $adherent) {\\n            $date = Carbon::parse($adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        foreach ($ayantsDroit as $ayantDroit) {\\n            $date = Carbon::parse($ayantDroit->adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre de bénéficiaires (A) par mois\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n            \\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        // Calcul du cumul des bénéficiaires pour chaque mois\\n        foreach ($months as $index => $month) {\\n            $beneficiairesCumulative += $data['Nombre de bénéficiaires (A)'][$month];\\n            $data['Nombre de bénéficiaires (A)'][$month] = $beneficiairesCumulative;\\n\\n            // Calculer A1 = A / nombre de mois déjà écoulés\\n            $data['Nombre moyen de bénéficiaire (A1)'][$month] = floor($beneficiairesCumulative / ($index + 1));\\n            $data['Nombre moyen de bénéficiaire (A1)']['Total'] = $data['Nombre moyen de bénéficiaire (A1)'][$month];\\n        }\\n\\n        // Calculer les statistiques à partir des prestations\\n        foreach ($prestations as $prestation) {\\n            $date = Carbon::parse($prestation->created_at);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre de consultation (B)\\n            if ($prestation->acte == 'consultation') {\\n                $data['Nombre de consultation (B)'][$month]++;\\n                $data['Nombre de consultation (B)']['Total']++;\\n\\n                // Cumul des hospitalisations (B1)\\n                $consultationsCumulative++;\\n                $data['Nombre de consultation Cumulée (B1)'][$month] = $consultationsCumulative;\\n                $data['Nombre de consultation Cumulée (B1)']['Total'] = $consultationsCumulative;\\n\\n                // Coût total des hospitalisations (E)\\n                if (!isset($data['Coût total des consultations (E)'][$month])) {\\n                    $data['Coût total des consultations (E)'][$month] = 0;\\n                }\\n                $data['Coût total des consultations (E)'][$month] += $prestation->montant;\\n                $data['Coût total des consultations (E)']['Total'] += $prestation->montant;\\n\\n                \\n            }\\n        }\\n\\n        // Calculer le cumul par mois pour B1\\n        foreach ($months as $index => $month) {\\n            if ($index > 0) {\\n                $data['Nombre de consultation Cumulée (B1)'][$month] = $data['Nombre de consultation Cumulée (B1)'][$months[$index - 1]] + $data['Nombre de consultation (B)'][$month];\\n            }\\n\\n            // Cumul du coût total des consultations (E1)\\n            if ($index > 0) {\\n                $data['Coût Cumulé total des consultations (E1)'][$month] = $data['Coût Cumulé total des consultations (E1)'][$months[$index - 1]] + $data['Coût total des consultations (E)'][$month];\\n            } else {\\n                $data['Coût Cumulé total des consultations (E1)'][$month] = $data['Coût total des consultations (E)'][$month];\\n            }\\n            $data['Coût Cumulé total des consultations (E1)']['Total'] = $data['Coût Cumulé total des consultations (E1)'][$month] ;        \\n            \\n            // Coût moyen cumulé d’une consultations (G)\\n            if ($data['Nombre de consultation Cumulée (B1)'][$month] > 0) {\\n                $data['Coût moyen cumulé d’une consultation (G)'][$month] = $data['Coût Cumulé total des consultations (E1)'][$month] / $data['Nombre de consultation Cumulée (B1)'][$month];\\n            }\\n        }\\n        if ($data['Nombre de consultation Cumulée (B1)']['Total'] > 0) {\\n            $data['Coût moyen cumulé d’une consultation (G)']['Total'] = $data['Coût Cumulé total des consultations (E1)']['Total']  / $data['Nombre de consultation Cumulée (B1)']['Total'];\\n        } else {\\n            $data['Coût moyen cumulé d’une consultation (G)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes et taux d'utilisation\\n        foreach ($months as $index => $month) {\\n            $previousMonths = $index + 1;\\n\\n            // Taux d’utilisation mensuel % (C)\\n            if ($data['Nombre de bénéficiaires (A)'][$month] > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)'][$month] = number_format(($data['Nombre de consultation (B)'][$month] / $data['Nombre de bénéficiaires (A)'][$month])*$previousMonths * 100, 2);\\n            }\\n            if ($beneficiairesCumulative > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = number_format(($consultationsCumulative / $beneficiairesCumulative)*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = 0;\\n            }\\n            // Taux d’utilisation cumulée % (D)\\n            if ($data['Nombre moyen de bénéficiaire (A1)'][$month] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)'][$month] = number_format(($data['Nombre de consultation Cumulée (B1)'][$month] / $data['Nombre moyen de bénéficiaire (A1)'][$month])*$previousMonths * 100, 2);\\n            \\n            }\\n            if ($data['Nombre moyen de bénéficiaire (A1)']['Total'] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = number_format(($consultationsCumulative / $data['Nombre moyen de bénéficiaire (A1)']['Total'])*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = 0;\\n            }\\n\\n            // Coût moyen mensuel d’une consultation (F)\\n            if ($data['Nombre de consultation (B)'][$month] > 0) {\\n                $data['Coût moyen mensuel d’une consultation (F)'][$month] = $data['Coût total des consultations (E)'][$month] / $data['Nombre de consultation (B)'][$month];\\n            }\\n\\n\\n            \\n        }\\n        if ($data['Nombre de consultation (B)']['Total'] > 0) {\\n            $data['Coût moyen mensuel d’une consultation (F)']['Total'] = $data['Coût total des consultations (E)']['Total']  / $data['Nombre de consultation (B)']['Total'];\\n        } else {\\n            $data['Coût moyen mensuel d’une consultation (F)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes totales pour chaque catégorie\\n        foreach ($categories as $category) {\\n            $data[$category]['Moyenne'] = number_format($data[$category]['Total'] / count($months), 2, ',', ' ');\\n        }\\n\\n        // Convertir les données pour Tabulator\\n        $tabulatorData = [];\\n        foreach ($categories as $category) {\\n            $row = ['Category' => $category];\\n            foreach ($months as $month) {\\n                $row[$month] = $data[$category][$month];\\n            }\\n            $row['Total'] = $data[$category]['Total'];\\n            $row['Moyenne'] = $data[$category]['Moyenne'];\\n            $row['Référence'] = $data[$category]['Référence'];\\n            $tabulatorData[] = $row;\\n        }\\n\\n        $viewData = [\\n            'tabulatorData' => $tabulatorData,\\n            'currentYear' => $currentYear,\\n        ];\\n\\n        return view('pages.backend.prestations.suivi-consultation', compact('tabulatorData', 'currentYear', 'months' , 'data'));\\n    }\\n\\n\\n    public function suiviRadio(Request $request)\\n    {\\n\\n        $currentYear = $request->input('year', Carbon::now()->year);\\n        $adherentCodes = Adherent::pluck('code_carte')->toArray();\\n        $prestationsAdherents = Prestation::join('adherents', 'prestations.adherentCode', '=', 'adherents.code_carte')\\n            ->whereYear('prestations.created_at', $currentYear)\\n            ->select('prestations.*', 'adherents.id as adherent_id')\\n            ->get();\\n\\n        $prestationsAyantsDroit = Prestation::join('ayant_droits', 'prestations.adherentCode', '=', 'ayant_droits.code')\\n            ->join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('prestations.created_at', $currentYear)\\n            ->select('prestations.*', 'adherents.id as adherent_id')\\n            ->distinct()\\n            ->get();\\n\\n        \\n\\n        $prestationsAll = $prestationsAdherents->merge($prestationsAyantsDroit);\\n\\n\\n        $prestationsGroupedByAdherent = $prestationsAll->groupBy('adherent_id');\\n\\n        $adherents = Adherent::whereYear('date_enregistrement', $currentYear)->get();\\n        $ayantsDroit = AyantDroit::join('adherents', 'ayant_droits.adherent_id', '=', 'adherents.id')\\n            ->whereYear('adherents.date_enregistrement', $currentYear)\\n            ->select('ayant_droits.*')\\n            ->get();\\n        $prestations = Prestation::whereYear('created_at', $currentYear)->get();\\n        $categories = [\\n            'Nombre de nouveaux bénéficiaires',\\n            'Nombre de bénéficiaires (A)',\\n            'Nombre moyen de bénéficiaire (A1)',\\n            'Nombre de radios (B)',\\n            'Nombre de radios Cumulée (B1)',\\n            'Taux d’utilisation mensuel % C (C)',\\n            'Taux d’utilisation cumulée %(D)',\\n            'Coût total des radios (E)',\\n            'Coût Cumulé total des radios (E1)',\\n            'Coût moyen mensuel d’une radio (F)',\\n            'Coût moyen cumulé d’une radio (G)'\\n        ];\\n\\n        $months = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];\\n\\n        $data = [];\\n        $radiosCumulative = 0;\\n        $coutCumulative = 0;\\n        $beneficiairesCumulative = 0;\\n        $totalCoutCumulative = 0;\\n\\n        foreach ($categories as $category) {\\n            foreach ($months as $month) {\\n                $data[$category][$month] = 0;\\n            }\\n            $data[$category]['Total'] = 0;\\n            $data[$category]['Moyenne'] = 0;\\n            $data[$category]['Référence'] = '';\\n        }\\n\\n        // Nombre de bénéficiaires (adhérents + ayants droit)\\n        foreach ($adherents as $adherent) {\\n            $date = Carbon::parse($adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        foreach ($ayantsDroit as $ayantDroit) {\\n            $date = Carbon::parse($ayantDroit->adherent->date_enregistrement);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre de bénéficiaires (A) par mois\\n            $data['Nombre de nouveaux bénéficiaires'][$month]++;\\n            $data['Nombre de nouveaux bénéficiaires']['Total']++;\\n\\n            $data['Nombre de bénéficiaires (A)'][$month]++;\\n            $data['Nombre de bénéficiaires (A)']['Total']++;\\n        }\\n\\n        // Calcul du cumul des bénéficiaires pour chaque mois\\n        foreach ($months as $index => $month) {\\n            $beneficiairesCumulative += $data['Nombre de bénéficiaires (A)'][$month];\\n            $data['Nombre de bénéficiaires (A)'][$month] = $beneficiairesCumulative;\\n\\n            // Calculer A1 = A / nombre de mois déjà écoulés\\n            $data['Nombre moyen de bénéficiaire (A1)'][$month] = floor($beneficiairesCumulative / ($index + 1));\\n            $data['Nombre moyen de bénéficiaire (A1)']['Total'] = $data['Nombre moyen de bénéficiaire (A1)'][$month];\\n        }\\n\\n        // Calculer les statistiques à partir des prestations\\n        foreach ($prestations as $prestation) {\\n            $date = Carbon::parse($prestation->created_at);\\n            $month = $months[$date->month - 1];\\n\\n            // Nombre de radios (B)\\n            if ($prestation->acte == 'radio') {\\n                $data['Nombre de radios (B)'][$month]++;\\n                $data['Nombre de radios (B)']['Total']++;\\n\\n                // Cumul des radios (B1)\\n                $radiosCumulative++;\\n                $data['Nombre de radios Cumulée (B1)'][$month] = $radiosCumulative;\\n                $data['Nombre de radios Cumulée (B1)']['Total'] = $radiosCumulative;\\n\\n                // Coût total des radios (E)\\n                if (!isset($data['Coût total des radios (E)'][$month])) {\\n                    $data['Coût total des radios (E)'][$month] = 0;\\n                }\\n                $data['Coût total des radios (E)'][$month] += $prestation->montant;\\n                $data['Coût total des radios (E)']['Total'] += $prestation->montant;\\n\\n                \\n            }\\n        }\\n\\n        // Calculer le cumul par mois pour B1\\n        foreach ($months as $index => $month) {\\n            if ($index > 0) {\\n                $data['Nombre de radios Cumulée (B1)'][$month] = $data['Nombre de radios Cumulée (B1)'][$months[$index - 1]] + $data['Nombre de radios (B)'][$month];\\n            }\\n\\n            // Cumul du coût total des radios (E1)\\n            if ($index > 0) {\\n                $data['Coût Cumulé total des radios (E1)'][$month] = $data['Coût Cumulé total des radios (E1)'][$months[$index - 1]] + $data['Coût total des radios (E)'][$month];\\n            } else {\\n                $data['Coût Cumulé total des radios (E1)'][$month] = $data['Coût total des radios (E)'][$month];\\n            }\\n            $data['Coût Cumulé total des radios (E1)']['Total'] = $data['Coût Cumulé total des radios (E1)'][$month] ;        \\n            \\n            // Coût moyen cumulé d’une radio (G)\\n            if ($data['Nombre de radios Cumulée (B1)'][$month] > 0) {\\n                $data['Coût moyen cumulé de radios (G)'][$month] = $data['Coût Cumulé total des radios (E1)'][$month] / $data['Nombre de radios Cumulée (B1)'][$month];\\n            }\\n        }\\n        if ($data['Nombre de radios Cumulée (B1)']['Total'] > 0) {\\n            $data['Coût moyen cumulé d’une radio (G)']['Total'] = $data['Coût Cumulé total des radios (E1)']['Total']  / $data['Nombre de radios Cumulée (B1)']['Total'];\\n        } else {\\n            $data['Coût moyen cumulé d’une radio (G)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes et taux d'utilisation\\n        foreach ($months as $index => $month) {\\n            $previousMonths = $index + 1;\\n\\n            // Taux d’utilisation mensuel % (C)\\n            if ($data['Nombre de bénéficiaires (A)'][$month] > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)'][$month] = number_format(($data['Nombre de radios (B)'][$month] / $data['Nombre de bénéficiaires (A)'][$month])*$previousMonths * 100, 2);\\n            }\\n            if ($beneficiairesCumulative > 0) {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = number_format(($radiosCumulative / $beneficiairesCumulative)*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation mensuel % C (C)']['Total'] = 0;\\n            }\\n            // Taux d’utilisation cumulée % (D)\\n            if ($data['Nombre moyen de bénéficiaire (A1)'][$month] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)'][$month] = number_format(($data['Nombre de radios Cumulée (B1)'][$month] / $data['Nombre moyen de bénéficiaire (A1)'][$month])*$previousMonths * 100, 2);\\n            \\n            }\\n            if ($data['Nombre moyen de bénéficiaire (A1)']['Total'] > 0) {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = number_format(($radiosCumulative / $data['Nombre moyen de bénéficiaire (A1)']['Total'])*12 * 100, 2);\\n            } else {\\n                $data['Taux d’utilisation cumulée %(D)']['Total'] = 0;\\n            }\\n\\n            // Coût moyen mensuel d’une radio (F)\\n            if ($data['Nombre de radios (B)'][$month] > 0) {\\n                $data['Coût moyen mensuel d’une radio (F)'][$month] = $data['Coût total des radios (E)'][$month] / $data['Nombre de radios (B)'][$month];\\n            }\\n\\n\\n            \\n        }\\n        if ($data['Nombre de radios (B)']['Total'] > 0) {\\n            $data['Coût moyen mensuel d’une radio (F)']['Total'] = $data['Coût total des radios (E)']['Total']  / $data['Nombre de radios (B)']['Total'];\\n        } else {\\n            $data['Coût moyen mensuel d’une radio (F)']['Total'] = 0;\\n        }\\n\\n        // Calcul des moyennes totales pour chaque catégorie\\n        foreach ($categories as $category) {\\n            $data[$category]['Moyenne'] = number_format($data[$category]['Total'] / count($months), 2, ',', ' ');\\n        }\\n\\n        // Convertir les données pour Tabulator\\n        $tabulatorData = [];\\n        foreach ($categories as $category) {\\n            $row = ['Category' => $category];\\n            foreach ($months as $month) {\\n                $row[$month] = $data[$category][$month];\\n            }\\n            $row['Total'] = $data[$category]['Total'];\\n            $row['Moyenne'] = $data[$category]['Moyenne'];\\n            $row['Référence'] = $data[$category]['Référence'];\\n            $tabulatorData[] = $row;\\n        }\\n\\n        $viewData = [\\n            'tabulatorData' => $tabulatorData,\\n            'currentYear' => $currentYear,\\n        ];\\n\\n        return view('pages.backend.prestations.suivi-radio', compact('tabulatorData', 'prestationsGroupedByAdherent', 'currentYear', 'prestationsAll', 'months' , 'data'));\\n    }\\n \\n\\n    /**\\n     * Remove the specified resource from storage.\\n     */\\n    public function destroy(Prestation $prestation)\\n    {\\n        //\\n    }\\n\\n    public function valider($id)\\n    {\\n        $prestation = Prestation::findOrFail($id);\\n        $prestation->validite = 'accepté'; \\n\\n        $prestation->save();\\n\\n        return redirect()->route('prestations.index')->with('success', 'La prestation a été validée avec succès.');\\n    }\\n    public function rejeter($id)\\n    {\\n        $prestation = Prestation::findOrFail($id);\\n        $prestation->validite = 'rejeté'; // Vous pouvez définir 'rejeté', 'en attente', etc., selon vos besoins\\n\\n        $prestation->save();\\n\\n        return redirect()->route('prestations.index')->with('success', 'La prestation a été rejetée.');\\n    }\\n\\n    public function validerPaiement($id)\\n    {\\n        $prestation = Prestation::findOrFail($id);\\n        $prestation->etat_paiement = 1; \\n        $prestation->save();\\n\\n        $categorie = Categorie::where('nom', 'Prestations et dépenses de personnels')->first();\\n        $sousCategorie = Categorie::where('nom', 'Couverture des risques maladies ou accidents')->first();\\n\\n        Depense::create([\\n            'uuid' => (string) Str::uuid(),\\n            'montant' => $prestation->montant,\\n            'description' => 'Dépense pour prestation' , \\n            'categorie_id' => $categorie->uuid, \\n            'sous_categorie_id' => $sousCategorie->uuid, \\n            'date' => $prestation->created_at->format('Y-m-d')\\n        ]);\\n\\n        return redirect()->route('prestations.index')->with('success', 'Le paiement a été validé avec succès.');\\n    }\\n\\n \\n/**\\n     * Display the specified resource.\\n     */\\n    public function show(Prestation $prestation)\\n    {\\n        if (!empty($prestation->preuve)) {\\n            $prestation->preuve = json_decode($prestation->preuve, true) ?? [];\\n        } else {\\n            $prestation->preuve = [];\\n        }\\n        \\n        $montantModerateur = (($prestation->montant*20)/100);\\n        $montantMutuelle = (($prestation->montant*80)/100);\\n\\n        return view('pages.backend.prestations.show',compact('prestation', 'montantModerateur', 'montantMutuelle'));\\n\\n    }\\n    /**\\n     * Show the form for editing the specified resource.\\n     */\\n    public function edit(Prestation $prestation)\\n    {\\n        //\\n    }\\n\\n    /**\\n     * Update the specified resource in storage.\\n     */\\n    public function update(UpdatePrestationRequest $request, Prestation $prestation)\\n    {\\n        //\\n    }\\n\\n \\n\\n   \\n\\n    /**\\n     * Store a newly created resource in storage.\\n     */\\n   \\n    public function store(StorePrestationRequest $request)\\n    {\\n        $data = $request->all();\\n        $adherentCode = $request->adherentCode;\\n        $totalMontant = Prestation::where('adherentCode', $adherentCode)->sum('montant');\\n        $types = ['consultation', 'hospitalisation', 'radio', 'maternite', 'allocation', 'analyse_biomedicale', 'pharmacie', 'optique', 'dentaire_auditif', 'autre'];\\n        $prestationsToSave = [];\\n\\n        foreach ($types as $type) {\\n        \\n            for ($i = 0; $i <= 20; $i++) { \\n                $typeSuffix = $i > 0 ? \\\"-$i\\\" : ''; \\n                if (!empty($data[\\\"date_$type$typeSuffix\\\"]) && !empty($data[\\\"centre_$type$typeSuffix\\\"]) && !empty($data[\\\"montant_$type$typeSuffix\\\"])) {\\n\\n                    $prestationsToSave[] = [\\n                        'adherentCode' => $data['adherentCode'],\\n                        'adherentNom' => $data['adherentNom'],\\n                        'adherentPrenom' => $data['adherentPrenom'],\\n                        'adherentSexe' => $data['adherentSexe'],\\n                        'beneficiaire' => $data['beneficiaire'],\\n                        'idPrestation' => $data['idPrestation'],\\n                        'contactPrestation' => $data['contactPrestation'],\\n                        'acte_medical_id' => $data[\\\"acte_medical_id\\\"], // Modifie\\n                        'date' => $data[\\\"date_$type$typeSuffix\\\"],\\n                        'centre' => $data[\\\"centre_$type$typeSuffix\\\"],\\n                        'montant' => $data[\\\"montant_$type$typeSuffix\\\"],\\n                        'type' => $data[\\\"type_$type$typeSuffix\\\"] ?? null,\\n                        'sous_type' => $data[\\\"sous_type_$type$typeSuffix\\\"] ?? null,\\n                        'validite' => 'en attente',\\n                        'etat_paiement' => false,\\n                    ];\\n                }\\n            }\\n        }\\n\\n        if (empty($prestationsToSave)) {\\n            return back()->withErrors(['message' => 'Veuillez remplir tous les champs obligatoires pour chaque prestation visible.']);\\n        }\\n        \\n\\n        foreach ($prestationsToSave as $prestationData) {\\n            $montant = $prestationData['montant'];\\n            if ($totalMontant + $montant > 1500000) {\\n                return back()->withErrors(['error' => 'Erreur : La somme totale des prestations de cet adhérent dépasse 1 500 000.']);\\n            }\\n\\n            $prestation = new Prestation($prestationData);\\n            \\n            // if ($request->hasFile('preuve')) {\\n            //     foreach ($request->file('preuve') as $file) {\\n            //         $path = $file->store('preuves', 'public'); \\n            //         $prestation->preuve = json_encode([$path]); \\n            //     }\\n            // }\\n            if ($request->hasFile('preuve')) {\\n                $files = [];\\n                foreach ($request->file('preuve') as $file) {\\n                    $path = $file->store('preuves', 'public');\\n                    $files[] = $path; \\n                }\\n                $prestation->preuve = json_encode($files); \\n            }\\n            \\n\\n            $prestation->save(); \\n        }\\n\\n        return redirect()->route('prestations.index')->with('success', 'Enregistrement réussi');\\n    }\\n \\n // Backend\\n    /**\\n     * Display a listing of the resource.\\n     */\\n    public function index()\\n    {\\n        $user = Auth::user();\\n\\n        $adherents = Adherent::all(); \\n        $ayantsDroit = AyantDroit::all(); \\n\\n        // Date limite pour l'adhésion (6 mois en arrière)\\n        $sixMonthsAgo = Carbon::now()->subMonths(6);\\n\\n        \\n        $adherentsValides = Adherent::where('date_enregistrement', '<=', $sixMonthsAgo)->get();\\n\\n    \\n\\n        \\n        $ayantsDroitValides = AyantDroit::whereIn('adherent_id', $adherentsValides->pluck('id'))->get();\\n\\n        $prestations = Prestation::orderBy('created_at', 'desc')->get();\\n        $prestationsValides = Prestation::where('validite', 'accepté')->get();\\n\\n        return view('pages.backend.prestations.index', compact('adherents', 'ayantsDroit', 'prestations', 'prestationsValides', 'adherentsValides', 'ayantsDroitValides'));\\n\\n    }\\n\\n    /**\\n     * Show the form for creating a new resource.\\n     */\\n    public function create()\\n    {\\n        $adherents = Adherent::all(); \\n        $ayantsDroit = AyantDroit::all(); \\n\\n        // Date limite pour l'adhésion (6 mois en arrière)\\n        $sixMonthsAgo = Carbon::now()->subMonths(6);\\n\\n        \\n        $adherentsValides = Adherent::all();\\n\\n    \\n\\n        \\n        $ayantsDroitValides = AyantDroit::whereIn('adherent_id', $adherentsValides->pluck('id'))->get();\\n\\n        $prestations = Prestation::all();\\n        $prestationsValides = Prestation::where('validite', 'accepté')->get();\\n\\n        return view('pages.backend.prestations.create', compact('adherents', 'ayantsDroit', 'prestations', 'prestationsValides', 'adherentsValides', 'ayantsDroitValides'));\\n\\n    }\\n \\n   /**\\n     * Update the specified resource in storage.\\n     */\\n    public function update(UpdatePartenaireRequest $request,  $id)\\n    {\\n        $partenaire = Partenaire::findOrFail($id);\\n\\n        $partenaire->update($request->validated());\\n        return redirect()->route('partenaires.index')->with('success', 'partenaire de santé mis à jour avec succès.');\\n    }\\n\\n    /**\\n     * Remove the specified resource from storage.\\n     */\\n    public function destroy($id)\\n    {\\n        $partenaireSante = Partenaire::findOrFail($id);\\n        $partenaireSante->delete();\\n        return redirect()->route('partenaires.index')->with('success', 'partenaire de santé supprimé avec succès.');\\n    }\\n \\n\\n    /**\\n     * Display the specified resource.\\n     */\\n    public function show($id)\\n    {\\n        $partenaire = Partenaire::findOrFail($id);\\n        $breadcrumbsItems = [\\n            [\\n                'name' => 'Partenaires',\\n                'url' => route('partenaires.index'),\\n                'active' => false\\n            ],\\n            [\\n                'name' => $partenaire->nom, \\n                'url' => route('partenaires.show', $partenaire->id),\\n                'active' => true\\n            ],\\n        ];\\n    \\n        $pageTitle = 'Détails de ' . $partenaire->nom;\\n        return view('pages.backend.partenaires.show', compact('partenaire', 'breadcrumbsItems', 'pageTitle'));\\n    }\\n\\n\\n\\n    /**\\n     * Show the form for editing the specified resource.\\n     */\\n    public function edit($id)\\n    {\\n        $partenaire = Partenaire::findOrFail($id); \\n\\n        $breadcrumbsItems = [\\n            [\\n                'name' => 'Partenaires',\\n                'url' => route('partenaires.index'),\\n                'active' => false\\n            ],\\n            [\\n                'name' => $partenaire->nom,  \\n                'url' => route('partenaires.index'),\\n                'active' => true\\n            ],\\n        ];\\n\\n        $pageTitle = 'Édition de ' . $partenaire->nom;  \\n\\n        return view('pages.backend.partenaires.edit', compact('partenaire', 'breadcrumbsItems', 'pageTitle'));\\n    }\\n \\n    /**\\n     * Display a listing of the resource.\\n     */\\n    public function index()\\n    {\\n        $breadcrumbsItems = [\\n            [\\n                'name' => 'Partenaires',\\n                'url' => route('partenaires.index'),\\n                'active' => true\\n            ],\\n        \\n        ];\\n        $pageTitle = 'Partenaires';\\n\\n        $partenaires = Partenaire::all();\\n\\n        $hopitaux = $partenaires->where('type', 'hopital');\\n        $cliniques = $partenaires->where('type', 'clinique');\\n        $pharmacies = $partenaires->where('type', 'pharmacie');\\n\\n        return view('pages.backend.partenaires.index', [\\n            'partenaires' => $partenaires,\\n            'hopitaux' => $hopitaux,\\n            'cliniques' => $cliniques,\\n            'pharmacies' => $pharmacies,\\n\\n            'breadcrumbsItems' => $breadcrumbsItems,\\n            'pageTitle' => $pageTitle,\\n\\n        ]);\\n        \\n    }\\n\\n    /**\\n     * Show the form for creating a new resource.\\n     */\\n    public function create()\\n    {\\n        $breadcrumbsItems = [\\n            [\\n                'name' => 'Partenaires',\\n                'url' => route('partenaires.index'),\\n                'active' => false\\n            ],\\n            [\\n                'name' => 'Ajouter',\\n                'url' => route('partenaires.create'),\\n                'active' => true\\n            ],\\n        ];\\n        $pageTitle = 'Ajouter un partenaire';\\n\\n        return view('pages.backend.partenaires.create', compact('breadcrumbsItems', 'pageTitle'));\\n\\n    }\\n\\n    /**\\n     * Store a newly created resource in storage.\\n     */\\n    public function store(StorePartenaireRequest $request)\\n    {\\n        if ($request->hasFile('photo')) {\\n            $photoPath = $request->file('photo')->store('photos/partenaires', 'public');\\n\\n        } else {\\n            $photoPath = null;  \\n        }\\n        \\n        \\n        $validatedData = $request->validated();\\n        $validatedData['photo'] = $photoPath; \\n\\n        $validatedData['password'] = Hash::make('123456789'); \\n        Partenaire::create($validatedData);\\n        return redirect()->route('partenaires.index')->with('success', 'Partenaire de santé ajouté avec succès.');\\n    }\\n \\n\\n    public function accept($id)\\n    {\\n        $adherent = Adherent::where('id', $id)->first();\\n        if ($adherent) {\\n            $adherent->is_adherent = true;\\n            $adherent->save();\\n\\n            return redirect()->back()->with('status', 'La demande a été acceptée avec succès.');\\n        }\\n\\n        return redirect()->back()->withErrors(['error' => 'Adhérent non trouvé.']);\\n    }\\n \\n    /**\\n     * Show the form for creating a new resource.\\n     */\\n    public function create()\\n    {\\n        \\n    }\\n\\n    /**\\n     * Display the specified resource.\\n     */\\n    public function show(DemandeAdhesion $demande)\\n    {\\n        $breadcrumbsItems = [\\n            [\\n                'name' => 'Demandes',\\n                'url' => route('demandes.index'),\\n                'active' => false\\n            ],\\n            [\\n                'name' => 'Adhésions',\\n                'url' => route('demandes.index'),\\n                'active' => true\\n            ],\\n        ];\\n        $pageTitle = 'Demande N°'.$demande->id;\\n        $demande->ayantsDroits = json_decode($demande->ayantsDroits, true); \\n\\n        return view('pages.backend.demandes.show', compact('demande', 'breadcrumbsItems', 'pageTitle' ));\\n\\n    }\\n\\n    /**\\n     * Show the form for editing the specified resource.\\n     */\\n    public function edit( $id)\\n    {\\n        $demande = DemandeAdhesion::findOrFail($id); \\n        $pageTitle = 'Modification demande N°'.$demande->id;\\n\\n\\n        return view('pages.backend.demandes.edit',compact('demande', 'pageTitle'));\\n    }\\n\\n \\n/**\\n     * Display a listing of the resource.\\n     */\\n    public function index()\\n    {\\n        \\n        $breadcrumbsItems = [\\n            [\\n                'name' => 'Adhésions',\\n                'url' => route('adherents.index'),\\n                'active' => true\\n            ],\\n        ];\\n        $pageTitle = 'Liste des demandes d\\\\'adhésions';\\n\\n        $demandes = Adherent::orderBy('created_at', 'desc')->get();\\n        \\n        return view('pages.backend.demandes.index', compact('demandes', 'breadcrumbsItems', 'pageTitle'));\\n    }\\n    \\n\\n\\n \\n   \\n    public function update(UpdateAyantDroitRequest $request, $id)\\n    {\\n        $validatedData = $request->validate([\\n            'nom' => 'required',\\n            'prenom' => 'required',\\n            'sexe' => 'required',\\n            'date_naissance' => 'required|date',\\n            'relation' => 'required',\\n            'adherent_id' => 'required',\\n            'code' => 'required',\\n        ]);\\n\\n        $ayantDroit = AyantDroit::findOrFail($id);\\n\\n        $ayantDroit->nom = $validatedData['nom'];\\n        $ayantDroit->prenom = $validatedData['prenom'];\\n        $ayantDroit->sexe = $validatedData['sexe'];\\n        $ayantDroit->date_naissance = $validatedData['date_naissance'];\\n        $ayantDroit->relation = $validatedData['relation'];\\n\\n        $adherent = Adherent::where('no_matricule', $request->adherent_id)->firstOrFail();\\n        $ayantDroit->adherent_id = $adherent->id; \\n        $ayantDroit->code = $validatedData['code'];\\n\\n        $ayantDroit->save();\\n\\n        return redirect()->route('adherents.index')->with('success', 'Ayant droit mis à jour avec succès.');\\n    }\\n\\n\\n    \\n    /**\\n    * Remove the specified resource from storage.\\n    */\\n    public function destroy($id)\\n    {\\n        try {\\n            $ayantDroit = AyantDroit::findOrFail($id);\\n            \\n            $ayantDroit->delete();\\n\\n            return response()->json(['success' => 'Enregistrement supprimé avec succès!'], 200);\\n        } catch (\\\\Exception $e) {\\n            return response()->json(['error' => 'Erreur lors de la suppression: ' . $e->getMessage()], 500);\\n        }\\n    }\\n \\n\\n\\n    \\n   \\n    \\n    /**\\n    * Update the specified resource in storage.\\n    */\\n \\n public function import(Request $request)\\n    {\\n    $validator = Validator::make($request->all(), [\\n        'excel-file-ayant-droit' => 'required|mimes:xlsx,xls,csv'\\n    ]);\\n    \\n    // Si la validation échoue, retourner avec les erreurs\\n    if ($validator->fails()) {\\n        return back()->withErrors($validator)->withInput();\\n    }\\n    $headerAyantDroit = [\\n            'nom', 'prenom', 'sexe', 'date_naissance', 'relation', 'code', 'matricule_id'\\n    ];\\n\\n    // Récupérer le fichier depuis la requête\\n    $file = $request->file('excel-file-ayant-droit');\\n    try {\\n        // Importer les données depuis le fichier Excel\\n        Excel::import(new AyantDroitsImport, $file);\\n\\n        // Rediriger avec un message de succès\\n        return redirect()->route('adherents.index')\\n                         ->with('success', 'Ayant-droits importés avec succès.');\\n    } catch (\\\\Maatwebsite\\\\Excel\\\\Validators\\\\ValidationException $e) {\\n        $failures = $e->failures();\\n        $messages = [];\\n\\n        // Collecter les messages d'erreur\\n        foreach ($failures as $failure) {\\n            $messages[] = 'Erreur à la ligne ' . $failure->row() . ': ' . implode(', ', $failure->errors());\\n        }\\n\\n        // Retourner avec les messages d'erreur\\n        return back()->withErrors($messages)->withInput();\\n    } catch (\\\\Exception $e) {\\n        Log::error('Erreur générale lors de l\\\\'importation : ' . $e->getMessage());\\n        // En cas d'erreur générale\\n        return back()->withErrors(['error' => 'Erreur lors de l\\\\'importation : ' . $e->getMessage()]);\\n    }\\n    }\\n\\n    /**\\n    * Display the specified resource.\\n    */\\n    public function show(AyantDroit $ayantDroit)\\n    {\\n        //\\n    }\\n    \\n    /**\\n    * Show the form for editing the specified resource.\\n    */\\n    \\n    public function edit($id)\\n    {\\n        $ayantDroit = AyantDroit::findOrFail($id); // Trouver l'ayant droit par ID\\n        $adherents = Adherent::all(); \\n\\n        return view('pages.backend.ayantsdroits.edit',compact('adherents', 'ayantDroit'));\\n\\n    }\\n \\n    // Frontend\\n\\n \\n// Backend\\n\\n    /**\\n    * Display a listing of the resource.\\n    */\\n    public function index()\\n    {\\n        //\\n    }\\n    \\n    /**\\n    * Show the form for creating a new resource.\\n    */\\n    public function create()\\n    {\\n        $breadcrumbsItems = [\\n            [\\n                'name' => 'Adhésions',\\n                'url' => route('adherents.index'),\\n                'active' => false\\n            ],\\n            [\\n                'name' => 'Création ayant droit',\\n                'url' => route('ayantsdroits.create'),\\n                'active' => true\\n            ],\\n        ];\\n        $pageTitle = 'Création ayant droit';\\n        $adherents = Adherent::all();\\n        \\n        return view('pages.backend.ayantsdroits.create',compact('adherents', 'pageTitle', 'breadcrumbsItems'));\\n        \\n    }\\n    \\n    /**\\n    * Store a newly created resource in storage.\\n    */\\n    public function store(StoreAyantDroitRequest $request)\\n    {\\n        $validatedData = $request->validate([\\n            'nom' => 'required',\\n            'prenom' => 'required',\\n            'sexe' => 'required',\\n            'date_naissance' => 'required|date',\\n            'relation' => 'required',\\n            'adherent_id' => 'required',\\n            'code' => 'required',\\n            \\n        ]);\\n        \\n        $adherent = Adherent::where('no_matricule', $request->adherent_id)->firstOrFail();\\n        $header = [\\n            'ordre', 'date_enregistrement', 'nom', 'prenom', 'genre', 'service', 'no_matricule',\\n             'code_carte', 'telephone', 'charge', 'mensualite', 'adhesion'\\n        ];\\n        $headerAyantDroit = [\\n             'nom', 'prenom', 'sexe', 'date_naissance', 'relation', 'code', 'matricule_adherent'\\n        ];\\n        \\n        $adherents = Adherent::all();\\n        $ayantsDroit = AyantDroit::with('adherent')->get()->map(function($ayantDroit) {\\n            return [\\n                'id' => $ayantDroit->id,\\n                'nom' => $ayantDroit->nom,\\n                'prenom' => $ayantDroit->prenom,\\n                'sexe' => $ayantDroit->sexe,\\n                'date_naissance' => $ayantDroit->date_naissance,\\n                'relation' => $ayantDroit->relation,\\n                'code' => $ayantDroit->code,\\n                'matricule_adherent' => $ayantDroit->adherent->no_matricule, \\n            ];\\n        });        \\n        $ayantDroit = new AyantDroit();\\n        $ayantDroit->nom = $validatedData['nom'];\\n        $ayantDroit->prenom = $validatedData['prenom'];\\n        $ayantDroit->sexe = $validatedData['sexe'];\\n        $ayantDroit->date_naissance = $validatedData['date_naissance'];\\n        $ayantDroit->relation = $validatedData['relation'];\\n        $ayantDroit->adherent_id = $adherent->id; \\n\\n        $ayantDroit->code = $validatedData['code'];\\n        \\n        $ayantDroit->save();\\n        return redirect()->route('adherents.index')->with('success', 'Ayant droit ajouté avec succès.');\\n   \\n        \\n\\n    }\\n    \\n \\n\\n    /**\\n     * Remove the specified resource from storage.\\n     */\\n    public function destroy($id)\\n    {\\n        try {\\n            $adherent = Adherent::findOrFail($id);\\n            $adherent->delete();\\n            \\n            return response()->json(['status' => 'success']);\\n        } catch (\\\\Exception $e) {\\n            return response()->json(['status' => 'error', 'message' => $e->getMessage()]);\\n        }\\n    }\\n \\n/**\\n     * Show the form for editing the specified resource.\\n     */\\n    public function edit( $id)\\n    {\\n        $adherent = Adherent::findOrFail($id); // Trouver l'ayant droit par ID\\n\\n        return view('pages.backend.adherents.edit',compact('adherent'));\\n    }\\n\\n    /**\\n     * Update the specified resource in storage.\\n     */\\n    public function update(UpdateAdherentRequest $request, $id)\\n    {\\n\\n        $validatedData = $request->validate([\\n            'nom' => 'required',\\n            'prenom' => 'required',\\n            'genre' => 'required',\\n            'service' => 'required',\\n            'no_matricule' => 'required',\\n            'code_carte' => 'required',\\n            'charge' => 'required',\\n            'mensualite' => 'required',\\n            'adhesion' => 'required',\\n            'date_enregistrement' => 'required|date',\\n            'photo' => 'image|nullable', // optionnel\\n        ]);\\n        $adherent = Adherent::findOrFail($id);\\n\\n        $adherent->nom = $validatedData['nom'];\\n        $adherent->prenom = $validatedData['prenom'];\\n        $adherent->genre = $validatedData['genre'];\\n        $adherent->service = $validatedData['service'];\\n        $adherent->no_matricule = $validatedData['no_matricule'];\\n        $adherent->code_carte = $validatedData['code_carte'];\\n        $adherent->charge = $validatedData['charge'];\\n        $adherent->mensualite = $validatedData['mensualite'];\\n        $adherent->adhesion = $validatedData['adhesion'];\\n        $adherent->date_enregistrement = $validatedData['date_enregistrement'];\\n\\n        if ($request->hasFile('photo')) {\\n            $photoPath = $request->file('photo')->store('photos', 'public');\\n            $adherent->photo = $photoPath;\\n        }\\n\\n        $adherent->save();\\n\\n        return redirect()->route('adherents.index')->with('success', 'Adhérent mis à jour avec succès.');\\n    }\\n \\n// Backend\\n\\n    /**\\n     * Display a listing of the resource.\\n     */\\n    public function index()\\n    {\\n        $header = [\\n            'ordre', 'date_enregistrement', 'nom', 'prenom', 'genre', 'service', 'no_matricule',\\n            'code_carte', 'telephone', 'charge', 'mensualite', 'adhesion'\\n        ];\\n        $headerAyantDroit = [\\n            'nom', 'prenom', 'sexe', 'date_naissance', 'relation', 'code', 'matricule_adherent'\\n        ];\\n        $breadcrumbsItems = [\\n            [\\n                'name' => 'Adhésions',\\n                'url' => route('adherents.index'),\\n                'active' => true\\n            ],\\n        ];\\n        $pageTitle = 'Liste des adhésions';\\n\\n        $adherents = Adherent::all();\\n        $ad = AyantDroit::all();\\n        $mutualistes = $adherents->concat($ad);\\n\\n        $groupedAdherents = $adherents->groupBy(function($adherent) {\\n            return \\\\Carbon\\\\Carbon::parse($adherent->date_enregistrement)->format('Y-m');\\n        })->sortKeys();\\n        $sheets = [];\\n        foreach ($groupedAdherents as $yearMonth => $adherents) {\\n            $sheets[$yearMonth] = $adherents->map(function($adherent) {\\n                return [\\n                    'id'=> $adherent->id,\\n                    'ordre' => $adherent->ordre,\\n                    'date_enregistrement' => $adherent->date_enregistrement,\\n                    'nom' => $adherent->nom,\\n                    'prenom' => $adherent->prenom,\\n                    'genre' => $adherent->genre,\\n                    'service' => $adherent->service,\\n                    'no_matricule' => $adherent->no_matricule,\\n                    'code_carte' => $adherent->code_carte,\\n                    'telephone' => $adherent->telephone,\\n                    'charge' => $adherent->charge,\\n                    'mensualite' => $adherent->mensualite,\\n                    'adhesion' => $adherent->adhesion,\\n                ];\\n            })->toArray();\\n        }\\n    \\n        $ayantsDroit = AyantDroit::with('adherent')->get()->map(function($ayantDroit) {\\n            return [\\n                'id' => $ayantDroit->id,\\n                'nom' => $ayantDroit->nom,\\n                'prenom' => $ayantDroit->prenom,\\n                'sexe' => $ayantDroit->sexe,\\n                'date_naissance' => $ayantDroit->date_naissance,\\n                'relation' => $ayantDroit->relation,\\n                'code' => $ayantDroit->code,\\n                'matricule_adherent' => $ayantDroit->adherent->no_matricule, \\n                'date_enregistrement_adherent' => $ayantDroit->adherent->date_enregistrement \\n\\n            ];\\n        });\\n        $ayantsDroitAll = AyantDroit::all();\\n        \\n        $groupedAyantsDroits = $ayantsDroit->groupBy(function($ayantDroit) {\\n            return Carbon::parse($ayantDroit['date_enregistrement_adherent'])->format('Y-m');\\n        })->sortKeys();\\n\\n        \\n    \\n        $sheetsAyantsDroits = [];\\n        foreach ($groupedAyantsDroits as $yearMonth => $ayantsDroits) {\\n            $sheetsAyantsDroits[$yearMonth] = collect($ayantsDroits)->map(function($ayantDroit) {\\n                return [\\n                    'id' => $ayantDroit['id'],\\n                    'nom' => $ayantDroit['nom'],\\n                    'prenom' => $ayantDroit['prenom'],\\n                    'sexe' => $ayantDroit['sexe'],\\n                    'date_naissance' => $ayantDroit['date_naissance'],\\n                    'relation' => $ayantDroit['relation'],\\n                    'code' => $ayantDroit['code'],\\n                    'matricule_adherent' => $ayantDroit['matricule_adherent'],\\n                ];\\n            })->toArray();\\n        }\\n\\n        return view('pages.backend.adherents.index', compact('header', 'mutualistes','ayantsDroitAll', 'sheets', 'sheetsAyantsDroits', 'ayantsDroit', 'ad','adherents', 'headerAyantDroit', 'breadcrumbsItems', 'pageTitle'));\\n    }\\n    \\n\\n\\n    /**\\n     * Show the form for creating a new resource.\\n     */\\n    public function create()\\n    {\\n        $breadcrumbsItems = [\\n            [\\n                'name' => 'Adhésions',\\n                'url' => route('adherents.index'),\\n                'active' => false\\n            ],\\n            [\\n                'name' => 'Création adhérent',\\n                'url' => route('adherents.create'),\\n                'active' => true\\n            ],\\n        ];\\n        $pageTitle = 'Création adhérent';\\n\\n        return view('pages.backend.adherents.create', compact('pageTitle', 'breadcrumbsItems'));\\n    }\\n\\n    /**\\n     * Store a newly created resource in storage.\\n     */\\n    public function store(StoreAdherentRequest $request)\\n    {\\n        $header = [\\n            'ordre', 'date_enregistrement', 'nom', 'prenom', 'genre', 'service', 'no_matricule',\\n             'code_carte', 'telephone', 'charge', 'mensualite', 'adhesion'\\n        ];\\n        $headerAyantDroit = [\\n            'nom', 'prenom', 'sexe', 'date_naissance', 'relation', 'code', 'matricule_adherent'\\n        ];\\n    \\n        $adherents = Adherent::all();\\n        $ayantsDroit = AyantDroit::with('adherent')->get()->map(function($ayantDroit) {\\n            return [\\n                'id' => $ayantDroit->id,\\n                'nom' => $ayantDroit->nom,\\n                'prenom' => $ayantDroit->prenom,\\n                'sexe' => $ayantDroit->sexe,\\n                'date_naissance' => $ayantDroit->date_naissance,\\n                'relation' => $ayantDroit->relation,\\n                'code' => $ayantDroit->code,\\n                'matricule_adherent' => $ayantDroit->adherent->no_matricule, // Matricule de l'adhérent\\n            ];\\n        });\\n        $validatedData = $request->validate([\\n            'nom' => 'required',\\n            'prenom' => 'required',\\n            'genre' => 'required',\\n            'service' => 'required',\\n            'no_matricule' => 'required',\\n            'code_carte' => 'required',\\n            'telephone' => 'required',\\n            'charge' => 'required',\\n            'mensualite' => 'required',\\n            'adhesion' => 'required',\\n            'photo' => 'image', \\n            'date_enregistrement'=>'required',\\n        ]);\\n\\n        if ($request->hasFile('photo')) {\\n            $photoPath = $request->file('photo')->store('photos', 'public');\\n            $validatedData['photo'] = $photoPath;\\n        }\\n\\n        $validatedData['ordre'] = $validatedData['ordre'] ?? 0; \\n\\n        $adherent = Adherent::create($validatedData);\\n        session()->flash('header', $header);\\n        session()->flash('adherents', $adherents);\\n        return redirect()->route('adherents.index')->with('success', 'Adhérent ajouté avec succès.');\\n    \\n    \\n    }\\n\\n    /**\\n     * Display the specified resource.\\n     */\\n    public function show(Adherent $adherent)\\n    {\\n        $pretations = Prestation::where('adherentCode' == $adherent->code_carte);\\n        return view('pages.backend.adherents.show', compact('adherent', 'pretations'));\\n\\n    }\\n \\n2\\n \\n$table->uuid('partenaire_id'); \\n            $table->foreign('partenaire_id')->references('id')->on('partenaires')->onDelete('cascade');\\n \\n$table->uuid('partenaire_id'); \\n            $table->foreign('partenaire_id')->references('id')->on('partenaires')->onDelete('cascade');\\n \\n<<<<<<< Updated upstream\\n\\n \\n<<<<<<< Updated upstream\\n=======\\n                <div class=\\\"flex justify-center space-x-4\\\">\\n                    <a href=\\\"{{ route('partenaires.edit', $partenaire) }}\\\" >\\n                        <x-primary-button>\\n                            Modifier\\n                        </x-primary-button>\\n                    </a>\\n            \\n                    <!-- Bouton Supprimer -->\\n                    <form action=\\\"{{ route('partenaires.destroy', $partenaire->id) }}\\\" method=\\\"POST\\\" onsubmit=\\\"return confirm('Êtes-vous sûr de vouloir supprimer ce partenaire de santé ?');\\\">\\n                        @csrf\\n                        @method('DELETE')\\n                        <x-primary-button type=\\\"submit\\\" class=\\\" bg-red-600  hover:bg-red-700\\\">\\n                            Supprimer\\n                        </x-primary-button>\\n                    </form>\\n                </div>\\n            </div>\\n \\n>>>>>>> Stashed changes\\n\\n \\n=======\\n\\n \\n<section class=\\\"bg-white dark:bg-gray-900\\\">\\n                    <div class=\\\"gap-8 items-center py-8 px-4 mx-auto max-w-screen-xl xl:gap-16 md:grid md:grid-cols-2 sm:py-16 lg:px-6\\\">\\n\\n                        <img class=\\\"w-full max-h-[400px] h-auto dark:hidden\\\" src=\\\"{{ Storage::url($partenaire->photo) }}\\\" alt=\\\"partenaire de santé image\\\">\\n                        <img class=\\\"w-full max-h-[400px] h-auto hidden dark:block\\\" src=\\\"{{ Storage::url($partenaire->photo) }}\\\" alt=\\\"partenaire de santé image\\\">\\n\\n                        <div class=\\\"mt-4 md:mt-0\\\">\\n                            <h2 class=\\\"mb-6 text-xl font-extrabold text-gray-900 dark:text-white\\\">Détails</h2>\\n                            <div class=\\\"card bg-gray-50 dark:bg-gray-800 p-6 rounded-lg shadow-md\\\">\\n                                <div class=\\\"card-body text-sm\\\">\\n                                    <p class=\\\" font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Type :</strong> {{ $partenaire->type }}</p>\\n                                    <p class=\\\" font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Adresse :</strong> {{ $partenaire->adresse }}</p>\\n                                    <p class=\\\" font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Téléphone :</strong> {{ $partenaire->telephone }}</p>\\n                                    <p class=\\\" font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Email :</strong> {{ $partenaire->email }}</p>\\n                                    <p class=\\\" font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Région :</strong> {{ $partenaire->region }}</p>\\n                                    <p class=\\\"font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Province :</strong> {{ $partenaire->province }}</p>\\n                                    <p class=\\\"font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Date d&apos;affiliation :</strong> {{ $partenaire->created_at }}</p>\\n                                </div>\\n\\n                                \\n>>>>>>> Stashed changes\\n \\n<<<<<<< Updated upstream\\n\\n                <section class=\\\"bg-white dark:bg-gray-900\\\">\\n                    <div class=\\\"gap-8 items-center py-8 px-4 mx-auto max-w-screen-xl xl:gap-16 md:grid md:grid-cols-2 sm:py-16 lg:px-6\\\">\\n\\n                        <img class=\\\"w-full max-h-[400px] h-auto dark:hidden\\\" src=\\\"{{ Storage::url($centre->photo) }}\\\" alt=\\\"Centre de santé image\\\">\\n                        <img class=\\\"w-full max-h-[400px] h-auto hidden dark:block\\\" src=\\\"{{ Storage::url($centre->photo) }}\\\" alt=\\\"Centre de santé image\\\">\\n\\n                        <div class=\\\"mt-4 md:mt-0\\\">\\n                            <h2 class=\\\"mb-6 text-3xl font-extrabold text-gray-900 dark:text-white\\\">Détails</h2>\\n                            <div class=\\\"card bg-gray-50 dark:bg-gray-800 p-6 rounded-lg shadow-md\\\">\\n                                <div class=\\\"card-body\\\">\\n                                    <p class=\\\"text-lg font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Type :</strong> {{ $centre->type }}</p>\\n                                    <p class=\\\"text-lg font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Adresse :</strong> {{ $centre->adresse }}</p>\\n                                    <p class=\\\"text-lg font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Téléphone :</strong> {{ $centre->telephone }}</p>\\n                                    <p class=\\\"text-lg font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Email :</strong> {{ $centre->email }}</p>\\n                                    <p class=\\\"text-lg font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Région :</strong> {{ $centre->region }}</p>\\n                                    <p class=\\\"text-lg font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Province :</strong> {{ $centre->province }}</p>\\n                                    <p class=\\\"text-lg font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Date d'affiliation :</strong> {{ $centre->date_affiliation }}</p>\\n                                </div>\\n\\n                                <!-- Actions -->\\n                                <div class=\\\"flex justify-end gap-4 mt-4\\\">\\n                                    <a href=\\\"{{ route('partenaires.index', $partenaire) }}\\\" >\\n                                        Retour à la liste\\n                                    </a>\\n\\n                                    <a href=\\\"{{ route('partenaires.edit', $partenaire) }}\\\" >                                        \\n                                        Modifier\\n                                    </a>\\n\\n                                    <!-- Bouton Supprimer -->\\n                                    <form action=\\\"{{ route('partenaires.destroy', $partenaire->id) }}\\\" method=\\\"POST\\\" onsubmit=\\\"return confirm('Êtes-vous sûr de vouloir supprimer ce partenaire de santé ?');\\\">\\n                                        @csrf\\n                                        @method('DELETE')\\n                                        <x-primary-button type=\\\"submit\\\" class=\\\" bg-red-600  hover:bg-red-700\\\">\\n                                            Supprimer\\n                                        </x-primary-button>\\n                                    </form>\\n                                </div>\\n=======\\n                <section class=\\\"bg-white dark:bg-gray-900\\\">\\n                    <div class=\\\"gap-8 items-center py-8 px-4 mx-auto max-w-screen-xl xl:gap-16 md:grid md:grid-cols-2 sm:py-16 lg:px-6\\\">\\n\\n                        <img class=\\\"w-full max-h-[400px] h-auto dark:hidden\\\" src=\\\"{{ Storage::url($partenaire->photo) }}\\\" alt=\\\"partenaire de santé image\\\">\\n                        <img class=\\\"w-full max-h-[400px] h-auto hidden dark:block\\\" src=\\\"{{ Storage::url($partenaire->photo) }}\\\" alt=\\\"partenaire de santé image\\\">\\n\\n                        <div class=\\\"mt-4 md:mt-0\\\">\\n                            <h2 class=\\\"mb-6 text-xl font-extrabold text-gray-900 dark:text-white\\\">Détails</h2>\\n                            <div class=\\\"card bg-gray-50 dark:bg-gray-800 p-6 rounded-lg shadow-md\\\">\\n                                <div class=\\\"card-body text-sm\\\">\\n                                    <p class=\\\" font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Type :</strong> {{ $partenaire->type }}</p>\\n                                    <p class=\\\" font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Adresse :</strong> {{ $partenaire->adresse }}</p>\\n                                    <p class=\\\" font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Téléphone :</strong> {{ $partenaire->telephone }}</p>\\n                                    <p class=\\\" font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Email :</strong> {{ $partenaire->email }}</p>\\n                                    <p class=\\\" font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Région :</strong> {{ $partenaire->region }}</p>\\n                                    <p class=\\\"font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Province :</strong> {{ $partenaire->province }}</p>\\n                                    <p class=\\\"font-semibold text-gray-700 dark:text-gray-300\\\"><strong>Date d&apos;affiliation :</strong> {{ $partenaire->created_at }}</p>\\n                                </div>\\n\\n                                \\n>>>>>>> Stashed changes\\n \\nsrc=\\\"\\n \\nHash::make('123456789')\\n \\nHash::make('123456789')\\n \\ntext-lg \\n \\ntext-lg \\n \\ntext-lg\\n \\ntext-lg\\n \\ntext-lg\\n \\ntext-lg\\n \\ntext-lg\\n \\nhidden\\n \\n                        <img class=\\\"w-full max-h-[400px] h-auto dark:hidden\\\" src=\\\"{{ Storage::url($partenaire->photo) }}\\\" alt=\\\"partenaire de santé image\\\">\\n\\n \\nmax:100\\n \\n            'date_affiliation' => 'nullable|date',\\n\\n \\n        'date_affiliation',\\n\\n \\n            $table->date('date_affiliation')->nullable();\\n\\n \\n<!-- Actions -->\\n                                <div class=\\\"flex justify-end gap-4 mt-4\\\">\\n                                    <a href=\\\"{{ route('centres-sante.index') }}\\\" class=\\\"btn btn-secondary text-white bg-gray-600 hover:bg-gray-700 rounded-lg py-2 px-4\\\">\\n                                        Retour à la liste\\n                                    </a>\\n                                    <a href=\\\"{{ route('centres-sante.edit', $centre) }}\\\" class=\\\"btn btn-primary text-white bg-blue-600 hover:bg-blue-700 rounded-lg py-2 px-4\\\">\\n                                        Modifier\\n                                    </a>\\n                                    <form action=\\\"{{ route('centres-sante.destroy', $centre) }}\\\" method=\\\"POST\\\" class=\\\"d-inline\\\" onsubmit=\\\"return confirm('Êtes-vous sûr de vouloir supprimer ce centre ?');\\\">\\n                                        @csrf\\n                                        @method('DELETE')\\n                                        <button type=\\\"submit\\\" class=\\\"btn btn-danger text-white bg-red-600 hover:bg-red-700 rounded-lg py-2 px-4\\\">\\n                                            Supprimer\\n                                        </button>\\n                                    </form>\\n                                </div>\\n \\ncol-span-2\\n \\nlien Google Maps\\n \\n                                <!-- Prévisualisation de l'image -->\\n\\n \\n                            \\n                           \\n                            \\n                       \\n \\nheight=\\\"400px\\\"\\n \\n <div id=\\\"map-preview\\\" class=\\\"w-full h-60 mt-4\\\">\\n                                <iframe id=\\\"map-iframe\\\" width=\\\"100%\\\" height=\\\"100%\\\" style=\\\"border:0;\\\" src=\\\"\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\\n                            </div>\\n                            \\n                            <script>\\n                                document.getElementById('google_maps_link').addEventListener('input', function() {\\n                                    const link = this.value;\\n                                    const iframe = document.getElementById('map-iframe');\\n                                    \\n                                    // Vérification si l'URL appartient à Google Maps et si c'est un lien 'maps.app.goo.gl'\\n                                    if (link.includes('maps.app.goo.gl')) {\\n                                        // Extraire les coordonnées du lien 'maps.app.goo.gl'\\n                                        const regex = /https:\\\\/\\\\/maps\\\\.app\\\\.goo\\\\.gl\\\\/([a-zA-Z0-9_-]+)/;\\n                                        const match = link.match(regex);\\n                                        \\n                                        if (match) {\\n                                            // Extraire le code de localisation\\n                                            const placeId = match[1];\\n                                            // Construire l'URL d'iframe avec la version correcte\\n                                            iframe.src = `https://www.google.com/maps/embed/v1/place?q=${placeId}&key=AIzaSyDGqTyqoPIvYxhn_Sa7ZrK5bENUWhpCo0w`;\\n                                        } else {\\n                                            iframe.src = '';  // Effacer l'iframe si l'URL n'est pas valide\\n                                        }\\n                                    } else if (link.includes('google.com/maps')) {\\n                                        // Si c'est un lien classique de Google Maps (exemple avec des coordonnées ou un lieu)\\n                                        iframe.src = `https://www.google.com/maps/embed?pb=${encodeURIComponent(link.split('maps')[1])}`;\\n                                    } else {\\n                                        iframe.src = '';  // Effacer l'iframe si ce n'est pas un lien valide\\n                                    }\\n                                });\\n                            </script>\\n \\n <div class=\\\"w-full\\\">\\n                                <label for=\\\"google_maps_link\\\" class=\\\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\\\">Lien Google Maps</label>\\n                                <input type=\\\"url\\\" name=\\\"google_maps_link\\\" id=\\\"google_maps_link\\\" class=\\\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\\\" placeholder=\\\"Entrez un lien Google Maps\\\" required>\\n                                @error('google_maps_link')\\n                                    <p class=\\\"text-sm text-red-600\\\">{{ $message }}</p>\\n                                @enderror\\n                            </div>\\n                            \\n                            <div id=\\\"map-preview\\\" class=\\\"w-full h-60 mt-4\\\">\\n                                <iframe id=\\\"map-iframe\\\" width=\\\"100%\\\" height=\\\"100%\\\" style=\\\"border:0;\\\" src=\\\"\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\\n                            </div>\\n                            \\n \\n <script>\\n                                document.getElementById('google_maps_link').addEventListener('input', function() {\\n                                    const link = this.value;\\n                                    const iframe = document.getElementById('map-iframe');\\n                            \\n                                    // Vérification si l'URL appartient à Google Maps et si c'est un lien 'maps.app.goo.gl'\\n                                    if (link.includes('maps.app.goo.gl')) {\\n                                        // Ouvrir le lien dans un nouvel onglet ou dans une nouvelle fenêtre\\n                                        window.open(link, '_blank');\\n                                        iframe.src = '';  // Supprimer l'iframe\\n                                    } else if (link.includes('google.com/maps')) {\\n                                        // Pour un lien classique de Google Maps (comme une adresse ou des coordonnées)\\n                                        iframe.src = `https://www.google.com/maps/embed?pb=${encodeURIComponent(link.split('maps')[1])}`;\\n                                    } else {\\n                                        iframe.src = '';  // Effacer l'iframe si ce n'est pas un lien valide\\n                                    }\\n                                });\\n                            </script>\\n \\n<div class=\\\"w-full\\\">\\n                                <label for=\\\"google_maps_link\\\" class=\\\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\\\">Lien Google Maps</label>\\n                                <input type=\\\"url\\\" name=\\\"google_maps_link\\\" id=\\\"google_maps_link\\\" class=\\\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\\\" placeholder=\\\"Entrez un lien Google Maps\\\" required>\\n                                @error('google_maps_link')\\n                                    <p class=\\\"text-sm text-red-600\\\">{{ $message }}</p>\\n                                @enderror\\n                            </div>\\n                            \\n                            <div id=\\\"map-preview\\\" class=\\\"w-full h-60 mt-4\\\">\\n                                <iframe id=\\\"map-iframe\\\" width=\\\"100%\\\" height=\\\"100%\\\" style=\\\"border:0;\\\" src=\\\"\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\\n                            </div>\\n                            \\n                            <script>\\n                                document.getElementById('google_maps_link').addEventListener('input', function() {\\n                                    const link = this.value;\\n                                    const iframe = document.getElementById('map-iframe');\\n                                    \\n                                    // Vérification si l'URL appartient à Google Maps\\n                                    if (link.includes('google.com/maps')) {\\n                                        // Utilisation de l'iframe sans clé API\\n                                        iframe.src = `https://www.google.com/maps/embed?pb=${encodeURIComponent(link.split('maps')[1])}`;\\n                                    } else {\\n                                        iframe.src = '';  // Effacer l'iframe si ce n'est pas un lien valide\\n                                    }\\n                                });\\n                            </script>\\n                            \\n                            \\n                            \\n                          \\n \\n                                        iframe.src = `https://www.google.com/maps/embed/v1/place?key=YOUR_GOOGLE_MAPS_API_KEY&q=${latitude},${longitude}`;\\n\\n \\n                            <!-- Zone d'aperçu de la carte -->\\n\\n \\n        // Store the data in the database\\n\\n \\n// Génère un UUID si le champ `id` est vide\\n \\n  'plafond',\\n        'date_creation',\\n        'date_invalidite',\\n \\n=======\\n>>>>>>> Stashed changes\\n \\nforeignKey: foreignKey: <<<<<<< Updated upstream\\n\\n \\n=======\\n>>>>>>> Stashed changes\\n \\n: BelongsTo<<<<<<< Updated upstream\\n\\n \\n (clinique privée)\\n \\n// Génère un UUID si le champ `id` est vide\\n \\n        // Générer automatiquement un UUID pour chaque nouveau modèle\\n\\n \\n   protected static function boot()\\n    {\\n        parent::boot();\\n\\n        // Générer automatiquement un UUID pour chaque nouveau modèle\\n        static::creating(function ($model) {\\n            $model->id = (string) \\\\Illuminate\\\\Support\\\\Str::uuid();\\n        });\\n    }\\n \\n   protected static function boot()\\n    {\\n        parent::boot();\\n\\n        // Générer automatiquement un UUID pour chaque nouveau modèle\\n        static::creating(function ($model) {\\n            $model->id = (string) \\\\Illuminate\\\\Support\\\\Str::uuid();\\n        });\\n    }\\n \\n        'id',\\n\\n \\nSeeder\\n \\n 'id',\\n        'code',\\n        'designation',\\n \\n'cout',\\n        'plafond',\\n        'date_creation',\\n        'date_invalidite',\\n\\n \\n->nullable()\\n \\n, [\\n                'consultation',\\n                'hospitalisation',\\n                'radio',\\n                'maternite',\\n                'allocation',\\n                'analyse_biomedicale',\\n                'pharmacie',\\n                'optique',\\n                'dentaire_auditif',\\n                'autre'\\n            ])->nullable(); \\n \\n            $table->date('date_invalidite')->nullable();\\n\\n \\n            $table->date('date_creation'); \\n\\n \\n            $table->decimal('plafond', 10, 2); \\n\\n \\n            $table->string('categorie'); // Catégorie de l'acte médical (ex: soins ambulatoires, hospitalisation, etc.)\\n\\n \\nprincipale\\n \\n_prestation\\n \\n// Type d'acte (ex: IRM, consultation, etc.)\\n \\n// Taux de remboursement en %\\n \\n// Plafond de remboursement\\n \\n            $table->string('unite_plafond')->nullable(); // Unité du plafond (ex: F)\\n\\n \\n// Fréquence de remboursement (ex: /an, /séance, etc.)\\n \\n// Bénéficiaire (ex: /famille, /personne)\\n \\n// Catégorie principale de l'acte\\n \\n            $table->decimal('cout', 10, 2); \\n\\n \\n<div class=\\\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mx-auto\\\">\\n            \\n        \\n        </div>\\n \\n                                <button onclick=\\\"addRow('actesMedicauxBody')\\\" class=\\\"bg-green-500 text-white px-4 py-2 rounded mt-4\\\">Ajouter une ligne</button>\\n\\n \\n                                <button onclick=\\\"addRow('prescriptionBody')\\\" class=\\\"bg-green-500 text-white px-4 py-2 rounded mt-4\\\">Ajouter une ligne</button>\\n\\n \\nadd\\n \\ngreen-500 text-white px-4 py-2 rounded mt-4\\n \\n            // Fonction pour supprimer une ligne\\n\\n \\n                                <button onclick=\\\"addRow('prescriptionBody')\\\" class=\\\"bg-green-500 text-white px-4 py-2 rounded mt-4\\\">Ajouter une ligne</button>\\n\\n \\n            // Fonction pour ajouter une ligne dans un tableau\\n\\n \\n            // Fonction pour afficher/masquer une section\\n\\n \\n                                <button onclick=\\\"addRow('actesMedicauxBody')\\\" class=\\\"bg-green-500 text-white px-4 py-2 rounded mt-4\\\">Ajouter une ligne</button>\\n\\n \\n<button onclick=\\\"addRowToTable('actesMedicauxBody')\\\" class=\\\"bg-green-500 text-white px-4 py-2 rounded mt-2\\\">\\n                                    Ajouter une ligne\\n                                </button>\\n \\n <div class=\\\"section-title\\\">3. ACTES MEDICAUX</div>\\n        <table>\\n            <thead>\\n                <tr>\\n                    <th>Code</th>\\n                    <th>Désignation (Actes médicaux)</th>\\n                    <th>Plafond</th>\\n                    <th>Code/Acte</th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                <tr>\\n                    <td><input type=\\\"text\\\" class=\\\"input-field\\\"></td>\\n                    <td><input type=\\\"text\\\" class=\\\"input-field\\\"></td>\\n                    <td><input type=\\\"text\\\" class=\\\"input-field\\\"></td>\\n                    <td><input type=\\\"text\\\" class=\\\"input-field\\\"></td>\\n                </tr>\\n                <tr>\\n                    <td><input type=\\\"text\\\" class=\\\"input-field\\\"></td>\\n                    <td><input type=\\\"text\\\" class=\\\"input-field\\\"></td>\\n                    <td><input type=\\\"text\\\" class=\\\"input-field\\\"></td>\\n                    <td><input type=\\\"text\\\" class=\\\"input-field\\\"></td>\\n                </tr>\\n                <tr>\\n                    <td><input type=\\\"text\\\" class=\\\"input-field\\\"></td>\\n                    <td><input type=\\\"text\\\" class=\\\"input-field\\\"></td>\\n                    <td><input type=\\\"text\\\" class=\\\"input-field\\\"></td>\\n                    <td><input type=\\\"text\\\" class=\\\"input-field\\\"></td>\\n                </tr>\\n                <tr><td colspan=\\\"4\\\" class=\\\"important\\\">IMPORTANT ! Validité du bulletin de prise en charge : 5 jours - Taux = 80%</td></tr>\\n            </tbody>\\n        </table>\\n\\n        <div class=\\\"section-title\\\">4. PRESCRIPTION MEDICAMENTEUSE</div>\\n        <table>\\n            <thead>\\n                <tr>\\n                    <th>N°</th>\\n                    <th>Médicaments</th>\\n                    <th>Posologie</th>\\n                    <th>Quantité</th>\\n                    <th>Prix Total</th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                <tr><td>1</td><td><input type=\\\"text\\\" class=\\\"input-field\\\"></td><td><input type=\\\"text\\\" class=\\\"input-field\\\"></td><td><input type=\\\"number\\\" class=\\\"input-field\\\"></td><td><input type=\\\"number\\\" class=\\\"input-field\\\"></td></tr>\\n                <tr><td>2</td><td><input type=\\\"text\\\" class=\\\"input-field\\\"></td><td><input type=\\\"text\\\" class=\\\"input-field\\\"></td><td><input type=\\\"number\\\" class=\\\"input-field\\\"></td><td><input type=\\\"number\\\" class=\\\"input-field\\\"></td></tr>\\n                <tr><td colspan=\\\"5\\\" class=\\\"important\\\">IMPORTANT ! Validité du bulletin de prise en charge : 5 jours - Taux = 80%</td></tr>\\n            </tbody>\\n        </table>\\n\\n        <div class=\\\"section-title\\\">5. EXAMENS COMPLEMENTAIRES</div>\\n        <table>\\n            <thead>\\n                <tr>\\n                    <th>Code</th>\\n                    <th>Désignation (Actes médicaux)</th>\\n                    <th>Plafond</th>\\n                    <th>Code/Acte</th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                <tr><td><input type=\\\"text\\\" class=\\\"input-field\\\"></td><td><input type=\\\"text\\\" class=\\\"input-field\\\"></td><td><input type=\\\"text\\\" class=\\\"input-field\\\"></td><td><input type=\\\"text\\\" class=\\\"input-field\\\"></td></tr>\\n                <tr><td colspan=\\\"4\\\" class=\\\"important\\\">IMPORTANT ! Validité du bulletin de prise en charge : 5 jours - Taux = 80%</td></tr>\\n            </tbody>\\n        </table>\\n \\n                // Réinitialiser les radios et remplir le statut\\n\\n \\n                // Remplir les champs automatiquement\\n\\n \\n                // Réinitialiser les radios et remplir le sexe\\n\\n \\n (Partenaire)\\n \\n(Adhérent)\\n \\n                                    <!-- L'utilisateur est connecté à un des guards -->\\n\\n \\nhref=\\\"{{ route('adherent.login') }}\\\"\\n \\n\"\n        }\n    ]\n}"
        }
    ]
}